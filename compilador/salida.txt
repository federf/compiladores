*********************************************************************************** 
**                                                                               ** 
**                            Corriendo casos de prueba . . .                    ** 
**                                                                               ** 
**                                                                               ** 
*********************************************************************************** 
     
     
///////////////////////// TESTS CORRECTOS ////////////////////////////////////////
---------------- Test tests/test_correctos/factorial.ctds ... -------------------


    .text
    .globl	factorial
    .type	factorial, @function 
factorial: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl 8(%ebp),%eax
    movl %eax, -4(%ebp)

    movl $1,-8(%ebp)

    movl	-4(%ebp), %eax
    cmpl	-16(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -20(%ebp)

.BeginWhileLabel4:

    movl $ 1, %eax
    cmpl -20(%ebp), %eax

    jne EndWhileLabel5

    movl -8(%ebp) , %eax 
    movl -4(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-24(%ebp) 

    movl -24(%ebp),%eax
    movl %eax, -8(%ebp)

    movl -4(%ebp) , %eax 
    movl $1 , %edx 
    subl %eax, %edx 
    movl %eax,-32(%ebp) 

    movl -32(%ebp),%eax
    movl %eax, -4(%ebp)

    jmp BeginWhileLabel4

.EndWhileLabel5:

    movl -8(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $3 , 8(%esp)

    call factorial


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/floatTest.ctds ... -------------------


    .text
    .globl	div
    .type	div, @function 
div: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl 8(%ebp) , %eax 
    movl 12(%ebp) , %ecx
	 cltd
    idiv %ecx
    movl %ecx,-4(%ebp) 

    movl -4(%ebp), %eax

    leave
    ret



    .text
    .globl	resta
    .type	resta, @function 
resta: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl 8(%ebp) , %eax 
    movl 12(%ebp) , %edx 
    subl %eax, %edx 
    movl %eax,-4(%ebp) 

    movl -4(%ebp), %eax

    leave
    ret



    .text
    .globl	sum
    .type	sum, @function 
sum: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl 8(%ebp) , %eax 
    movl 12(%ebp), %edx 
    addl %eax, %edx 
    movl %edx,-4(%ebp) 

    movl -4(%ebp), %eax

    leave
    ret



    .text
    .globl	mult
    .type	mult, @function 
mult: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl 8(%ebp) , %eax 
    movl 12(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-4(%ebp) 

    movl -4(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $1.234,-20(%ebp)

    movl	-36(%ebp), %eax 
    negl	%eax 
    movl	%eax, -40(%ebp) 

    movl -40(%ebp),%eax
    movl %eax, -24(%ebp)

    movl	-44(%ebp), %eax 
    negl	%eax 
    movl	%eax, -48(%ebp) 

    movl -48(%ebp),%eax
    movl %eax, -28(%ebp)


    call sum

    movl %eax,-4(%ebp)


    call div

    movl %eax,-8(%ebp)

    movl	-24(%ebp), %eax 
    negl	%eax 
    movl	%eax, -60(%ebp) 


    call resta

    movl %eax,-12(%ebp)


    call mult

    movl %eax,-16(%ebp)


    call sum


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/logicTest.ctds ... -------------------
Error: Method pruebaLogica must return int

    .comm bool,4


    .text
    .globl	pruebaLogica
    .type	pruebaLogica, @function 
pruebaLogica: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $1,-4(%ebp)

    cmpl	$0, -8(%ebp)
    jne .L0
    cmpl	$0, -4(%ebp)
    je .L0
    movl	$1, %eax
    jmp .L1
.L0:
    movl	$0, %eax
    jmp .L2
.L1:
    movl	%eax, -12(%ebp)
.L2:

    cmpl $0, -16(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -20(%ebp) 

    cmpl	$0, -12(%ebp)
    je .L3
    cmpl	$0, -20(%ebp)
    je .L3
    movl	$1, %eax
    jmp .L4
.L3:
    movl	$0, %eax
    jmp .L5
.L4:
    movl	%eax, -24(%ebp)
.L5:

    cmpl $0, 8(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -28(%ebp) 

    cmpl	$0, -24(%ebp)
    je .L6
    cmpl	$0, -28(%ebp)
    je .L6
    movl	$1, %eax
    jmp .L7
.L6:
    movl	$0, %eax
    jmp .L8
.L7:
    movl	%eax, -32(%ebp)
.L8:

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $1 , (%esp)
    call pruebaLogica


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/print_test.ctds ... -------------------


    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $2,-4(%ebp)

    movl $4,-8(%ebp)

    movl -4(%ebp) , %eax 
    movl -8(%ebp), %edx 
    addl %eax, %edx 
    movl %edx,-24(%ebp) 

    movl -24(%ebp),%eax
    movl %eax, -12(%ebp)

    movl $0 , 8(%esp)

    call imprimir

    movl $0, %eax

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/program.ctds ... -------------------


    .text
    .globl	inc
    .type	inc, @function 
inc: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl 8(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-8(%ebp) 

    movl -8(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp


    call get_int

    movl %eax,-8(%ebp) 

    movl $0 , 8(%esp)

    call inc

    movl %eax,-4(%ebp)

    movl	-4(%ebp), %eax
    cmpl	-20(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -24(%ebp)

    movl $ 1, %eax
    cmpl -24(%ebp), %eax

    jne elseCondLabel9

    call imprimir

    jmp endIfLabel10

.elseCondLabel9:

    movl $0 , 12(%esp)

    call imprimir

.endIfLabel10:

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_arreglos2.ctds ... -------------------
buscado: A
actual VarLocation{name=A, type=int[], expr=null, size=5}

    .comm A,20

    .comm B,224

    .comm C,40

    .comm y,4


    .text
    .globl	pruArreglos
    .type	pruArreglos, @function 
pruArreglos: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $8.87,-4(%ebp)

    movl $4,-44(%ebp)

    movl $2.6, %eax 
    movl -4(%ebp), %edx 
    addl %eax, %edx 
    movl %edx,-28(%ebp) 

    movl -28(%ebp),%eax
    movl %eax, -476(%ebp)

    movl	8(%ebp), %eax
    cmpl	12(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -36(%ebp)

    movl -36(%ebp),%eax
    movl %eax, -336(%ebp)

    movl	8(%ebp), %eax
    cmpl	12(%ebp), %eax
    setge %al
    movlzbl %al, %eax
    movl	%eax, -44(%ebp)

    movl -44(%ebp),%eax
    movl %eax, -336(%ebp)

    movl -44(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $1,-300(%ebp)

    movl	-16(%ebp), %eax 
    negl	%eax 
    movl	%eax, -20(%ebp) 

    movl $58, %eax 
    movl -20(%ebp) , %edx 
    subl %eax, %edx 
    movl %eax,-24(%ebp) 

    movl -24(%ebp),%eax
    movl %eax, -44(%ebp)

    movl	-32(%ebp), %eax 
    negl	%eax 
    movl	%eax, -36(%ebp) 

    movl -36(%ebp),%eax
    movl %eax, -476(%ebp)

    movl	-44(%ebp), %eax
    cmpl	-48(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -52(%ebp)

    cmpl $0, -52(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -56(%ebp) 

    movl -56(%ebp),%eax
    movl %eax, -336(%ebp)

    movl $3, %eax 
    movl $3, %edx 
    addl %eax, %edx 
    movl %edx,-80(%ebp) 

    movl $7, %eax 
    movl -80(%ebp) , %edx 
    subl %eax, %edx 
    movl %eax,-84(%ebp) 

    movl	-64(%ebp), %eax
    cmpl	-88(%ebp), %eax
    setge %al
    movlzbl %al, %eax
    movl	%eax, -92(%ebp)

    cmpl	$0, -92(%ebp)
    jne .L0
    cmpl	$0, -96(%ebp)
    je .L0
    movl	$1, %eax
    jmp .L1
.L0:
    movl	$0, %eax
    jmp .L2
.L1:
    movl	%eax, -100(%ebp)
.L2:

    movl -100(%ebp),%eax
    movl %eax, -336(%ebp)

    movl $1, %eax

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_arreglos.ctds ... -------------------
Error: Method pruArreglos must return int

    .comm A,2356

    .comm B,224

    .comm C,20


    .text
    .globl	pruArreglos
    .type	pruArreglos, @function 
pruArreglos: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl	8(%ebp), %eax
    cmpl	12(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -44(%ebp)

    movl $ 1, %eax
    cmpl -44(%ebp), %eax

    jne elseCondLabel2

    movl $1, %eax 
    movl 12(%ebp) , %edx 
    subl %eax, %edx 
    movl %eax,-56(%ebp) 

    movl -56(%ebp),%eax
    movl %eax, -68(%ebp)

    jmp endIfLabel3

.elseCondLabel2:

.endIfLabel3:

    movl	8(%ebp), %eax
    cmpl	12(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -60(%ebp)

    movl $ 1, %eax
    cmpl -60(%ebp), %eax

    jne elseCondLabel8

    movl $1, %eax 
    movl $1 , %edx 
    subl %eax, %edx 
    movl %eax,-72(%ebp) 

    movl 8(%ebp) , %eax 
    movl $5, %edx 
    imull %edx, %eax 
    movl %eax,-80(%ebp) 

    movl -80(%ebp),%eax
    movl %eax, -68(%ebp)

    jmp endIfLabel9

.elseCondLabel8:

    movl 8(%ebp) , %eax 
    movl 8(%ebp) , %edx 
    subl %eax, %edx 
    movl %eax,-84(%ebp) 

    movl 12(%ebp),%eax
    movl %eax, -68(%ebp)

.endIfLabel9:

    movl $0,-40(%ebp)

    movl	-40(%ebp), %eax
    cmpl	-92(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -96(%ebp)

.BeginWhileLabel19:

    movl $ 1, %eax
    cmpl -96(%ebp), %eax

    jne EndWhileLabel20

    movl -40(%ebp) , %eax 
    movl $2, %edx 
    imull %edx, %eax 
    movl %eax,-104(%ebp) 

    movl -104(%ebp),%eax
    movl %eax, -4716(%ebp)

    movl -108(%ebp), %eax
    addl %eax, -40(%ebp)

    jmp BeginWhileLabel19

.EndWhileLabel20:

    movl $8,-40(%ebp)

    movl	-40(%ebp), %eax
    cmpl	-116(%ebp), %eax
    setge %al
    movlzbl %al, %eax
    movl	%eax, -120(%ebp)

.BeginWhileLabel27:

    movl $ 1, %eax
    cmpl -120(%ebp), %eax

    jne EndWhileLabel28

    movl -40(%ebp) , %eax 
    movl $2, %edx 
    imull %edx, %eax 
    movl %eax,-128(%ebp) 

    movl -128(%ebp) , %eax 
    movl $8, %edx 
    addl %eax, %edx 
    movl %edx,-136(%ebp) 

    movl $ArrayLiteral{id=A, index=VarLocation{name=PLUSLabel32, type=int, expr=VarLocation{name=MULTIPLYLabel30, type=int, expr=VarLocation{name=i, type=int, expr=0, size=0}*VarLocation{name=factorLabel29, type=int, expr=2, size=0}, size=0}+VarLocation{name=factorLabel31, type=int, expr=8, size=0}, size=0}}, %eax 
    movl $3, %edx 
    addl %eax, %edx 
    movl %edx,-148(%ebp) 

    movl -148(%ebp),%eax
    movl %eax, -2812(%ebp)

    movl -152(%ebp), %eax
    subl %eax, -40(%ebp)

    jmp BeginWhileLabel27

.EndWhileLabel28:

    movl $0,-40(%ebp)

    movl $5 , %eax 
    movl $9, %edx 
    imull %edx, %eax 
    movl %eax,-168(%ebp) 

    movl -168(%ebp) , %eax 
    movl $40 , %edx 
    subl %eax, %edx 
    movl %eax,-176(%ebp) 

    movl	-40(%ebp), %eax
    cmpl	-176(%ebp), %eax
    setle %al
    movlzbl %al, %eax
    movl	%eax, -180(%ebp)

.BeginWhileLabel44:

    movl $ 1, %eax
    cmpl -180(%ebp), %eax

    jne EndWhileLabel45

    movl -40(%ebp) , %eax 
    movl $2, %edx 
    imull %edx, %eax 
    movl %eax,-188(%ebp) 

    movl -188(%ebp) , %eax 
    movl $8, %edx 
    addl %eax, %edx 
    movl %edx,-196(%ebp) 

    movl	-200(%ebp), %eax
    cmpl	-204(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -208(%ebp)

    movl -208(%ebp),%eax
    movl %eax, -2632(%ebp)

    movl -40(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-216(%ebp) 

    movl -216(%ebp),%eax
    movl %eax, -40(%ebp)

    jmp BeginWhileLabel44

.EndWhileLabel45:

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $8 , 12(%esp)
    movl $4 , 8(%esp)

    call pruArreglos


    call imprimir


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_Asignaciones.ctds ... -------------------


    .text
    .globl	pruAritmetica
    .type	pruAritmetica, @function 
pruAritmetica: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $3 , 8(%esp)

    call pruAritmetica


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/testAssing.ctds ... -------------------


    .text
    .globl	aritmTest
    .type	aritmTest, @function 
aritmTest: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $1,-4(%ebp)

    movl $2,-8(%ebp)

    movl $1, %eax 
    movl -4(%ebp), %edx 
    addl %eax, %edx 
    movl %edx,-24(%ebp) 

    movl -24(%ebp),%eax
    movl %eax, -4(%ebp)

    movl -4(%ebp) , %eax 
    movl $2, %edx 
    addl %eax, %edx 
    movl %edx,-32(%ebp) 

    movl -32(%ebp),%eax
    movl %eax, -8(%ebp)

    movl -4(%ebp) , %eax 
    movl 8(%ebp) , %ecx
	 cltd
    idiv %ecx
    movl %ecx,-36(%ebp) 

    movl -36(%ebp),%eax
    movl %eax, -4(%ebp)

    movl	-40(%ebp), %eax 
    cltd
    idivl -4(%ebp)
    movl	%edx, -44(%ebp)

    movl -44(%ebp),%eax
    movl %eax, 0(%ebp)

    movl -48(%ebp), %eax
    addl %eax, -4(%ebp)

    movl -52(%ebp), %eax
    subl %eax, -4(%ebp)

    movl 8(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $5 , 8(%esp)

    call aritmTest


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_bloques02.ctds ... -------------------


    .text
    .globl	breaks
    .type	breaks, @function 
breaks: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $0,-4(%ebp)

    movl	-4(%ebp), %eax
    cmpl	-12(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -16(%ebp)

.BeginWhileLabel4:

    movl $ 1, %eax
    cmpl -16(%ebp), %eax

    jne EndWhileLabel5

    movl -4(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-28(%ebp) 

    movl -28(%ebp),%eax
    movl %eax, -4(%ebp)

    movl $2.3,-20(%ebp)

    movl	8(%ebp), %eax
    cmpl	-36(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -40(%ebp)

    movl $ 1, %eax
    cmpl -40(%ebp), %eax

    jne elseCondLabel11

    jmp EndWhileLabel5

    jmp endIfLabel12

.elseCondLabel11:

    jmp BeginWhileLabel4

.endIfLabel12:

    jmp BeginWhileLabel4

.EndWhileLabel5:

    movl -4(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $1 , 8(%esp)

    call breaks


    call imprimir

    movl $1, %eax

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_bloques.ctds ... -------------------


    .text
    .globl	breaks
    .type	breaks, @function 
breaks: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $0,-4(%ebp)

    movl	-4(%ebp), %eax
    cmpl	-12(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -16(%ebp)

.BeginWhileLabel4:

    movl $ 1, %eax
    cmpl -16(%ebp), %eax

    jne EndWhileLabel5

    movl -4(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-24(%ebp) 

    movl -24(%ebp),%eax
    movl %eax, -4(%ebp)

    movl	8(%ebp), %eax
    cmpl	-28(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -32(%ebp)

    movl $ 1, %eax
    cmpl -32(%ebp), %eax

    jne elseCondLabel10

    jmp EndWhileLabel5

    jmp endIfLabel11

.elseCondLabel10:

    jmp BeginWhileLabel4

.endIfLabel11:

    jmp BeginWhileLabel4

.EndWhileLabel5:

    movl -4(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $1 , 8(%esp)

    call breaks


    call imprimir

    movl $1, %eax

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_booleanos.ctds ... -------------------


    .text
    .globl	neg
    .type	neg, @function 
neg: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    cmpl $0, 8(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -4(%ebp) 

    movl -4(%ebp), %eax

    leave
    ret



    .text
    .globl	and
    .type	and, @function 
and: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    cmpl	$0, 8(%ebp)
    je .L0
    cmpl	$0, 12(%ebp)
    je .L0
    movl	$1, %eax
    jmp .L1
.L0:
    movl	$0, %eax
    jmp .L2
.L1:
    movl	%eax, -4(%ebp)
.L2:

    movl -4(%ebp), %eax

    leave
    ret



    .text
    .globl	or
    .type	or, @function 
or: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    cmpl	$0, 8(%ebp)
    jne .L3
    cmpl	$0, 12(%ebp)
    je .L3
    movl	$1, %eax
    jmp .L4
.L3:
    movl	$0, %eax
    jmp .L5
.L4:
    movl	%eax, -4(%ebp)
.L5:

    movl -4(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $1,-4(%ebp)

    movl $0,-8(%ebp)

    movl $0 , (%esp)
    call neg

    movl %eax,-8(%ebp)

    movl $0 , 0(%esp)    movl $0 , (%esp)
    call and

    movl %eax,-12(%ebp)

    movl $0 , (%esp)
    call neg

    movl %eax,-16(%ebp)

    movl $0 , 0(%esp)    movl $0 , (%esp)
    call or

    movl %eax,-20(%ebp)

    movl $0 , (%esp)
    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_break.ctds ... -------------------


    .text
    .globl	breaks
    .type	breaks, @function 
breaks: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $0,-4(%ebp)

    movl	-4(%ebp), %eax
    cmpl	-12(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -16(%ebp)

.BeginWhileLabel4:

    movl $ 1, %eax
    cmpl -16(%ebp), %eax

    jne EndWhileLabel5

    movl -4(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-24(%ebp) 

    movl -24(%ebp),%eax
    movl %eax, -4(%ebp)

    movl	8(%ebp), %eax
    cmpl	-28(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -32(%ebp)

    movl $ 1, %eax
    cmpl -32(%ebp), %eax

    jne elseCondLabel10

    jmp EndWhileLabel5

    jmp endIfLabel11

.elseCondLabel10:

    jmp BeginWhileLabel4

.endIfLabel11:

    jmp BeginWhileLabel4

.EndWhileLabel5:

    movl -4(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $1 , 8(%esp)

    call breaks


    call imprimir

    movl $1, %eax

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_comentarios2.ctds ... -------------------
Error: Method pruAritmetica must return int


    .text
    .globl	pruAritmetica
    .type	pruAritmetica, @function 
pruAritmetica: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl	8(%ebp), %eax
    cmpl	12(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -8(%ebp)

    movl $ 1, %eax
    cmpl -8(%ebp), %eax

    jne elseCondLabel2

    movl 8(%ebp),%eax
    movl %eax, -4(%ebp)

    jmp endIfLabel3

.elseCondLabel2:

    movl 12(%ebp),%eax
    movl %eax, -4(%ebp)

.endIfLabel3:

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $8 , 12(%esp)
    movl $4 , 8(%esp)

    call pruAritmetica


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_comentarios.ctds ... -------------------
Error: Method pruAritmetica must return int


    .text
    .globl	pruAritmetica
    .type	pruAritmetica, @function 
pruAritmetica: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl	8(%ebp), %eax
    cmpl	12(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -8(%ebp)

    movl $ 1, %eax
    cmpl -8(%ebp), %eax

    jne elseCondLabel2

    movl 8(%ebp) , %eax 
    movl $5, %edx 
    addl %eax, %edx 
    movl %edx,-16(%ebp) 

    movl -16(%ebp),%eax
    movl %eax, -4(%ebp)

    jmp endIfLabel3

.elseCondLabel2:

    movl 12(%ebp),%eax
    movl %eax, -4(%ebp)

.endIfLabel3:

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $8 , 12(%esp)
    movl $4 , 8(%esp)

    call pruAritmetica


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_condiciones.ctds ... -------------------


    .text
    .globl	dados
    .type	dados, @function 
dados: 
    enter   $(12), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl	8(%ebp), %eax
    cmpl	-4(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -8(%ebp)

    cmpl $0, -8(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -12(%ebp) 

    movl	16(%ebp), %eax
    cmpl	-16(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -20(%ebp)

    cmpl $0, -20(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -24(%ebp) 

    cmpl	$0, -12(%ebp)
    je .L0
    cmpl	$0, -24(%ebp)
    je .L0
    movl	$1, %eax
    jmp .L1
.L0:
    movl	$0, %eax
    jmp .L2
.L1:
    movl	%eax, -28(%ebp)
.L2:

    movl	12(%ebp), %eax
    cmpl	-32(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -36(%ebp)

    cmpl $0, -36(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -40(%ebp) 

    cmpl	$0, -28(%ebp)
    je .L3
    cmpl	$0, -40(%ebp)
    je .L3
    movl	$1, %eax
    jmp .L4
.L3:
    movl	$0, %eax
    jmp .L5
.L4:
    movl	%eax, -44(%ebp)
.L5:

    movl $ 1, %eax
    cmpl -44(%ebp), %eax

    jne elseCondLabel12

    movl $1.00, %eax

    jmp endIfLabel13

.elseCondLabel12:

.endIfLabel13:

    movl	8(%ebp), %eax
    cmpl	-52(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -56(%ebp)

    movl	16(%ebp), %eax
    cmpl	-60(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -64(%ebp)

    cmpl $0, -64(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -68(%ebp) 

    cmpl	$0, -56(%ebp)
    je .L6
    cmpl	$0, -68(%ebp)
    je .L6
    movl	$1, %eax
    jmp .L7
.L6:
    movl	$0, %eax
    jmp .L8
.L7:
    movl	%eax, -72(%ebp)
.L8:

    movl	12(%ebp), %eax
    cmpl	-76(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -80(%ebp)

    cmpl $0, -80(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -84(%ebp) 

    cmpl	$0, -72(%ebp)
    je .L9
    cmpl	$0, -84(%ebp)
    je .L9
    movl	$1, %eax
    jmp .L10
.L9:
    movl	$0, %eax
    jmp .L11
.L10:
    movl	%eax, -88(%ebp)
.L11:

    movl	8(%ebp), %eax
    cmpl	-92(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -96(%ebp)

    cmpl $0, -96(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -100(%ebp) 

    movl	16(%ebp), %eax
    cmpl	-104(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -108(%ebp)

    cmpl	$0, -100(%ebp)
    je .L12
    cmpl	$0, -108(%ebp)
    je .L12
    movl	$1, %eax
    jmp .L13
.L12:
    movl	$0, %eax
    jmp .L14
.L13:
    movl	%eax, -112(%ebp)
.L14:

    movl	12(%ebp), %eax
    cmpl	-116(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -120(%ebp)

    cmpl $0, -120(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -124(%ebp) 

    cmpl	$0, -112(%ebp)
    je .L15
    cmpl	$0, -124(%ebp)
    je .L15
    movl	$1, %eax
    jmp .L16
.L15:
    movl	$0, %eax
    jmp .L17
.L16:
    movl	%eax, -128(%ebp)
.L17:

    cmpl	$0, -88(%ebp)
    jne .L18
    cmpl	$0, -128(%ebp)
    je .L18
    movl	$1, %eax
    jmp .L19
.L18:
    movl	$0, %eax
    jmp .L20
.L19:
    movl	%eax, -132(%ebp)
.L20:

    movl	8(%ebp), %eax
    cmpl	-136(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -140(%ebp)

    cmpl $0, -140(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -144(%ebp) 

    movl	16(%ebp), %eax
    cmpl	-148(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -152(%ebp)

    cmpl $0, -152(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -156(%ebp) 

    cmpl	$0, -144(%ebp)
    je .L21
    cmpl	$0, -156(%ebp)
    je .L21
    movl	$1, %eax
    jmp .L22
.L21:
    movl	$0, %eax
    jmp .L23
.L22:
    movl	%eax, -160(%ebp)
.L23:

    movl	12(%ebp), %eax
    cmpl	-164(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -168(%ebp)

    cmpl	$0, -160(%ebp)
    je .L24
    cmpl	$0, -168(%ebp)
    je .L24
    movl	$1, %eax
    jmp .L25
.L24:
    movl	$0, %eax
    jmp .L26
.L25:
    movl	%eax, -172(%ebp)
.L26:

    cmpl	$0, -132(%ebp)
    jne .L27
    cmpl	$0, -172(%ebp)
    je .L27
    movl	$1, %eax
    jmp .L28
.L27:
    movl	$0, %eax
    jmp .L29
.L28:
    movl	%eax, -176(%ebp)
.L29:

    movl $ 1, %eax
    cmpl -176(%ebp), %eax

    jne elseCondLabel47

    movl $4.00, %eax

    jmp endIfLabel48

.elseCondLabel47:

.endIfLabel48:

    movl	8(%ebp), %eax
    cmpl	-184(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -188(%ebp)

    movl	16(%ebp), %eax
    cmpl	-192(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -196(%ebp)

    cmpl	$0, -188(%ebp)
    je .L30
    cmpl	$0, -196(%ebp)
    je .L30
    movl	$1, %eax
    jmp .L31
.L30:
    movl	$0, %eax
    jmp .L32
.L31:
    movl	%eax, -200(%ebp)
.L32:

    movl	12(%ebp), %eax
    cmpl	-204(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -208(%ebp)

    cmpl $0, -208(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -212(%ebp) 

    cmpl	$0, -200(%ebp)
    je .L33
    cmpl	$0, -212(%ebp)
    je .L33
    movl	$1, %eax
    jmp .L34
.L33:
    movl	$0, %eax
    jmp .L35
.L34:
    movl	%eax, -216(%ebp)
.L35:

    movl	8(%ebp), %eax
    cmpl	-220(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -224(%ebp)

    movl	16(%ebp), %eax
    cmpl	-228(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -232(%ebp)

    cmpl $0, -232(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -236(%ebp) 

    cmpl	$0, -224(%ebp)
    je .L36
    cmpl	$0, -236(%ebp)
    je .L36
    movl	$1, %eax
    jmp .L37
.L36:
    movl	$0, %eax
    jmp .L38
.L37:
    movl	%eax, -240(%ebp)
.L38:

    movl	12(%ebp), %eax
    cmpl	-244(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -248(%ebp)

    cmpl	$0, -240(%ebp)
    je .L39
    cmpl	$0, -248(%ebp)
    je .L39
    movl	$1, %eax
    jmp .L40
.L39:
    movl	$0, %eax
    jmp .L41
.L40:
    movl	%eax, -252(%ebp)
.L41:

    cmpl	$0, -216(%ebp)
    jne .L42
    cmpl	$0, -252(%ebp)
    je .L42
    movl	$1, %eax
    jmp .L43
.L42:
    movl	$0, %eax
    jmp .L44
.L43:
    movl	%eax, -256(%ebp)
.L44:

    movl	8(%ebp), %eax
    cmpl	-260(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -264(%ebp)

    cmpl $0, -264(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -268(%ebp) 

    movl	16(%ebp), %eax
    cmpl	-272(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -276(%ebp)

    cmpl	$0, -268(%ebp)
    je .L45
    cmpl	$0, -276(%ebp)
    je .L45
    movl	$1, %eax
    jmp .L46
.L45:
    movl	$0, %eax
    jmp .L47
.L46:
    movl	%eax, -280(%ebp)
.L47:

    movl	12(%ebp), %eax
    cmpl	-284(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -288(%ebp)

    cmpl	$0, -280(%ebp)
    je .L48
    cmpl	$0, -288(%ebp)
    je .L48
    movl	$1, %eax
    jmp .L49
.L48:
    movl	$0, %eax
    jmp .L50
.L49:
    movl	%eax, -292(%ebp)
.L50:

    cmpl	$0, -256(%ebp)
    jne .L51
    cmpl	$0, -292(%ebp)
    je .L51
    movl	$1, %eax
    jmp .L52
.L51:
    movl	$0, %eax
    jmp .L53
.L52:
    movl	%eax, -296(%ebp)
.L53:

    movl $ 1, %eax
    cmpl -296(%ebp), %eax

    jne elseCondLabel79

    movl $8.50, %eax

    jmp endIfLabel80

.elseCondLabel79:

.endIfLabel80:

    movl	8(%ebp), %eax
    cmpl	-304(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -308(%ebp)

    movl	16(%ebp), %eax
    cmpl	-312(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -316(%ebp)

    cmpl	$0, -308(%ebp)
    je .L54
    cmpl	$0, -316(%ebp)
    je .L54
    movl	$1, %eax
    jmp .L55
.L54:
    movl	$0, %eax
    jmp .L56
.L55:
    movl	%eax, -320(%ebp)
.L56:

    movl	12(%ebp), %eax
    cmpl	-324(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -328(%ebp)

    cmpl	$0, -320(%ebp)
    je .L57
    cmpl	$0, -328(%ebp)
    je .L57
    movl	$1, %eax
    jmp .L58
.L57:
    movl	$0, %eax
    jmp .L59
.L58:
    movl	%eax, -332(%ebp)
.L59:

    movl $ 1, %eax
    cmpl -332(%ebp), %eax

    jne elseCondLabel90

    movl $10.00, %eax

    jmp endIfLabel91

.elseCondLabel90:

.endIfLabel91:

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $9 , 16(%esp)
    movl $6 , 12(%esp)
    movl $1 , 8(%esp)

    call dados


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_continuebreak.ctds ... -------------------


    .text
    .globl	pruContinue
    .type	pruContinue, @function 
pruContinue: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl	-16(%ebp), %eax 
    negl	%eax 
    movl	%eax, -20(%ebp) 

    movl -20(%ebp),%eax
    movl %eax, -12(%ebp)

    movl $23,-8(%ebp)

    movl $23,-4(%ebp)

    movl	-4(%ebp), %eax
    cmpl	-32(%ebp), %eax
    setge %al
    movlzbl %al, %eax
    movl	%eax, -36(%ebp)

.BeginWhileLabel7:

    movl $ 1, %eax
    cmpl -36(%ebp), %eax

    jne EndWhileLabel8

    movl -4(%ebp) , %eax 
    movl $1 , %edx 
    subl %eax, %edx 
    movl %eax,-44(%ebp) 

    movl -44(%ebp),%eax
    movl %eax, -4(%ebp)

    movl	8(%ebp), %eax
    cmpl	12(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -48(%ebp)

    movl $ 1, %eax
    cmpl -48(%ebp), %eax

    jne elseCondLabel12

    movl	-4(%ebp), %eax
    cmpl	-52(%ebp), %eax
    setgne %al
    movlzbl %al, %eax
    movl	%eax, -56(%ebp)

    movl $ 1, %eax
    cmpl -56(%ebp), %eax

    jne elseCondLabel16

    movl -12(%ebp) , %eax 
    movl 8(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-60(%ebp) 

    movl -60(%ebp) , %eax 
    movl 12(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-64(%ebp) 

    movl -64(%ebp),%eax
    movl %eax, -12(%ebp)

    jmp endIfLabel17

.elseCondLabel16:

.endIfLabel17:

    jmp BeginWhileLabel7

    jmp endIfLabel13

.elseCondLabel12:

    movl	-68(%ebp), %eax 
    negl	%eax 
    movl	%eax, -72(%ebp) 

    movl -72(%ebp) , %eax 
    movl $6752, %edx 
    addl %eax, %edx 
    movl %edx,-80(%ebp) 

    movl -80(%ebp),%eax
    movl %eax, -12(%ebp)

    jmp EndWhileLabel8

.endIfLabel13:

    jmp BeginWhileLabel7

.EndWhileLabel8:

    movl	-84(%ebp), %eax 
    negl	%eax 
    movl	%eax, -88(%ebp) 

    movl -88(%ebp) , %eax 
    movl -12(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-92(%ebp) 

    movl -92(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $2 , 12(%esp)

    call pruContinue


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_expresiones01.ctds ... -------------------


    .text
    .globl	prueba
    .type	prueba, @function 
prueba: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $50,-12(%ebp)

    movl	-12(%ebp), %eax
    cmpl	-20(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -24(%ebp)

    movl $ 1, %eax
    cmpl -24(%ebp), %eax

    jne elseCondLabel4

    movl $4,-4(%ebp)

    movl	-4(%ebp), %eax
    cmpl	-32(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -36(%ebp)

    movl $ 1, %eax
    cmpl -36(%ebp), %eax

    jne elseCondLabel9

    movl	-4(%ebp), %eax
    cmpl	-40(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -44(%ebp)

.BeginWhileLabel13:

    movl $ 1, %eax
    cmpl -44(%ebp), %eax

    jne EndWhileLabel14

    movl	-12(%ebp), %eax
    cmpl	-48(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -52(%ebp)

.BeginWhileLabel17:

    movl $ 1, %eax
    cmpl -52(%ebp), %eax

    jne EndWhileLabel18

    movl -12(%ebp) , %eax 
    movl $1 , %edx 
    subl %eax, %edx 
    movl %eax,-60(%ebp) 

    movl -60(%ebp),%eax
    movl %eax, -12(%ebp)

    movl -4(%ebp) , %eax 
    movl $2, %edx 
    imull %edx, %eax 
    movl %eax,-68(%ebp) 

    movl -68(%ebp),%eax
    movl %eax, -8(%ebp)

    jmp BeginWhileLabel17

.EndWhileLabel18:

    movl -4(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-76(%ebp) 

    movl -76(%ebp),%eax
    movl %eax, -4(%ebp)

    movl -8(%ebp) , %eax 
    movl $2 , %ecx
	 cltd
    idiv %ecx
    movl %ecx,-84(%ebp) 

    movl -84(%ebp),%eax
    movl %eax, -8(%ebp)

    jmp BeginWhileLabel13

.EndWhileLabel14:

    jmp endIfLabel10

.elseCondLabel9:

.endIfLabel10:

    jmp endIfLabel5

.elseCondLabel4:

.endIfLabel5:

    movl -8(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $6 , 8(%esp)

    call prueba


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_expresiones02.ctds ... -------------------


    .text
    .globl	prueba
    .type	prueba, @function 
prueba: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $4,-12(%ebp)

    movl $5,-16(%ebp)

    movl -12(%ebp) , %eax 
    movl -16(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-28(%ebp) 

    movl -28(%ebp),%eax
    movl %eax, -4(%ebp)

    movl -4(%ebp) , %eax 
    movl 8(%ebp), %edx 
    addl %eax, %edx 
    movl %edx,-32(%ebp) 

    movl -32(%ebp),%eax
    movl %eax, 0(%ebp)

    movl $3.14,-36(%ebp)

    movl $2 , %eax 
    movl -36(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-48(%ebp) 

    movl -48(%ebp),%eax
    movl %eax, -8(%ebp)

    movl -4(%ebp) , %eax 
    movl -8(%ebp) , %ecx
	 cltd
    idiv %ecx
    movl %ecx,-52(%ebp) 

    movl	-52(%ebp), %eax
    cmpl	-56(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -60(%ebp)

    movl $ 1, %eax
    cmpl -60(%ebp), %eax

    jne elseCondLabel11

    movl $1, %eax

    jmp endIfLabel12

.elseCondLabel11:

    movl $0, %eax

.endIfLabel12:

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $6 , 8(%esp)

    call prueba


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_float01.ctds ... -------------------


    .text
    .globl	potencia
    .type	potencia, @function 
potencia: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $0,-8(%ebp)

    movl $1,-4(%ebp)

    movl $1.0,-12(%ebp)

    movl	12(%ebp), %eax
    cmpl	-28(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -32(%ebp)

    movl $ 1, %eax
    cmpl -32(%ebp), %eax

    jne elseCondLabel6

    movl	12(%ebp), %eax 
    negl	%eax 
    movl	%eax, -36(%ebp) 

    movl -36(%ebp),%eax
    movl %eax, 1(%ebp)

    cmpl $0, -8(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -40(%ebp) 

    movl -40(%ebp),%eax
    movl %eax, -8(%ebp)

    jmp endIfLabel7

.elseCondLabel6:

.endIfLabel7:

    movl	-4(%ebp), %eax
    cmpl	12(%ebp), %eax
    setle %al
    movlzbl %al, %eax
    movl	%eax, -44(%ebp)

.BeginWhileLabel11:

    movl $ 1, %eax
    cmpl -44(%ebp), %eax

    jne EndWhileLabel12

    movl -12(%ebp) , %eax 
    movl 8(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-48(%ebp) 

    movl -48(%ebp),%eax
    movl %eax, -12(%ebp)

    movl -4(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-56(%ebp) 

    movl -56(%ebp),%eax
    movl %eax, -4(%ebp)

    jmp BeginWhileLabel11

.EndWhileLabel12:

    cmpl $0, -8(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -60(%ebp) 

    cmpl $0, -60(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -64(%ebp) 

    movl $ 1, %eax
    cmpl -64(%ebp), %eax

    jne elseCondLabel18

    movl $1.0 , %eax 
    movl -12(%ebp) , %ecx
	 cltd
    idiv %ecx
    movl %ecx,-72(%ebp) 

    movl -72(%ebp), %eax

    jmp endIfLabel19

.elseCondLabel18:

    movl -12(%ebp), %eax

.endIfLabel19:

    movl	-76(%ebp), %eax 
    negl	%eax 
    movl	%eax, -80(%ebp) 

    movl -80(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $8.0,-8(%ebp)

    movl $2 , 12(%esp)

    call potencia

    movl %eax,-4(%ebp)


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_float02.ctds ... -------------------


    .text
    .globl	sumatoria
    .type	sumatoria, @function 
sumatoria: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $0.0,-4(%ebp)

    movl 8(%ebp),%eax
    movl %eax, -8(%ebp)

    movl	-8(%ebp), %eax
    cmpl	-20(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -24(%ebp)

    movl	-8(%ebp), %eax
    cmpl	-28(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -32(%ebp)

    cmpl	$0, -24(%ebp)
    jne .L0
    cmpl	$0, -32(%ebp)
    je .L0
    movl	$1, %eax
    jmp .L1
.L0:
    movl	$0, %eax
    jmp .L2
.L1:
    movl	%eax, -36(%ebp)
.L2:

.BeginWhileLabel7:

    movl $ 1, %eax
    cmpl -36(%ebp), %eax

    jne EndWhileLabel8

    movl	-8(%ebp), %eax
    cmpl	-40(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -44(%ebp)

    movl $ 1, %eax
    cmpl -44(%ebp), %eax

    jne elseCondLabel11

    movl -4(%ebp) , %eax 
    movl -8(%ebp), %edx 
    addl %eax, %edx 
    movl %edx,-48(%ebp) 

    movl -48(%ebp),%eax
    movl %eax, -4(%ebp)

    jmp endIfLabel12

.elseCondLabel11:

.endIfLabel12:

    movl -52(%ebp), %eax
    subl %eax, -8(%ebp)

    jmp BeginWhileLabel7

.EndWhileLabel8:

    movl -4(%ebp),%eax
    movl %eax, -12(%ebp)

    movl -12(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $8.0,-8(%ebp)


    call sumatoria

    movl %eax,-4(%ebp)


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_float03.ctds ... -------------------

    .comm w,4

    .comm m,4

    .comm res,4


    .text
    .globl	potencia
    .type	potencia, @function 
potencia: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $0,-8(%ebp)

    movl $1,-4(%ebp)

    movl $1.0,-12(%ebp)

    movl	12(%ebp), %eax
    cmpl	-28(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -32(%ebp)

    movl $ 1, %eax
    cmpl -32(%ebp), %eax

    jne elseCondLabel6

    movl	12(%ebp), %eax 
    negl	%eax 
    movl	%eax, -36(%ebp) 

    movl -36(%ebp),%eax
    movl %eax, 1(%ebp)

    movl $1,-8(%ebp)

    jmp endIfLabel7

.elseCondLabel6:

.endIfLabel7:

    movl	-4(%ebp), %eax
    cmpl	12(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -44(%ebp)

    movl	-4(%ebp), %eax
    cmpl	12(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -48(%ebp)

    cmpl	$0, -44(%ebp)
    jne .L0
    cmpl	$0, -48(%ebp)
    je .L0
    movl	$1, %eax
    jmp .L1
.L0:
    movl	$0, %eax
    jmp .L2
.L1:
    movl	%eax, -52(%ebp)
.L2:

.BeginWhileLabel13:

    movl $ 1, %eax
    cmpl -52(%ebp), %eax

    jne EndWhileLabel14

    movl -12(%ebp) , %eax 
    movl 8(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-56(%ebp) 

    movl -56(%ebp) , %eax 
    movl $2, %edx 
    imull %edx, %eax 
    movl %eax,-64(%ebp) 

    movl -64(%ebp),%eax
    movl %eax, -12(%ebp)

    movl -4(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-72(%ebp) 

    movl -72(%ebp),%eax
    movl %eax, -4(%ebp)

    jmp BeginWhileLabel13

.EndWhileLabel14:

    cmpl $0, -8(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -76(%ebp) 

    cmpl $0, -76(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -80(%ebp) 

    movl $ 1, %eax
    cmpl -80(%ebp), %eax

    jne elseCondLabel22

    movl $1.0 , %eax 
    movl -12(%ebp) , %ecx
	 cltd
    idiv %ecx
    movl %ecx,-88(%ebp) 

    movl -88(%ebp), %eax

    jmp endIfLabel23

.elseCondLabel22:

    movl -12(%ebp), %eax

.endIfLabel23:

    movl	-92(%ebp), %eax 
    negl	%eax 
    movl	%eax, -96(%ebp) 

    movl -96(%ebp), %eax

    leave
    ret



    .text
    .globl	multiples
    .type	multiples, @function 
multiples: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl	-44(%ebp), %eax 
    negl	%eax 
    movl	%eax, -48(%ebp) 

    movl -48(%ebp),%eax
    movl %eax, -4(%ebp)

    movl	-52(%ebp), %eax 
    negl	%eax 
    movl	%eax, -56(%ebp) 

    movl -56(%ebp),%eax
    movl %eax, -12(%ebp)

    movl	-60(%ebp), %eax 
    negl	%eax 
    movl	%eax, -64(%ebp) 

    movl -64(%ebp),%eax
    movl %eax, -16(%ebp)

    movl	-68(%ebp), %eax 
    negl	%eax 
    movl	%eax, -72(%ebp) 

    movl -72(%ebp),%eax
    movl %eax, -8(%ebp)

    movl -4(%ebp) , %eax 
    movl -8(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-76(%ebp) 

    movl -76(%ebp) , %eax 
    movl -16(%ebp) , %edx 
    subl %eax, %edx 
    movl %eax,-80(%ebp) 

    movl -80(%ebp),%eax
    movl %eax, -20(%ebp)

    movl $0,-28(%ebp)

    movl $0,-32(%ebp)

    movl $0,-36(%ebp)

    movl $5,-40(%ebp)

    movl	8(%ebp), %eax
    cmpl	12(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -100(%ebp)

    movl $ 1, %eax
    cmpl -100(%ebp), %eax

    jne elseCondLabel43

    movl	-20(%ebp), %eax
    cmpl	-4(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -104(%ebp)

    movl $ 1, %eax
    cmpl -104(%ebp), %eax

    jne elseCondLabel46

    movl 8(%ebp),%eax
    movl %eax, -24(%ebp)

    jmp endIfLabel47

.elseCondLabel46:

    movl 12(%ebp),%eax
    movl %eax, -24(%ebp)

.endIfLabel47:

    jmp endIfLabel44

.elseCondLabel43:

    movl	-28(%ebp), %eax
    cmpl	-40(%ebp), %eax
    setle %al
    movlzbl %al, %eax
    movl	%eax, -108(%ebp)

.BeginWhileLabel49:

    movl $ 1, %eax
    cmpl -108(%ebp), %eax

    jne EndWhileLabel50

    movl	-32(%ebp), %eax
    cmpl	-40(%ebp), %eax
    setle %al
    movlzbl %al, %eax
    movl	%eax, -112(%ebp)

.BeginWhileLabel52:

    movl $ 1, %eax
    cmpl -112(%ebp), %eax

    jne EndWhileLabel53

    movl	-36(%ebp), %eax
    cmpl	-40(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -116(%ebp)

    movl	-36(%ebp), %eax
    cmpl	-40(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -120(%ebp)

    cmpl	$0, -116(%ebp)
    jne .L3
    cmpl	$0, -120(%ebp)
    je .L3
    movl	$1, %eax
    jmp .L4
.L3:
    movl	$0, %eax
    jmp .L5
.L4:
    movl	%eax, -124(%ebp)
.L5:

.BeginWhileLabel57:

    movl $ 1, %eax
    cmpl -124(%ebp), %eax

    jne EndWhileLabel58

    movl	-12(%ebp), %eax
    cmpl	-128(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -132(%ebp)

    movl $ 1, %eax
    cmpl -132(%ebp), %eax

    jne elseCondLabel61

    movl -24(%ebp) , %eax 
    movl $2.0, %edx 
    addl %eax, %edx 
    movl %edx,-140(%ebp) 

    movl -140(%ebp),%eax
    movl %eax, -24(%ebp)

    jmp endIfLabel62

.elseCondLabel61:

    movl $10.0 , %eax 
    movl $2.0 , %ecx
	 cltd
    idiv %ecx
    movl %ecx,-152(%ebp) 

    movl -24(%ebp) , %eax 
    movl -152(%ebp) , %edx 
    subl %eax, %edx 
    movl %eax,-156(%ebp) 

    movl -156(%ebp),%eax
    movl %eax, -24(%ebp)

.endIfLabel62:

    movl -160(%ebp), %eax
    addl %eax, -36(%ebp)

    jmp BeginWhileLabel57

.EndWhileLabel58:

    movl	-4(%ebp), %eax
    cmpl	8(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -164(%ebp)

    movl	-168(%ebp), %eax
    cmpl	8(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -172(%ebp)

    cmpl	$0, -164(%ebp)
    je .L6
    cmpl	$0, -172(%ebp)
    je .L6
    movl	$1, %eax
    jmp .L7
.L6:
    movl	$0, %eax
    jmp .L8
.L7:
    movl	%eax, -176(%ebp)
.L8:

    movl $ 1, %eax
    cmpl -176(%ebp), %eax

    jne elseCondLabel74

    movl $4.0 , %eax 
    movl -24(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-188(%ebp) 

    movl $35.0, %eax 
    movl -188(%ebp), %edx 
    addl %eax, %edx 
    movl %edx,-192(%ebp) 

    movl -192(%ebp) , %eax 
    movl $498.0 , %edx 
    subl %eax, %edx 
    movl %eax,-200(%ebp) 

    movl -200(%ebp),%eax
    movl %eax, -24(%ebp)

    jmp endIfLabel75

.elseCondLabel74:

    movl $3.2, %eax 
    movl -24(%ebp) , %edx 
    subl %eax, %edx 
    movl %eax,-208(%ebp) 

    movl -208(%ebp) , %eax 
    movl $12345.356 , %edx 
    subl %eax, %edx 
    movl %eax,-216(%ebp) 

    movl -216(%ebp),%eax
    movl %eax, -24(%ebp)

.endIfLabel75:

    movl -32(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-224(%ebp) 

    movl -224(%ebp),%eax
    movl %eax, -32(%ebp)

    jmp BeginWhileLabel52

.EndWhileLabel53:

    movl	8(%ebp), %eax 
    negl	%eax 
    movl	%eax, -228(%ebp) 

    movl -24(%ebp) , %eax 
    movl -228(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-232(%ebp) 

    movl $23.0 , %eax 
    movl 12(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-240(%ebp) 

    movl -232(%ebp) , %eax 
    movl -240(%ebp), %edx 
    addl %eax, %edx 
    movl %edx,-244(%ebp) 

    movl $2.0 , %eax 
    movl $4.0 , %ecx
	 cltd
    idiv %ecx
    movl %ecx,-256(%ebp) 

    movl -244(%ebp) , %eax 
    movl -256(%ebp), %edx 
    addl %eax, %edx 
    movl %edx,-260(%ebp) 

    movl -260(%ebp),%eax
    movl %eax, -24(%ebp)

    movl -28(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-268(%ebp) 

    movl -268(%ebp),%eax
    movl %eax, -28(%ebp)

    jmp BeginWhileLabel49

.EndWhileLabel50:

.endIfLabel44:

    movl	-24(%ebp), %eax 
    negl	%eax 
    movl	%eax, -272(%ebp) 

    movl -272(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $80.0,-8(%ebp)

    movl	-16(%ebp), %eax 
    negl	%eax 
    movl	%eax, -20(%ebp) 

    movl -20(%ebp),%eax
    movl %eax, -24(%ebp)

    movl $4.3,-16(%ebp)

    movl	-28(%ebp), %eax 
    negl	%eax 
    movl	%eax, -32(%ebp) 

    movl -32(%ebp),%eax
    movl %eax, -20(%ebp)

    movl $2 , 12(%esp)

    call potencia

    movl %eax,-4(%ebp)

    movl -4(%ebp) , %eax 
    movl $2.0, %edx 
    addl %eax, %edx 
    movl %edx,-48(%ebp) 


    call multiples


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_float04.ctds ... -------------------

    .comm w,4

    .comm m,4

    .comm res,4


    .text
    .globl	potencia
    .type	potencia, @function 
potencia: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $0,-8(%ebp)

    movl $1,-4(%ebp)

    movl $1.0,-12(%ebp)

    movl	12(%ebp), %eax
    cmpl	-28(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -32(%ebp)

    movl $ 1, %eax
    cmpl -32(%ebp), %eax

    jne elseCondLabel6

    movl	12(%ebp), %eax 
    negl	%eax 
    movl	%eax, -36(%ebp) 

    movl -36(%ebp),%eax
    movl %eax, 1(%ebp)

    movl $1,-8(%ebp)

    jmp endIfLabel7

.elseCondLabel6:

.endIfLabel7:

    movl	-4(%ebp), %eax
    cmpl	12(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -44(%ebp)

    movl	-4(%ebp), %eax
    cmpl	12(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -48(%ebp)

    cmpl	$0, -44(%ebp)
    jne .L0
    cmpl	$0, -48(%ebp)
    je .L0
    movl	$1, %eax
    jmp .L1
.L0:
    movl	$0, %eax
    jmp .L2
.L1:
    movl	%eax, -52(%ebp)
.L2:

.BeginWhileLabel13:

    movl $ 1, %eax
    cmpl -52(%ebp), %eax

    jne EndWhileLabel14

    movl -12(%ebp) , %eax 
    movl 8(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-56(%ebp) 

    movl -56(%ebp) , %eax 
    movl $2.0, %edx 
    imull %edx, %eax 
    movl %eax,-64(%ebp) 

    movl -64(%ebp),%eax
    movl %eax, -12(%ebp)

    movl -4(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-72(%ebp) 

    movl -72(%ebp),%eax
    movl %eax, -4(%ebp)

    jmp BeginWhileLabel13

.EndWhileLabel14:

    cmpl $0, -8(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -76(%ebp) 

    cmpl $0, -76(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -80(%ebp) 

    movl $ 1, %eax
    cmpl -80(%ebp), %eax

    jne elseCondLabel22

    movl $1.0 , %eax 
    movl -12(%ebp) , %ecx
	 cltd
    idiv %ecx
    movl %ecx,-88(%ebp) 

    movl -88(%ebp), %eax

    jmp endIfLabel23

.elseCondLabel22:

    movl -12(%ebp), %eax

.endIfLabel23:

    movl	-92(%ebp), %eax 
    negl	%eax 
    movl	%eax, -96(%ebp) 

    movl -96(%ebp), %eax

    leave
    ret



    .text
    .globl	multRepeat
    .type	multRepeat, @function 
multRepeat: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl 12(%ebp) , %eax 
    movl 12(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-8(%ebp) 

    movl -8(%ebp) , %eax 
    movl 8(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-12(%ebp) 

    movl -12(%ebp) , %eax 
    movl 8(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-16(%ebp) 

    movl -16(%ebp) , %eax 
    movl 8(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-20(%ebp) 

    movl -20(%ebp) , %eax 
    movl 12(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-24(%ebp) 

    movl -24(%ebp),%eax
    movl %eax, -4(%ebp)

    movl -4(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl	-12(%ebp), %eax 
    negl	%eax 
    movl	%eax, -16(%ebp) 

    movl -16(%ebp),%eax
    movl %eax, -12(%ebp)

    movl $4.3,-4(%ebp)

    movl	-24(%ebp), %eax 
    negl	%eax 
    movl	%eax, -28(%ebp) 

    movl -28(%ebp),%eax
    movl %eax, -8(%ebp)

    movl $80.0,-8(%ebp)

    movl $2 , 12(%esp)

    call potencia

    movl %eax,-4(%ebp)


    call multRepeat


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_floats05.ctds ... -------------------


    .text
    .globl	div
    .type	div, @function 
div: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl 8(%ebp) , %eax 
    movl 12(%ebp) , %ecx
	 cltd
    idiv %ecx
    movl %ecx,-4(%ebp) 

    movl -4(%ebp), %eax

    leave
    ret



    .text
    .globl	resta
    .type	resta, @function 
resta: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl 8(%ebp) , %eax 
    movl 12(%ebp) , %edx 
    subl %eax, %edx 
    movl %eax,-4(%ebp) 

    movl -4(%ebp), %eax

    leave
    ret



    .text
    .globl	sum
    .type	sum, @function 
sum: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl 8(%ebp) , %eax 
    movl 12(%ebp), %edx 
    addl %eax, %edx 
    movl %edx,-4(%ebp) 

    movl -4(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $6.982,-12(%ebp)

    movl	-28(%ebp), %eax 
    negl	%eax 
    movl	%eax, -32(%ebp) 

    movl -32(%ebp),%eax
    movl %eax, -16(%ebp)

    movl $3.5698,-20(%ebp)


    call resta

    movl %eax,-4(%ebp)


    call div

    movl %eax,-8(%ebp)


    call sum


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_for01.ctds ... -------------------
buscado: A
actual VarLocation{name=A, type=int[], expr=null, size=5}

    .comm A,20

    .comm B,224

    .comm C,40


    .text
    .globl	pruArreglos
    .type	pruArreglos, @function 
pruArreglos: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $2,-44(%ebp)

    movl -40(%ebp), %eax

    movl -4(%ebp) , %eax 
    movl $10, %edx 
    imull %edx, %eax 
    movl %eax,-32(%ebp) 

.BeginForLabel8:

    movl -32(%ebp), %eax
    cmpl -24(%ebp), %eax

    jnl EndForLabel9

    movl -4(%ebp) , %eax 
    movl $2, %edx 
    addl %eax, %edx 
    movl %edx,-40(%ebp) 

    movl -40(%ebp),%eax
    movl %eax, -44(%ebp)

    movl $5, %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-24(%ebp) 

    jmp BeginForLabel8

.EndForLabel9:

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $8 , 12(%esp)
    movl $4 , 8(%esp)

    call pruArreglos


    call imprimir

    movl $1, %eax

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_for02.ctds ... -------------------
buscado: A
actual VarLocation{name=A, type=int[], expr=null, size=5}

    .comm A,20

    .comm B,224

    .comm C,40


    .text
    .globl	pruArreglos
    .type	pruArreglos, @function 
pruArreglos: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $2,-44(%ebp)

    movl -40(%ebp), %eax

.BeginForLabel7:

    movl -28(%ebp), %eax
    cmpl -24(%ebp), %eax

    jnl EndForLabel8

    movl -4(%ebp) , %eax 
    movl $2, %edx 
    addl %eax, %edx 
    movl %edx,-36(%ebp) 

    movl -36(%ebp),%eax
    movl %eax, -44(%ebp)

    movl $5, %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-24(%ebp) 

    jmp BeginForLabel7

.EndForLabel8:

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $8 , 12(%esp)
    movl $4 , 8(%esp)

    call pruArreglos


    call imprimir

    movl $1, %eax

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_for03.ctds ... -------------------
buscado: A
actual VarLocation{name=A, type=int[], expr=null, size=5}

    .comm A,20

    .comm B,224

    .comm C,40


    .text
    .globl	pruArreglos
    .type	pruArreglos, @function 
pruArreglos: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $2,-44(%ebp)

    movl -40(%ebp), %eax

    movl	-28(%ebp), %eax 
    negl	%eax 
    movl	%eax, -32(%ebp) 

.BeginForLabel8:

    movl -32(%ebp), %eax
    cmpl -24(%ebp), %eax

    jnl EndForLabel9

    movl -4(%ebp) , %eax 
    movl $2, %edx 
    addl %eax, %edx 
    movl %edx,-40(%ebp) 

    movl -40(%ebp),%eax
    movl %eax, -44(%ebp)

    movl $5, %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-24(%ebp) 

    jmp BeginForLabel8

.EndForLabel9:

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $8 , 12(%esp)
    movl $4 , 8(%esp)

    call pruArreglos


    call imprimir

    movl $1, %eax

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_for04.ctds ... -------------------
buscado: A
actual VarLocation{name=A, type=int[], expr=null, size=5}

    .comm A,20

    .comm B,224

    .comm C,40


    .text
    .globl	pruArreglos
    .type	pruArreglos, @function 
pruArreglos: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $2,-44(%ebp)

    movl -40(%ebp), %eax

    movl	-28(%ebp), %eax 
    negl	%eax 
    movl	%eax, -32(%ebp) 

    movl $11 , %eax 
    movl $2, %edx 
    imull %edx, %eax 
    movl %eax,-44(%ebp) 

    movl -32(%ebp) , %eax 
    movl -44(%ebp), %edx 
    addl %eax, %edx 
    movl %edx,-48(%ebp) 

.BeginForLabel12:

    movl -48(%ebp), %eax
    cmpl -24(%ebp), %eax

    jnl EndForLabel13

    movl -4(%ebp) , %eax 
    movl $2, %edx 
    addl %eax, %edx 
    movl %edx,-56(%ebp) 

    movl -56(%ebp),%eax
    movl %eax, -44(%ebp)

    movl $0, %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-24(%ebp) 

    jmp BeginForLabel12

.EndForLabel13:

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $8 , 12(%esp)
    movl $4 , 8(%esp)

    call pruArreglos


    call imprimir

    movl $1, %eax

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_for05.ctds ... -------------------
buscado: A
actual VarLocation{name=A, type=int[], expr=null, size=5}

    .comm A,20

    .comm B,224

    .comm C,40


    .text
    .globl	par
    .type	par, @function 
par: 
    pushl	%ebp
    movl %esp, %ebp

    movl $15, %eax

    leave
    ret



    .text
    .globl	pruArreglos
    .type	pruArreglos, @function 
pruArreglos: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $2,-44(%ebp)

    movl -40(%ebp), %eax

    call par

    call par

    movl $MethodCallExpr{name=par, args=[]}, %eax 
    movl $5, %edx 
    addl %eax, %edx 
    movl %edx,-36(%ebp) 

.BeginForLabel12:

    movl -36(%ebp), %eax
    cmpl -24(%ebp), %eax

    jnl EndForLabel13

    movl -4(%ebp) , %eax 
    movl $2, %edx 
    addl %eax, %edx 
    movl %edx,-44(%ebp) 

    movl -44(%ebp),%eax
    movl %eax, -44(%ebp)

    movl $MethodCallExpr{name=par, args=[]}, %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-24(%ebp) 

    jmp BeginForLabel12

.EndForLabel13:

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $8 , 12(%esp)
    movl $4 , 8(%esp)

    call pruArreglos


    call imprimir

    movl $1, %eax

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_if_anidados.ctds ... -------------------
Error: Method pruAritmetica must return int


    .text
    .globl	pruAritmetica
    .type	pruAritmetica, @function 
pruAritmetica: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl	8(%ebp), %eax
    cmpl	12(%ebp), %eax
    setgne %al
    movlzbl %al, %eax
    movl	%eax, -8(%ebp)

    movl $ 1, %eax
    cmpl -8(%ebp), %eax

    jne elseCondLabel2

    movl	8(%ebp), %eax
    cmpl	12(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -12(%ebp)

    movl $ 1, %eax
    cmpl -12(%ebp), %eax

    jne elseCondLabel5

    movl 8(%ebp) , %eax 
    movl 12(%ebp) , %edx 
    subl %eax, %edx 
    movl %eax,-16(%ebp) 

    movl -16(%ebp),%eax
    movl %eax, -4(%ebp)

    jmp endIfLabel6

.elseCondLabel5:

    movl 12(%ebp) , %eax 
    movl 8(%ebp) , %edx 
    subl %eax, %edx 
    movl %eax,-20(%ebp) 

    movl -20(%ebp),%eax
    movl %eax, -4(%ebp)

.endIfLabel6:

    jmp endIfLabel3

.elseCondLabel2:

    movl 8(%ebp) , %eax 
    movl $5, %edx 
    imull %edx, %eax 
    movl %eax,-28(%ebp) 

    movl -28(%ebp),%eax
    movl %eax, -4(%ebp)

.endIfLabel3:

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $8 , 12(%esp)
    movl $4 , 8(%esp)

    call pruAritmetica


    call imprimir


    call imprimir

    movl $4 , 12(%esp)
    movl $4 , 8(%esp)

    call pruAritmetica


    call imprimir

    movl $5 , 12(%esp)
    movl $8 , 8(%esp)

    call pruAritmetica


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_if.ctds ... -------------------
Error: Method pruAritmetica must return int


    .text
    .globl	pruAritmetica
    .type	pruAritmetica, @function 
pruAritmetica: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl	8(%ebp), %eax
    cmpl	12(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -8(%ebp)

    movl $ 1, %eax
    cmpl -8(%ebp), %eax

    jne elseCondLabel2

    movl 8(%ebp) , %eax 
    movl 12(%ebp) , %edx 
    subl %eax, %edx 
    movl %eax,-12(%ebp) 

    movl -12(%ebp),%eax
    movl %eax, -4(%ebp)

    jmp endIfLabel3

.elseCondLabel2:

.endIfLabel3:

    movl	8(%ebp), %eax
    cmpl	12(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -16(%ebp)

    movl $ 1, %eax
    cmpl -16(%ebp), %eax

    jne elseCondLabel6

    movl 8(%ebp) , %eax 
    movl $5, %edx 
    imull %edx, %eax 
    movl %eax,-24(%ebp) 

    movl -24(%ebp),%eax
    movl %eax, -4(%ebp)

    jmp endIfLabel7

.elseCondLabel6:

    movl 12(%ebp) , %eax 
    movl 8(%ebp) , %edx 
    subl %eax, %edx 
    movl %eax,-28(%ebp) 

    movl -28(%ebp),%eax
    movl %eax, -4(%ebp)

.endIfLabel7:

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $8 , 12(%esp)
    movl $4 , 8(%esp)

    call pruAritmetica


    call imprimir


    call imprimir

    movl $4 , 12(%esp)
    movl $4 , 8(%esp)

    call pruAritmetica


    call imprimir

    movl $5 , 12(%esp)
    movl $8 , 8(%esp)

    call pruAritmetica


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_logicos01.ctds ... -------------------
Error: Method pruebaLogica must return int


    .text
    .globl	pruebaLogica
    .type	pruebaLogica, @function 
pruebaLogica: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $1,-4(%ebp)

    cmpl	$0, -12(%ebp)
    jne .L0
    cmpl	$0, -4(%ebp)
    je .L0
    movl	$1, %eax
    jmp .L1
.L0:
    movl	$0, %eax
    jmp .L2
.L1:
    movl	%eax, -16(%ebp)
.L2:

    cmpl $0, -20(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -24(%ebp) 

    cmpl	$0, -16(%ebp)
    je .L3
    cmpl	$0, -24(%ebp)
    je .L3
    movl	$1, %eax
    jmp .L4
.L3:
    movl	$0, %eax
    jmp .L5
.L4:
    movl	%eax, -28(%ebp)
.L5:

    cmpl $0, 8(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -32(%ebp) 

    cmpl	$0, -28(%ebp)
    je .L6
    cmpl	$0, -32(%ebp)
    je .L6
    movl	$1, %eax
    jmp .L7
.L6:
    movl	$0, %eax
    jmp .L8
.L7:
    movl	%eax, -36(%ebp)
.L8:

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $0 , (%esp)
    call pruebaLogica


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_logicos02.ctds ... -------------------


    .text
    .globl	promedio
    .type	promedio, @function 
promedio: 
    enter   $(12), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl	8(%ebp), %eax
    cmpl	12(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -4(%ebp)

    movl	16(%ebp), %eax
    cmpl	12(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -8(%ebp)

    cmpl	$0, -4(%ebp)
    je .L0
    cmpl	$0, -8(%ebp)
    je .L0
    movl	$1, %eax
    jmp .L1
.L0:
    movl	$0, %eax
    jmp .L2
.L1:
    movl	%eax, -12(%ebp)
.L2:

    movl $ 1, %eax
    cmpl -12(%ebp), %eax

    jne elseCondLabel4

    movl 8(%ebp) , %eax 
    movl 16(%ebp), %edx 
    addl %eax, %edx 
    movl %edx,-16(%ebp) 

    movl -16(%ebp) , %eax 
    movl $2.0 , %ecx
	 cltd
    idiv %ecx
    movl %ecx,-24(%ebp) 

    movl -24(%ebp), %eax

    jmp endIfLabel5

.elseCondLabel4:

.endIfLabel5:

    movl	8(%ebp), %eax
    cmpl	16(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -28(%ebp)

    movl	12(%ebp), %eax
    cmpl	16(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -32(%ebp)

    cmpl	$0, -28(%ebp)
    je .L3
    cmpl	$0, -32(%ebp)
    je .L3
    movl	$1, %eax
    jmp .L4
.L3:
    movl	$0, %eax
    jmp .L5
.L4:
    movl	%eax, -36(%ebp)
.L5:

    movl $ 1, %eax
    cmpl -36(%ebp), %eax

    jne elseCondLabel12

    movl 8(%ebp) , %eax 
    movl 12(%ebp), %edx 
    addl %eax, %edx 
    movl %edx,-40(%ebp) 

    movl -40(%ebp) , %eax 
    movl $2.0 , %ecx
	 cltd
    idiv %ecx
    movl %ecx,-48(%ebp) 

    movl -48(%ebp), %eax

    jmp endIfLabel13

.elseCondLabel12:

.endIfLabel13:

    movl	16(%ebp), %eax
    cmpl	8(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -52(%ebp)

    movl	12(%ebp), %eax
    cmpl	8(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -56(%ebp)

    cmpl	$0, -52(%ebp)
    je .L6
    cmpl	$0, -56(%ebp)
    je .L6
    movl	$1, %eax
    jmp .L7
.L6:
    movl	$0, %eax
    jmp .L8
.L7:
    movl	%eax, -60(%ebp)
.L8:

    movl $ 1, %eax
    cmpl -60(%ebp), %eax

    jne elseCondLabel20

    movl 12(%ebp) , %eax 
    movl 16(%ebp), %edx 
    addl %eax, %edx 
    movl %edx,-64(%ebp) 

    movl -64(%ebp) , %eax 
    movl $2.0 , %ecx
	 cltd
    idiv %ecx
    movl %ecx,-72(%ebp) 

    movl -72(%ebp), %eax

    jmp endIfLabel21

.elseCondLabel20:

.endIfLabel21:

    movl	8(%ebp), %eax
    cmpl	16(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -76(%ebp)

    movl	8(%ebp), %eax
    cmpl	12(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -80(%ebp)

    cmpl	$0, -76(%ebp)
    je .L9
    cmpl	$0, -80(%ebp)
    je .L9
    movl	$1, %eax
    jmp .L10
.L9:
    movl	$0, %eax
    jmp .L11
.L10:
    movl	%eax, -84(%ebp)
.L11:

    movl	16(%ebp), %eax
    cmpl	12(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -88(%ebp)

    cmpl	$0, -84(%ebp)
    je .L12
    cmpl	$0, -88(%ebp)
    je .L12
    movl	$1, %eax
    jmp .L13
.L12:
    movl	$0, %eax
    jmp .L14
.L13:
    movl	%eax, -92(%ebp)
.L14:

    movl $ 1, %eax
    cmpl -92(%ebp), %eax

    jne elseCondLabel30

    movl 8(%ebp), %eax

    jmp endIfLabel31

.elseCondLabel30:

.endIfLabel31:

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp


    call promedio


    call imprimir

    movl $1, %eax

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_mainSolo.ctds ... -------------------


    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $1,-4(%ebp)

    cmpl $0, -4(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -28(%ebp) 

    movl -28(%ebp),%eax
    movl %eax, -8(%ebp)

    cmpl	$0, -4(%ebp)
    je .L0
    cmpl	$0, -8(%ebp)
    je .L0
    movl	$1, %eax
    jmp .L1
.L0:
    movl	$0, %eax
    jmp .L2
.L1:
    movl	%eax, -32(%ebp)
.L2:

    cmpl $0, -8(%ebp) 
    sete %al 
    movlzbl %al, %eax 
    movl %eax, -36(%ebp) 

    cmpl	$0, -32(%ebp)
    jne .L3
    cmpl	$0, -36(%ebp)
    je .L3
    movl	$1, %eax
    jmp .L4
.L3:
    movl	$0, %eax
    jmp .L5
.L4:
    movl	%eax, -40(%ebp)
.L5:

    movl -40(%ebp),%eax
    movl %eax, -12(%ebp)

    movl $0 , (%esp)
    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_mcd.ctds ... -------------------


    .text
    .globl	maxcomdiv
    .type	maxcomdiv, @function 
maxcomdiv: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl	8(%ebp), %eax
    cmpl	12(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -16(%ebp)

    movl $ 1, %eax
    cmpl -16(%ebp), %eax

    jne elseCondLabel2

    movl 8(%ebp),%eax
    movl %eax, -4(%ebp)

    movl 12(%ebp),%eax
    movl %eax, -8(%ebp)

    jmp endIfLabel3

.elseCondLabel2:

    movl 12(%ebp),%eax
    movl %eax, -4(%ebp)

    movl 8(%ebp),%eax
    movl %eax, -8(%ebp)

.endIfLabel3:

    movl $1,-12(%ebp)

    movl	-12(%ebp), %eax
    cmpl	-24(%ebp), %eax
    setgne %al
    movlzbl %al, %eax
    movl	%eax, -28(%ebp)

.BeginWhileLabel7:

    movl $ 1, %eax
    cmpl -28(%ebp), %eax

    jne EndWhileLabel8

    movl	-8(%ebp), %eax 
    cltd
    idivl -4(%ebp)
    movl	%edx, -32(%ebp)

    movl -32(%ebp),%eax
    movl %eax, -12(%ebp)

    movl -8(%ebp),%eax
    movl %eax, -4(%ebp)

    movl -12(%ebp),%eax
    movl %eax, -8(%ebp)

    jmp BeginWhileLabel7

.EndWhileLabel8:

    movl -4(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $9 , 12(%esp)
    movl $6 , 8(%esp)

    call maxcomdiv


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_metodos00.ctds ... -------------------
Error: Method alo not declared
Error: Method alo not declared
ocurrio un error: null
---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_metodos01.ctds ... -------------------

    .comm c,4


    .text
    .globl	alo
    .type	alo, @function 
alo: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl 12(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-8(%ebp) 

    movl -8(%ebp),%eax
    movl %eax, 12(%ebp)

    leave
    ret



    .text
    .globl	alo2
    .type	alo2, @function 
alo2: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $0 , 8(%esp)

    call alo

    movl 8(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-8(%ebp) 

    movl -8(%ebp),%eax
    movl %eax, 0(%ebp)

    movl 8(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $7,-4(%ebp)

    movl $8.0,-4(%ebp)

    movl $0 , 8(%esp)

    call alo2

    movl %eax,-4(%ebp)

    movl $3 , %eax 
    movl -4(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-28(%ebp) 

    movl -28(%ebp),%eax
    movl %eax, -8(%ebp)

    movl $0 , 8(%esp)

    call alo2

    movl %eax,-4(%ebp)

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_metodos02.ctds ... -------------------

    .comm c,4


    .text
    .globl	alo
    .type	alo, @function 
alo: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $ 1, %eax
    cmpl 16(%ebp), %eax

    jne elseCondLabel1

    movl 12(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-8(%ebp) 

    movl -8(%ebp),%eax
    movl %eax, 12(%ebp)

    jmp endIfLabel2

.elseCondLabel1:

    movl 12(%ebp) , %eax 
    movl $1 , %edx 
    subl %eax, %edx 
    movl %eax,-16(%ebp) 

    movl -16(%ebp),%eax
    movl %eax, 12(%ebp)

.endIfLabel2:

    leave
    ret



    .text
    .globl	Alo
    .type	Alo, @function 
Alo: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    leave
    ret



    .text
    .globl	alo2
    .type	alo2, @function 
alo2: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $0 , 12(%esp)
    movl $1 , (%esp)
    call alo

    movl 8(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-12(%ebp) 

    movl -12(%ebp),%eax
    movl %eax, 0(%ebp)

    movl 8(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $7,-4(%ebp)

    movl $8.0,-4(%ebp)

    movl $0 , 8(%esp)

    call alo2

    movl %eax,-4(%ebp)

    movl $3 , %eax 
    movl -4(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-28(%ebp) 

    movl -28(%ebp),%eax
    movl %eax, -8(%ebp)

    movl $0 , 12(%esp)
    movl $0 , (%esp)
    call alo

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_metodos03.ctds ... -------------------

    .comm res,4


    .text
    .globl	inc
    .type	inc, @function 
inc: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl 8(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-8(%ebp) 

    movl -8(%ebp), %eax

    leave
    ret



    .text
    .globl	resto
    .type	resto, @function 
resto: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $3 , %eax 
    movl $2, %edx 
    imull %edx, %eax 
    movl %eax,-16(%ebp) 

    movl	8(%ebp), %eax
    cmpl	-16(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -20(%ebp)

    movl $ 1, %eax
    cmpl -20(%ebp), %eax

    jne elseCondLabel7

    movl 8(%ebp) , %eax 
    movl $3 , %ecx
	 cltd
    idiv %ecx
    movl %ecx,-28(%ebp) 

    movl -28(%ebp),%eax
    movl %eax, -4(%ebp)

    jmp endIfLabel8

.elseCondLabel7:

    movl	-32(%ebp), %eax 
    cltd
    idivl 8(%ebp)
    movl	%edx, -36(%ebp)

    movl -36(%ebp),%eax
    movl %eax, -4(%ebp)

.endIfLabel8:

    movl -4(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $0,-4(%ebp)

    movl $5 , 8(%esp)

    call inc

    movl %eax,-4(%ebp)

    movl $0 , 8(%esp)

    call resto

    movl %eax,-16(%ebp)

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_metodos_externos01.ctds ... -------------------

    .comm c,4


    .text
    .globl	alo
    .type	alo, @function 
alo: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl 8(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-8(%ebp) 

    movl -8(%ebp),%eax
    movl %eax, 0(%ebp)

    movl 8(%ebp), %eax

    leave
    ret



    .text
    .globl	alo_2
    .type	alo_2, @function 
alo_2: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $2 , 8(%esp)

    call alo

    movl $2 , 8(%esp)

    call alo

    movl $MethodCallExpr{name=alo, args=[2]}, %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-20(%ebp) 

    movl -20(%ebp),%eax
    movl %eax, 12(%ebp)

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $5 , 8(%esp)

    call alo

    movl %eax,-4(%ebp)


    call imprimir

    movl $0 , 12(%esp)

    call imprimir


    call /home/programas/primer_primo_par

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_metodos_externos02.ctds ... -------------------


    .text
    .globl	maxcomdiv
    .type	maxcomdiv, @function 
maxcomdiv: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl	8(%ebp), %eax
    cmpl	12(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -16(%ebp)

    movl $ 1, %eax
    cmpl -16(%ebp), %eax

    jne elseCondLabel2

    movl 8(%ebp),%eax
    movl %eax, -4(%ebp)

    movl 12(%ebp),%eax
    movl %eax, -8(%ebp)

    jmp endIfLabel3

.elseCondLabel2:

    movl 12(%ebp),%eax
    movl %eax, -4(%ebp)

    movl 8(%ebp),%eax
    movl %eax, -8(%ebp)

.endIfLabel3:

    movl $1,-12(%ebp)

    movl	-12(%ebp), %eax
    cmpl	-24(%ebp), %eax
    setgne %al
    movlzbl %al, %eax
    movl	%eax, -28(%ebp)

.BeginWhileLabel7:

    movl $ 1, %eax
    cmpl -28(%ebp), %eax

    jne EndWhileLabel8

    movl	-8(%ebp), %eax 
    cltd
    idivl -4(%ebp)
    movl	%edx, -32(%ebp)

    movl -32(%ebp),%eax
    movl %eax, -12(%ebp)

    movl -8(%ebp),%eax
    movl %eax, -4(%ebp)

    movl -12(%ebp),%eax
    movl %eax, -8(%ebp)

    jmp BeginWhileLabel7

.EndWhileLabel8:

    movl -4(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $10000,-4(%ebp)

    movl $9 , 12(%esp)
    movl $6 , 8(%esp)

    call maxcomdiv

    movl $3.5 , %eax 
    movl -4(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-28(%ebp) 

    movl $7 , %eax 
    movl $6 , %ecx
	 cltd
    idiv %ecx
    movl %ecx,-40(%ebp) 

    movl -28(%ebp) , %eax 
    movl -40(%ebp) , %edx 
    subl %eax, %edx 
    movl %eax,-44(%ebp) 


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_mod.ctds ... -------------------


    .text
    .globl	pruAritmetica
    .type	pruAritmetica, @function 
pruAritmetica: 
    pushl	%ebp
    movl %esp, %ebp

    movl $90,-4(%ebp)

    movl	-12(%ebp), %eax 
    cltd
    idivl -4(%ebp)
    movl	%edx, -16(%ebp)

    movl -16(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    call pruAritmetica


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_mult01.ctds ... -------------------


    .text
    .globl	pruMult
    .type	pruMult, @function 
pruMult: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $5,-4(%ebp)

    movl $2000,-8(%ebp)

    movl -4(%ebp) , %eax 
    movl $1000, %edx 
    imull %edx, %eax 
    movl %eax,-24(%ebp) 

    movl -24(%ebp) , %eax 
    movl 8(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-28(%ebp) 

    movl -28(%ebp) , %eax 
    movl -8(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-32(%ebp) 

    movl -32(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $2 , 8(%esp)

    call pruMult


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_mult02.ctds ... -------------------


    .text
    .globl	pruMult
    .type	pruMult, @function 
pruMult: 
    pushl	%ebp
    movl %esp, %ebp

    movl $5,-4(%ebp)

    movl -4(%ebp) , %eax 
    movl $7, %edx 
    imull %edx, %eax 
    movl %eax,-16(%ebp) 

    movl -16(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    call pruMult


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_prog_simple.ctds ... -------------------
Error: Main Method Missing in Class prueba2

    .comm c,4


    .text
    .globl	alo
    .type	alo, @function 
alo: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl 12(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-8(%ebp) 

    movl -8(%ebp),%eax
    movl %eax, 12(%ebp)

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_retorno.ctds ... -------------------


    .text
    .globl	id
    .type	id, @function 
id: 
    enter   $(4), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $100,-4(%ebp)

    movl $0,-8(%ebp)

    movl 8(%ebp),%eax
    movl %eax, -12(%ebp)

    movl	-8(%ebp), %eax
    cmpl	-4(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -24(%ebp)

.BeginWhileLabel4:

    movl $ 1, %eax
    cmpl -24(%ebp), %eax

    jne EndWhileLabel5

    movl 8(%ebp),%eax
    movl %eax, -28(%ebp)

    movl	8(%ebp), %eax
    cmpl	-32(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -36(%ebp)

    movl	8(%ebp), %eax
    cmpl	-40(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -44(%ebp)

    cmpl	$0, -36(%ebp)
    jne .L0
    cmpl	$0, -44(%ebp)
    je .L0
    movl	$1, %eax
    jmp .L1
.L0:
    movl	$0, %eax
    jmp .L2
.L1:
    movl	%eax, -48(%ebp)
.L2:

.BeginWhileLabel11:

    movl $ 1, %eax
    cmpl -48(%ebp), %eax

    jne EndWhileLabel12

    movl	8(%ebp), %eax
    cmpl	-52(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -56(%ebp)

    movl $ 1, %eax
    cmpl -56(%ebp), %eax

    jne elseCondLabel15

    movl 8(%ebp) , %eax 
    movl $1 , %edx 
    subl %eax, %edx 
    movl %eax,-64(%ebp) 

    movl -64(%ebp),%eax
    movl %eax, 0(%ebp)

    jmp endIfLabel16

.elseCondLabel15:

    movl 8(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-72(%ebp) 

    movl -72(%ebp),%eax
    movl %eax, 0(%ebp)

.endIfLabel16:

    jmp BeginWhileLabel11

.EndWhileLabel12:

    movl	8(%ebp), %eax
    cmpl	-28(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -76(%ebp)

    movl	8(%ebp), %eax
    cmpl	-28(%ebp), %eax
    setg	%al
    movlzbl %al, %eax
    movl	%eax, -80(%ebp)

    cmpl	$0, -76(%ebp)
    jne .L3
    cmpl	$0, -80(%ebp)
    je .L3
    movl	$1, %eax
    jmp .L4
.L3:
    movl	$0, %eax
    jmp .L5
.L4:
    movl	%eax, -84(%ebp)
.L5:

.BeginWhileLabel24:

    movl $ 1, %eax
    cmpl -84(%ebp), %eax

    jne EndWhileLabel25

    movl	8(%ebp), %eax
    cmpl	-28(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -88(%ebp)

    movl $ 1, %eax
    cmpl -88(%ebp), %eax

    jne elseCondLabel27

    movl 8(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-96(%ebp) 

    movl -96(%ebp),%eax
    movl %eax, 0(%ebp)

    jmp endIfLabel28

.elseCondLabel27:

    movl	8(%ebp), %eax
    cmpl	8(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -100(%ebp)

    movl $ 1, %eax
    cmpl -100(%ebp), %eax

    jne elseCondLabel32

    movl 8(%ebp) , %eax 
    movl $1 , %edx 
    subl %eax, %edx 
    movl %eax,-108(%ebp) 

    movl -8(%ebp) , %eax 
    movl 8(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-112(%ebp) 

    movl -8(%ebp) , %eax 
    movl 8(%ebp) , %edx 
    imull %edx, %eax 
    movl %eax,-116(%ebp) 

    movl -112(%ebp) , %eax 
    movl -116(%ebp) , %edx 
    subl %eax, %edx 
    movl %eax,-120(%ebp) 

    movl -108(%ebp) , %eax 
    movl -120(%ebp), %edx 
    addl %eax, %edx 
    movl %edx,-124(%ebp) 

    movl -124(%ebp),%eax
    movl %eax, 0(%ebp)

    jmp endIfLabel33

.elseCondLabel32:

.endIfLabel33:

.endIfLabel28:

    jmp BeginWhileLabel24

.EndWhileLabel25:

    movl -12(%ebp),%eax
    movl %eax, 0(%ebp)

    movl -8(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-132(%ebp) 

    movl -132(%ebp),%eax
    movl %eax, -8(%ebp)

    jmp BeginWhileLabel4

.EndWhileLabel5:

    movl 8(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $9 , 8(%esp)

    call id


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_suma.ctds ... -------------------


    .text
    .globl	suma
    .type	suma, @function 
suma: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl	8(%ebp), %eax
    cmpl	-4(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -8(%ebp)

    movl $ 1, %eax
    cmpl -8(%ebp), %eax

    jne elseCondLabel3

    movl 12(%ebp), %eax

    jmp endIfLabel4

.elseCondLabel3:

    movl	12(%ebp), %eax
    cmpl	-12(%ebp), %eax
    sete %al
    movlzbl %al, %eax
    movl	%eax, -16(%ebp)

    movl $ 1, %eax
    cmpl -16(%ebp), %eax

    jne elseCondLabel7

    movl 8(%ebp), %eax

    jmp endIfLabel8

.elseCondLabel7:

    movl 8(%ebp) , %eax 
    movl 12(%ebp), %edx 
    addl %eax, %edx 
    movl %edx,-20(%ebp) 

    movl -20(%ebp), %eax

.endIfLabel8:

.endIfLabel4:

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $3,-8(%ebp)

    movl $1,-4(%ebp)

    movl -20(%ebp), %eax
    addl %eax, -4(%ebp)

    movl -4(%ebp), %eax
    addl %eax, -8(%ebp)

    movl $9 , 12(%esp)
    movl $4 , 8(%esp)

    call suma


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_sumx.ctds ... -------------------


    .text
    .globl	sumx
    .type	sumx, @function 
sumx: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $0,-4(%ebp)

    movl $0,-8(%ebp)

    movl	-8(%ebp), %eax
    cmpl	12(%ebp), %eax
    setl	%al
    movlzbl %al, %eax
    movl	%eax, -20(%ebp)

.BeginWhileLabel4:

    movl $ 1, %eax
    cmpl -20(%ebp), %eax

    jne EndWhileLabel5

    movl -4(%ebp) , %eax 
    movl 8(%ebp), %edx 
    addl %eax, %edx 
    movl %edx,-24(%ebp) 

    movl -24(%ebp),%eax
    movl %eax, -4(%ebp)

    movl -8(%ebp) , %eax 
    movl $1, %edx 
    addl %eax, %edx 
    movl %edx,-32(%ebp) 

    movl -32(%ebp),%eax
    movl %eax, -8(%ebp)

    jmp BeginWhileLabel4

.EndWhileLabel5:

    movl -4(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $2 , 12(%esp)

    call sumx


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
---------------- Test tests/test_correctos/test_while.ctds ... -------------------


    .text
    .globl	maxcomdiv
    .type	maxcomdiv, @function 
maxcomdiv: 
    enter   $(8), $0 
    pushl	%ebp
    movl %esp, %ebp

    movl $1,-12(%ebp)

    movl	-12(%ebp), %eax
    cmpl	-20(%ebp), %eax
    setgne %al
    movlzbl %al, %eax
    movl	%eax, -24(%ebp)

.BeginWhileLabel4:

    movl $ 1, %eax
    cmpl -24(%ebp), %eax

    jne EndWhileLabel5

    movl	-8(%ebp), %eax 
    cltd
    idivl -4(%ebp)
    movl	%edx, -28(%ebp)

    movl -28(%ebp), %eax
    addl %eax, -12(%ebp)

    movl -8(%ebp), %eax
    subl %eax, -4(%ebp)

    jmp BeginWhileLabel4

    jmp BeginWhileLabel4

.EndWhileLabel5:

    movl	-12(%ebp), %eax
    cmpl	-32(%ebp), %eax
    setgne %al
    movlzbl %al, %eax
    movl	%eax, -36(%ebp)

.BeginWhileLabel9:

    movl $ 1, %eax
    cmpl -36(%ebp), %eax

    jne EndWhileLabel10

    jmp EndWhileLabel10

    jmp BeginWhileLabel9

.EndWhileLabel10:

    movl	-12(%ebp), %eax
    cmpl	-40(%ebp), %eax
    setgne %al
    movlzbl %al, %eax
    movl	%eax, -44(%ebp)

.BeginWhileLabel13:

    movl $ 1, %eax
    cmpl -44(%ebp), %eax

    jne EndWhileLabel14

    jmp BeginWhileLabel13

.EndWhileLabel14:

    movl -4(%ebp), %eax

    leave
    ret



    .text
    .globl	main
    .type	main, @function 
main: 
    pushl	%ebp
    movl %esp, %ebp

    movl $9 , 12(%esp)
    movl $6 , 8(%esp)

    call maxcomdiv


    call imprimir

    leave
    ret


---------------------------------------------------
  
  
///////////////////////// TESTS CON FALLAS ////////////////////////////////////////
---------------- Test tests/test_errores/error_arreglos01.ctds ... -------------------
error de sintaxis: Linea 3.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_arreglos02.ctds ... -------------------
error de sintaxis: Linea 3.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_arreglos03.ctds ... -------------------
error de sintaxis: Linea 7.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_arreglos04.ctds ... -------------------
error de sintaxis: Linea 3.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_arreglos05.ctds ... -------------------
error de sintaxis: Linea 3.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_bloques01.ctds ... -------------------
error de sintaxis: Linea 3.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_bloques02.ctds ... -------------------
error de sintaxis: Linea 9.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_char.ctds ... -------------------
error de sintaxis: Linea 4.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_class01.ctds ... -------------------
Error: Method alo not declared
Error: Method alo not declared
ocurrio un error: null
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_class02.ctds ... -------------------
Error: Method alo not declared
Error: Method alo not declared
ocurrio un error: null
---------------------------------------------------
  
  
---------------- Test tests/test_errores/errores.ctds ... -------------------
error de sintaxis: Linea 3.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_externinvk02.ctds ... -------------------
error de sintaxis: Linea 23.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_externinvk.ctds ... -------------------
error de sintaxis: Linea 22.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_float01.ctds ... -------------------
error de sintaxis: Linea 9.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_float02.ctds ... -------------------
error: 0 9 .
error: 0 21 .
error de sintaxis: Linea 22.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_float03.ctds ... -------------------
error de sintaxis: Linea 29.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_float04.ctds ... -------------------
error de sintaxis: Linea 41.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_for01.ctds ... -------------------
error de sintaxis: Linea 13.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_for02.ctds ... -------------------
error de sintaxis: Linea 13.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_for03.ctds ... -------------------
error de sintaxis: Linea 13.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_for04.ctds ... -------------------
error de sintaxis: Linea 13.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_for05.ctds ... -------------------
error de sintaxis: Linea 18.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_if01.ctds ... -------------------
error de sintaxis: Linea 9.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_if02.ctds ... -------------------
error de sintaxis: Linea 8.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_lineaerror02.ctds ... -------------------
error de sintaxis: Linea 20.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_lineaerror.ctds ... -------------------
error de sintaxis: Linea 20.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_test_break.ctds ... -------------------
error de sintaxis: Linea 20.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_test_logicos02.ctds ... -------------------
error: 0 4 &
error de sintaxis: Linea 5.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_test_logicos.ctds ... -------------------
ocurrio un error: null
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_test_main01.ctds ... -------------------
Error: Method alo not declared
error de sintaxis: Linea 11.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_test_main02.ctds ... -------------------
Error: Method Main must not have parameters
Error: Method alo not declared
error de sintaxis: Linea 14.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_test_metodos01.ctds ... -------------------
error de sintaxis: Linea 4.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_test_metodos02.ctds ... -------------------
error de sintaxis: Linea 4.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_test_metodos03.ctds ... -------------------
error de sintaxis: Linea 19.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_test_metodos04.ctds ... -------------------
Error: Method alo3 not declared
error de sintaxis: Linea 21.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_test_metodos05.ctds ... -------------------
error de sintaxis: Linea 15.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_test_metodos06.ctds ... -------------------
error: 0 3 &
error de sintaxis: Linea 4.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_test_metodos07.ctds ... -------------------
error de sintaxis: Linea 9.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_test_multiplesMain.ctds ... -------------------
error de sintaxis: Linea 9.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_vbles01.ctds ... -------------------
error de sintaxis: Linea 6.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_vbles02.ctds ... -------------------
error: 0 5 _
error de sintaxis: Linea 7.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/error_vbles03.ctds ... -------------------
error de sintaxis: Linea 3.
---------------------------------------------------
  
  
---------------- Test tests/test_errores/ifErrorTest.ctds ... -------------------
error de sintaxis: Linea 6.
---------------------------------------------------
  
  
