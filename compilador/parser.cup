/*Por el momento dejaremos el action code y parser code vacios esto se
explicara mas a detalle en otra seccion del tutorial*/
action code{::}
parser code{::}


/*Declaracion de variables no terminales*/
non terminal PROGRAM,FIELD_DECL,METHOD_DECL,BLOCK,TYPE,STATEMENT,ASSIGN_OP,METHOD_CALL,LOCATION,EXPR,EXTERNINVK_ARG,BIN_OP,
ARITH_OP,REL_OP,EQ_OP,COND_OP,LITERAL, BOOL_LITERAL, TYPE_OR_VOID, TYPE_ID, ELSE_BLOCK;

non terminal TYPE_ID2, STATEMENT2, LOCATION2, EXTERNINVK_2, EXPR2, ID_INT_LITERAL, ID_2, ID_3, EXPR3;

/*DECLARACION DE VARIABLES TERMINALES */

/*Terminales palabras reservadas*/
terminal BREAK, CLASS, CONTINUE, ELSE, FALSE, FOR, ID, IF, RETURN, TRUE, VOID, WHILE;

/*Terminales operadores aritméticos y lógicos*/
terminal SUMA, RESTA, MULTIPLICACION, DIVISION, ASIGNACION, INCREMENTO, DECREMENTO, PORCENTAJE;

/*Terminales operadores lógicos*/
terminal CONJUNCION, DISYUNCION, IGUALDAD_LOGICA, DIFERENCIA_LOGICA, MAYOR, MENOR, MAYOR_IGUAL, MENOR_IGUAL;

/*Terminales signos de puntuación*/
terminal  COMA, PUNTO_Y_COMA, LLAVE_IZQ, LLAVE_DER, CORCHETE_IZQ, CORCHETE_DER, PARENTESIS_IZQ, PARENTESIS_DER, ADMIRACION; 

/*Terminales tipos*/
terminal INT, FLOAT, BOOLEAN;

/*Terminales varios*/
terminal EXTERNINVK;

/*Terminales objetos*/
terminal INT_LITERAL, FLOAT_LITERAL, STRING_LITERAL;

precedence left COMA;
precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;
precedence left ID;
precedence left PARENTESIS_IZQ;     

start with PROGRAM;

PROGRAM::=CLASS ID LLAVE_IZQ FIELD_DECL METHOD_DECL LLAVE_DER
       ;

FIELD_DECL::= TYPE ID_INT_LITERAL PUNTO_Y_COMA
          ;

ID_INT_LITERAL::= ID ID_2
              ;

ID_2::= COMA ID_INT_LITERAL
    | CORCHETE_IZQ INT_LITERAL CORCHETE_DER ID_3
    |
    ;

ID_3::= COMA ID_INT_LITERAL
    |
    ;

METHOD_DECL::= TYPE_OR_VOID ID PARENTESIS_IZQ TYPE_ID PARENTESIS_DER BLOCK METHOD_DECL
           |
           ;

TYPE_OR_VOID::= TYPE
            | VOID
            ;

TYPE_ID::= TYPE ID TYPE_ID2
       |
       ;

TYPE_ID2::= COMA TYPE_ID
        |
        ;   

BLOCK::= LLAVE_IZQ FIELD_DECL STATEMENT LLAVE_DER
     ;

TYPE::= INT 
    | FLOAT 
    | BOOLEAN
    ;

STATEMENT::= LOCATION ASSIGN_OP EXPR  PUNTO_Y_COMA STATEMENT
         | METHOD_CALL PUNTO_Y_COMA STATEMENT 
         | IF PARENTESIS_IZQ EXPR PARENTESIS_DER BLOCK ELSE_BLOCK STATEMENT
         | FOR ID ASIGNACION EXPR COMA EXPR BLOCK STATEMENT
         | WHILE EXPR BLOCK STATEMENT
         | RETURN STATEMENT2
         | BREAK PUNTO_Y_COMA STATEMENT
         | CONTINUE PUNTO_Y_COMA STATEMENT
         | PUNTO_Y_COMA STATEMENT
         | BLOCK PUNTO_Y_COMA STATEMENT
         |
         ;

STATEMENT2::= PUNTO_Y_COMA STATEMENT
          |EXPR PUNTO_Y_COMA
          ;

ELSE_BLOCK::= ELSE BLOCK
          |
          ;

ASSIGN_OP::= ASIGNACION 
         | INCREMENTO 
         | DECREMENTO
         ;

METHOD_CALL::= ID PARENTESIS_IZQ EXPR PARENTESIS_DER
           |  EXTERNINVK PARENTESIS_IZQ STRING_LITERAL COMA TYPE_OR_VOID EXTERNINVK_ARG PARENTESIS_DER
           ;

LOCATION::= ID LOCATION2
        ;

LOCATION2::= CORCHETE_IZQ EXPR CORCHETE_DER
         |
         ;

EXPR::= LOCATION EXPR3
    |  METHOD_CALL EXPR3
    |  LITERAL EXPR3
    |  BIN_OP EXPR EXPR2 EXPR3
    |  RESTA EXPR EXPR3
    |  ADMIRACION EXPR EXPR3
    |  PARENTESIS_IZQ EXPR PARENTESIS_DER EXPR3
    ;

EXPR2::= EXPR
     ;

EXPR3::= COMA EXPR2
     |
     ;

EXTERNINVK_ARG::= EXPR EXTERNINVK_2
                | STRING_LITERAL EXTERNINVK_2
                ;

EXTERNINVK_2::= COMA EXTERNINVK_ARG
            |
            ;

BIN_OP::= ARITH_OP 
      | REL_OP 
      | EQ_OP 
      | COND_OP
      ;

ARITH_OP ::= SUMA 
         | RESTA 
         | MULTIPLICACION 
         | DIVISION 
         | PORCENTAJE
         ;

REL_OP ::= MENOR 
       | MAYOR 
       | MENOR_IGUAL 
       | MAYOR_IGUAL
       ;

EQ_OP ::= IGUALDAD_LOGICA 
      | DIFERENCIA_LOGICA
      ;

COND_OP ::= CONJUNCION 
        | DISYUNCION
        ;

LITERAL::= INT_LITERAL 
       | FLOAT_LITERAL
       | BOOL_LITERAL
       ;

BOOL_LITERAL::= TRUE 
            | FALSE
            ;

