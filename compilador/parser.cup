/*Por el momento dejaremos el action code y parser code vacios esto se
explicara mas a detalle en otra seccion del tutorial*/
action code{::}
parser code{::}

/*Declaracion de variables no terminales*/
non terminal PROGRAM,FIELD_DECL,METHOD_DECL,BLOCK,TYPE,STATEMENT,ASSIGN_OP,METHOD_CALL,LOCATION,EXPR,BIN_OP,
ARITH_OP,REL_OP,EQ_OP,COND_OP,ID_DECL, TYPE_OR_VOID, TYPE_ID, LITERAL, ELSE_BLOCK, EXTERNINVK_ARG, BOOL_LITERAL, 
FIELD_METHOD_DECLS, FIELD_STATEMENT_DECLS, EXPR2, ID_DECL2, LOCATION2, TYPE2;

/*DECLARACION DE VARIABLES TERMINALES */

/*Terminales palabras reservadas*/
terminal break, class, continue, else, false, for, id, if, return, true, void, while;

/*Terminales operadores aritméticos y lógicos*/
terminal suma, resta, multiplicacion, division, asignacion, incremento, decremento, porcentaje;

/*Terminales operadores lógicos*/
terminal conjuncion, disyuncion, igualdad_logica, diferencia_logica, mayor, menor, mayor_igual, menor_igual;

/*Terminales signos de puntuación*/
terminal coma, punto_y_coma, llave_izq, llave_der, corchete_izq, corchete_der, parentesis_izq, parentesis_der, admiracion; 

/*Terminales tipos*/
terminal int, float, boolean;

/*Terminales varios*/
terminal externinvk;

/*Terminales objetos*/
terminal int_literal, float_literal, string_literal;

PROGRAM::= class id llave_izq FIELD_METHOD_DECLS llave_der
       ;

FIELD_METHOD_DECLS::= FIELD_DECL
                  | METHOD_DECL
                  | FIELD_DECL METHOD_DECL
                  |
                  ;
FIELD_DECL::= TYPE ID_DECL punto_y_coma FIELD_DECL
          | /*Lambda*/
          ;  

ID_DECL::= id ID_DECL2
       ;

ID_DECL2::= corchete_izq int_literal corchete_der
        |coma ID_DECL
        |corchete_izq int_literal corchete_der ID_DECL
        |
        ;

METHOD_DECL::= TYPE_OR_VOID id parentesis_izq TYPE_ID parentesis_der BLOCK METHOD_DECL
           |
           ;

TYPE_OR_VOID::= TYPE
            | void
            ;

TYPE_ID::= TYPE id TYPE2
       ;

TYPE2::= coma TYPE_ID
     |
     ;

TYPE::= int 
    | float 
    | boolean
    ;

/*NO HAY GUARNINGS*/

BLOCK::= llave_izq FIELD_STATEMENT_DECLS llave_der
     ;

FIELD_STATEMENT_DECLS::= FIELD_DECL
                     |STATEMENT
                     |FIELD_DECL STATEMENT
                     |
                     ;

STATEMENT::= LOCATION ASSIGN_OP EXPR  punto_y_coma STATEMENT
         | METHOD_CALL punto_y_coma STATEMENT 
         | if parentesis_izq EXPR parentesis_der BLOCK ELSE_BLOCK STATEMENT
         | for id asignacion EXPR coma EXPR BLOCK STATEMENT
         | while EXPR BLOCK STATEMENT
         | return punto_y_coma STATEMENT
         | return EXPR punto_y_coma
         | break punto_y_coma STATEMENT
         | continue punto_y_coma STATEMENT
         | punto_y_coma STATEMENT
         | BLOCK punto_y_coma STATEMENT
         |
         ;

ELSE_BLOCK::= else BLOCK
          |
          ;

ASSIGN_OP::= asignacion 
         | incremento 
         | decremento
         ;

METHOD_CALL::= id parentesis_izq EXPR parentesis_der
           |  externinvk parentesis_izq string_literal coma TYPE_OR_VOID EXTERNINVK_ARG parentesis_der
           ;

LOCATION::= id LOCATION2
        ;

LOCATION2::= corchete_izq EXPR corchete_der
         |
         ;

EXPR::= LOCATION
    |  METHOD_CALL
    |  LITERAL
    |  BIN_OP EXPR EXPR2
    |  resta EXPR
    |  admiracion EXPR
    |  parentesis_izq EXPR parentesis_der
    ;

EXPR2::= EXPR
     ;
EXTERNINVK_ARG::= EXPR
                | string_literal
                | EXPR coma EXTERNINVK_ARG
                | string_literal coma EXTERNINVK_ARG
                ;

BIN_OP::= ARITH_OP 
      | REL_OP 
      | EQ_OP 
      | COND_OP
      ;

ARITH_OP::= suma 
         | resta 
         | multiplicacion 
         | division 
         | porcentaje
         ;

REL_OP::= menor 
       | mayor 
       | menor_igual 
       | mayor_igual
       ;

EQ_OP::= igualdad_logica 
      | diferencia_logica
      ;

COND_OP::= conjuncion 
        | disyuncion
        ;

LITERAL::= int_literal 
       | float_literal
       | BOOL_LITERAL
       ;

BOOL_LITERAL::= true 
            | false
            ;


