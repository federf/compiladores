    /*
    Proyecto: Proyecto Compiladores 2014
    Autores: Federico Franco, Bruno Isoardi
    Funcionalidad: Clase que lleva acabo el analisis sintactico
    */
    import java_cup.runtime.Symbol;
    import ir.*;
    import ir.ast.*;
    import ir.ast.UnaryOpExpr;
    import java.util.*;


    action code{: 

    AST ast;

    symbolTable TS; //tabla de simbolos

    Type tipo_corriente; //ultimo tipo leido

    Metodo ult_metodo; //ultimo metodo creado

    boolean mainDeclared;
    //variable booleana que indicaria que se encuentra dentro de una sentencia if - else
    boolean inIfElse; 
    //variable booleana que indicaria que se encuentra dentro de un ciclo
    boolean inLoop;
    //lista de codigo de tercetos/triplas
    LinkedList<TripletCode> TripletList;

    //pilas de labels
    //para whiles
    LinkedList<String> WhilesStack;
    //para fors
    LinkedList<String> ForsStack;
    //para ifs
    LinkedList<String> IfsStack;

    //int del ultimo offset leido
    int ultOffsetLeido=0;
    //nombre de la ultima variable buscada (vendria a ser la que tiene el ultimo offset leido)
    String ultVarLeida="";

    //metodo que dadas dos VarLocation verifica si son operandos validos para: suma, resta, mult, division,LE,GE,GEQ,LEQ
    private boolean validOperators(VarLocation s1, VarLocation s2){
        return ((s1.getType().equals(Type.INT) && s2.getType().equals(Type.INT))||
                (s1.getType().equals(Type.INT) && s2.getType().equals(Type.FLOAT)) ||
                (s1.getType().equals(Type.INT) && s2.getType().equals(Type.FLOATARRAY)) ||
                (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INTARRAY)) ||

                (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.FLOAT))||
                (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.INT))||
                (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.INTARRAY))||
                (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.FLOATARRAY))||

                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INTARRAY))||
                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.FLOATARRAY))||
                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.FLOAT)) ||
                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INT))||
                
                (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.FLOATARRAY)) ||
                (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.INTARRAY)) ||
                (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.INT)) ||
                (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.FLOAT)));
    }

    private boolean logicValidOperators(VarLocation r1,VarLocation r2){
        return( r1.getType().equals(Type.BOOLEAN) && r2.getType().equals(Type.BOOLEAN) ||
                (r1.getType().equals(Type.INT)&& r2.getType().equals(Type.INT)) ||
                (r1.getType().equals(Type.INT)&& r2.getType().equals(Type.INTARRAY)) ||
                (r1.getType().equals(Type.INT)&& r2.getType().equals(Type.FLOAT))||
                (r1.getType().equals(Type.INT)&& r2.getType().equals(Type.FLOATARRAY))||

                (r1.getType().equals(Type.FLOAT)&& r2.getType().equals(Type.INT)) ||
                (r1.getType().equals(Type.FLOAT)&& r2.getType().equals(Type.INTARRAY)) ||
                (r1.getType().equals(Type.FLOAT)&& r2.getType().equals(Type.FLOAT))||
                (r1.getType().equals(Type.FLOAT)&& r2.getType().equals(Type.FLOATARRAY))||
                
                (r1.getType().equals(Type.INTARRAY)&& r2.getType().equals(Type.INT)) ||
                (r1.getType().equals(Type.INTARRAY)&& r2.getType().equals(Type.INTARRAY)) ||
                (r1.getType().equals(Type.INTARRAY)&& r2.getType().equals(Type.FLOAT))||
                (r1.getType().equals(Type.INTARRAY)&& r2.getType().equals(Type.FLOATARRAY))||

                (r1.getType().equals(Type.FLOATARRAY)&& r2.getType().equals(Type.INT)) ||
                (r1.getType().equals(Type.FLOATARRAY)&& r2.getType().equals(Type.INTARRAY)) ||
                (r1.getType().equals(Type.FLOATARRAY)&& r2.getType().equals(Type.FLOAT))||
                (r1.getType().equals(Type.FLOATARRAY)&& r2.getType().equals(Type.FLOATARRAY)));
    }
    :};

    parser code{:

    public void syntax_error(Symbol s){
        System.out.println("error de sintaxis: Linea "+(s.right+1)+".");
    }

    public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception{
    }
    :};


    /*Declaracion de variables no terminales*/
    non terminal program,field_decl,method_decl,type;

    non terminal statement;

    non terminal Expression externinvk_arg;
    non terminal Expression literal,  bool_LITERAL,method_call;
    non terminal Type type_or_void;

    non terminal body, fieldDeclarations, fieldAndMethods, identifier, identifiers, methodDeclarations, parameters, 
    parameterDeclarations, parameterDeclaration, statements;

    non terminal LinkedList<Expression> externinvk_args, expressions;

    non terminal Location location;
    non terminal VarLocation expr,conjunction, comparison, term, sum,relation;
    non terminal AssignOpType assign_op;
    non terminal VarLocation factor;
    non terminal Block block, else_block;

    /*DECLARACION DE VARIABLES TERMINALES */

    /*Terminales palabras reservadas*/
    terminal CLASS, ELSE, VOID;
    terminal String ID;
    terminal BoolLiteral FALSE, TRUE;
    terminal IfStmt IF;
    terminal BreakStmt BREAK;
    terminal ContinueStmt CONTINUE;
    terminal ForStmt FOR;
    terminal ReturnStmt RETURN;
    terminal WhileStmt WHILE;

    /*Terminales operadores aritméticos y lógicos*/
    terminal BinOpType SUMA, RESTA, MULTIPLICACION, DIVISION,  PORCENTAJE;
    terminal AssignOpType ASIGNACION, INCREMENTO, DECREMENTO;

    /*Terminales operadores lógicos*/
    terminal BinOpType CONJUNCION, DISYUNCION, IGUALDAD_LOGICA, DIFERENCIA_LOGICA, MAYOR, MENOR, MAYOR_IGUAL, MENOR_IGUAL;

    /*Terminales signos de puntuación*/
    terminal  COMA, LLAVE_IZQ, LLAVE_DER, CORCHETE_IZQ, CORCHETE_DER, PARENTESIS_IZQ, PARENTESIS_DER, ADMIRACION;
    terminal SemiColonStmt PUNTO_Y_COMA;

    /*Terminales tipos*/
    terminal INT, FLOAT, BOOLEAN;

    /*Terminales varios*/
    terminal EXTERNINVK;

    /*Terminales objetos*/
    terminal String INT_LITERAL;
    terminal String FLOAT_LITERAL;
    terminal String STRING_LITERAL;

    precedence left LLAVE_IZQ, LLAVE_DER;
    precedence left CORCHETE_IZQ, CORCHETE_DER;
    precedence right INCREMENTO;
    precedence right DECREMENTO;
    precedence right ASIGNACION;
    precedence left DISYUNCION;
    precedence left CONJUNCION;
    precedence left DIFERENCIA_LOGICA, IGUALDAD_LOGICA;
    precedence left MENOR_IGUAL, MAYOR_IGUAL;
    precedence left MENOR, MAYOR;
    precedence left SUMA, RESTA;
    precedence left MULTIPLICACION, DIVISION, PORCENTAJE;
    precedence left PARENTESIS_IZQ, PARENTESIS_DER;
    precedence left ADMIRACION;

    start with program;

    program::= CLASS ID:d {: mainDeclared=false; System.out.println("parseo iniciado"); :} body {:
                System.out.println("");
                if(!mainDeclared){
                    System.out.println("Error: Main Method Missing in Class "+d.toString());
                    
                }
                System.out.println("parseo exitoso");
                System.out.println("tamaño lista de codigo tercetos: "+TripletList.size());
                System.out.println("lista: ");
                for(TripletCode t : TripletList){
                    System.out.println(t);
                }
                System.out.println();
                AssemblyCodeGenerator ASMGenerator=new AssemblyCodeGenerator();
                System.out.println(ASMGenerator.generate(TripletList));
            :}
            ;

    body::= LLAVE_IZQ LLAVE_DER 
        | LLAVE_IZQ {: TS = new symbolTable(); TripletList=new LinkedList(); ForsStack=new LinkedList(); WhilesStack=new LinkedList(); IfsStack=new LinkedList();:} fieldAndMethods LLAVE_DER 
        ;

    fieldAndMethods::= fieldDeclarations
                   | methodDeclarations
                   | fieldDeclarations methodDeclarations
                   ;

    fieldDeclarations::= field_decl
                     | fieldDeclarations field_decl
                     ;

    field_decl::= type identifiers PUNTO_Y_COMA
              ;

    identifiers::= identifier
                | identifiers COMA identifier
                ;

    identifier::= ID:s {: //CODIGO DE TRES DIRECCIONES  - guardamos la variable declarada y su tipo

                            VarLocation arr;
                            //la creamos como VarLocation para registrarla como tal
                            arr=new VarLocation(s.toString(), tipo_corriente, null, 0);

                            //caso identificador ID
                            TS.agregarSimbolo(tipo_corriente, s.toString(), null, 0, arr.getOffset());
                              
                            if(TS.getCorriente().esRaiz()){
                                TripletList.addLast(new TripletCode(TripletOperator.GLOBAL, tipo_corriente,s.toString(),0));
                            }
                            //FIN CODIGO TRES DIRECCIONES
                        :} 
                        
      | ID:s CORCHETE_IZQ INT_LITERAL:i CORCHETE_DER {: //caso arreglo ID[INT_LITERAL]
                                                        VarLocation arr;
                                                        //convertimos el int_literal en string
                                                        int size= Integer.valueOf((String) i); 
                                                        //luego segun el ultimo tipo leido creamos el simbolo que representara al arreglo
                                                        switch (tipo_corriente){
                                                               case INT:

                                                                        //la creamos como VarLocation para registrarla como tal
                                                                        arr=new VarLocation(s.toString(), Type.INTARRAY, null, size);
                                                                        TS.agregarSimbolo(Type.INTARRAY, s.toString(), null, size, arr.getOffset());  

                                                                        //CODIGO DE TRES DIRECCIONES
                                                                        if(TS.getCorriente().esRaiz()){
                                                                            TripletList.addLast(new TripletCode(TripletOperator.GLOBAL, tipo_corriente,s.toString(),size));
                                                                        }
                                                                        //FIN CODIGO TRES DIRECCIONES
                                                                        break;
                                                               case FLOAT:
                                                                        

                                                                        //la creamos como VarLocation para registrarla como tal
                                                                        arr=new VarLocation(s.toString(), Type.FLOATARRAY, null, size);
                                                                        TS.agregarSimbolo(Type.FLOATARRAY, s.toString(), null, size, arr.getOffset());  
                                                                        //CODIGO DE TRES DIRECCIONES
                                                                        if(TS.getCorriente().esRaiz()){
                                                                            TripletList.addLast(new TripletCode(TripletOperator.GLOBAL, tipo_corriente,s.toString(),size));
                                                                        }
                                                                        //FIN CODIGO TRES DIRECCIONES
                                                                        break;
                                                               case BOOLEAN:
                                                                        

                                                                        //la creamos como VarLocation para registrarla como tal
                                                                        arr=new VarLocation(s.toString(), Type.BOOLARRAY, null, size);
                                                                        TS.agregarSimbolo(Type.BOOLARRAY, s.toString(), null, size, arr.getOffset()); 
                                                                        //CODIGO DE TRES DIRECCIONES
                                                                        if(TS.getCorriente().esRaiz()){
                                                                            TripletList.addLast(new TripletCode(TripletOperator.GLOBAL, tipo_corriente,s.toString(),size));
                                                                        }
                                                                        //FIN CODIGO TRES DIRECCIONES
                                                                        break;
                                                        }
                                                    :} 
      ;

    methodDeclarations::= method_decl 
                      | methodDeclarations method_decl
                      ;

    method_decl::= VOID ID:d {:  //declaracion de metodo que no retorna nada (retorna void)
                        
                        VarLocation.resetOffset();
                        //si el id leido es "main"
                        if(d.toString().equals("main")){
                            //marcamos que se encontro un metodo main (almenos)
                            mainDeclared=true;
                        } 
                        //creamos el objeto metodo en el nivel corriente
                        TS.agregarMetodo(Type.VOID, d.toString());

                        //CODIGO TRES DIRECCIONES
                        String labelBeginMethod="BeginMethod "+d;
                        TripletList.addLast(new TripletCode(TripletOperator.LABEL, null,null, labelBeginMethod));
                        //FIN CODIGO TRES DIRECCIONES
               :} parameters {: //luego de leer los parametros
                        //obtenemos el ultimo metodo creado ya que son sus parametros 
                        Metodo e=TS.obtenerMetodo();
                        ult_metodo=e;

                        //agregamos el metodo CODIGO TRES DIRECCIONES
                        TripletList.addLast(new TripletCode(TripletOperator.METHODDECL,ult_metodo,null,null));

                        //agregamos un nuevo nivel al arbol
                        TS.agregarNivel();
                        //si el ultimo metodo leido no es main
                        if(!ult_metodo.getName().equals("main")){
                            //agregamos todo parametro como variable dentro de un nuevo nivel
                            //el cual corresponde al cuerpo del metodo leido
                            for(int i=0; i<e.getParametros().size(); i++){
                                Simbolo actual = e.getParametros().get(i);
                                TS.agregarSimbolo(actual.getType(), actual.getName(), actual.getValue(), actual.getSize(),i);
                            }
                        }else{//sino, si el metodo leido fue main
                        //verificamos que no tiene parametros, ya que main no debe tener parametros
                            if(ult_metodo.getParametros().size()!=0){
                                System.out.println("Error: Method Main must not have parameters");
                                
                            //marcamos que el metodo leido es main pero al no ser correcto, no es valido
                                mainDeclared=false;
                            }
                        }
               :} block {:

                        String labelEndMethod="EndMethod "+d;
                        //label de fin de metodo (CODIGO TRES DIRECCIONES)
                        TripletList.addLast(new TripletCode(TripletOperator.LABEL, null,null, labelEndMethod));
                        //reseteamos la generacion de offsets al salir del cuerpo de un metodo
                        VarLocation.resetOffset();
                        //luego de terminar de procesar el cuerpo del metodo, subimos de nivel dentro del arbol
                        TS.SubirNivel(); :}
               | type:t ID:g {:
                            //si el metodo se llama main marcamos que leimos el metodo main
                            VarLocation.resetOffset();
                            if(g.toString().equals("main")){
                                mainDeclared=true;
                            } 
                            //creamos el metodo correspondiente, segun el tipo leido y su nombre
                            switch (tipo_corriente){
                                  case INT:
                                            TS.agregarMetodo(Type.INT, g.toString());
                                            break;
                                  case FLOAT:
                                            TS.agregarMetodo(Type.FLOAT, g.toString());  
                                            break;
                                  case BOOLEAN:
                                            TS.agregarMetodo(Type.BOOLEAN, g.toString()); 
                                            break;
                             }

                            String labelBeginMethod="BeginMethod "+g;
                            TripletList.addLast(new TripletCode(TripletOperator.LABEL,null,null,labelBeginMethod));


                             :} parameters {:
                            //buscamos el ult metodo leido, luego de agregarle sus parametros
                            Metodo e=TS.obtenerMetodo();
                            ult_metodo=TS.obtenerMetodo();  

                            //agregamos el metodo CODIGO TRES DIRECCIONES
                            TripletList.addLast(new TripletCode(TripletOperator.METHODDECL,ult_metodo,null,null));

                            //agregamos un nuevo nivel en el arbol, para el cuerpo del metodo
                            TS.agregarNivel();
                            //si el ultimo metodo leido no es main
                            if(!ult_metodo.getName().equals("main")){
                            //agregamos todo parametro como variable dentro de un nuevo nivel
                            //el cual corresponde al cuerpo del metodo leido
                                for(int i=0; i<e.getParametros().size(); i++){
                                Simbolo actual = e.getParametros().get(i);
                                TS.agregarSimbolo(actual.getType(), actual.getName(), actual.getValue(), actual.getSize(),i);
                                }
                            }else{//sino, si el metodo leido fue main
                                //verificamos que no tiene parametros, ya que main no debe tener parametros
                                if(ult_metodo.getParametros().size()!=0){
                                    System.out.println("Error: Method Main must not have parameters");
                                    
                                    //marcamos que el metodo leido es main pero al no ser correcto, no es valido
                                    mainDeclared=false;
                                }
                            }
                :} block {:
                            String labelEndMethod="EndMethod "+g;
                            TripletList.addLast(new TripletCode(TripletOperator.LABEL,null,null,labelEndMethod));
                            //reseteamos la generacion de offsets al salir del cuerpo de un metodo
                            VarLocation.resetOffset();
                             //al terminar de procesar el cuerpo del metodo subimos de nivel
                            TS.SubirNivel();
                :}
               ;

    block::= LLAVE_IZQ LLAVE_DER
         | LLAVE_IZQ statements LLAVE_DER
         | LLAVE_IZQ fieldDeclarations LLAVE_DER
         | LLAVE_IZQ fieldDeclarations statements LLAVE_DER
         ;


    parameters::= PARENTESIS_IZQ PARENTESIS_DER
              | PARENTESIS_IZQ parameterDeclarations PARENTESIS_DER
              ;
                

    parameterDeclarations::= parameterDeclaration
                         | parameterDeclarations COMA parameterDeclaration
                         ;

    parameterDeclaration::= type ID:a {: //creamos el nuevo simbolo con el tipo e id leidos 
                                        Simbolo sym = new Simbolo(tipo_corriente, a.toString(), null, 0,0); 
                                        //y lo agregamos como parametro al ultimo metodo leido
                                        TS.obtenerMetodo().addParametro(sym); :}
                        ;

    statements::= statement
              | statements statement
              ;
                        
    type::= INT {:tipo_corriente = Type.INT; :} 
        | FLOAT {:tipo_corriente = Type.FLOAT; :}
        | BOOLEAN {:tipo_corriente = Type.BOOLEAN; :}
        ;

    statement::= location:l assign_op:ao expr:e PUNTO_Y_COMA {:
                                                            if(e.getExpr() instanceof MethodCallExpr){ //si la expression es una llamada a un metodo
                                                                //buscamos el metodo al cual se llama y verificamos que
                                                                //el tipo que retorna, concuerde con el tipo de la location en donde se 
                                                                //desea asignar
                                                                MethodCallExpr actual=(MethodCallExpr) e.getExpr();
                                                                LinkedList<Type> tipoArgumentos=new LinkedList();
                                                                //buscamos los tipos de todos los argumentos de la llamada al metodo
                                                                for(int j=0; j<actual.getArgs().size(); j++){
                                                                    tipoArgumentos.addLast(actual.getArgs().get(j).getType());
                                                                }
                                                                //buscamos el metodo por su id y por los tipos de los parametros pasados
                                                                Metodo m= TS.buscarMetodo(actual.getName(), tipoArgumentos);
                                                                if(l.getType().equals(m.getTypeReturn()) && ao.toString().equals("=") || 
                                                                    ((l.getType().equals(Type.FLOAT) || l.getType().equals(Type.FLOATARRAY)) && 
                                                                        (m.getTypeReturn().equals(Type.INT) || m.getTypeReturn().equals(Type.INTARRAY) )) && 
                                                                        (!l.getType().isArray())){ //si se realiza una asignacion con tipos identicos de location y expression (no array)
                                                                    AssignStmt a=new AssignStmt((Location)l, AssignOpType.ASSIGN, (Expression) e.getExpr());
                                                                    //CODIGO DE TRES DIRECCIONES
                                                                    TripletList.addLast(new TripletCode(TripletOperator.ASSIGN,e, null,(VarLocation)l));
                                                                    //FIN CODIGO TRES DIRECCIONES
                                                                    RESULT=a; 
                                                                }else{
                                                                    //si location es un array
                                                                    if(l.getType().isArray()){
                                                                        //arreglo de enteros expresion entero
                                                                        switch(l.getType()){
                                                                            //caso arreglo de enteros con valor entero
                                                                            case INTARRAY:
                                                                                if(m.getTypeReturn().equals(Type.INT)){
                                                                                    AssignStmt a=new AssignStmt((Location)l, ao, (Expression) e.getExpr()); 
                                                                                    //l.setExpr(e.getExpr());
                                                                                    //CODIGO DE TRES DIRECCIONES
                                                                                    switch(ao){
                                                                                        case ASSIGN:TripletList.addLast(new TripletCode(TripletOperator.ASSIGN,e.getExpr(), null,(VarLocation)l));
                                                                                            break;
                                                                                        case INCREMENT:TripletList.addLast(new TripletCode(TripletOperator.INCREMENT,e.getExpr(), null,(VarLocation)l));
                                                                                            break;
                                                                                        case DECREMENT:TripletList.addLast(new TripletCode(TripletOperator.DECREMENT,e.getExpr(), null,(VarLocation)l));
                                                                                            break;
                                                                                    }
                                                                                    //FIN CODIGO TRES DIRECCIONES
                                                                                    RESULT=a; 
                                                                                }else{
                                                                                    System.out.println("Error: int expected but "+m.getTypeReturn()+" found");
                                                                                    
                                                                                }
                                                                                break;
                                                                            //caso arreglo de reales (floatarray) con valor real (float)
                                                                            case FLOATARRAY:
                                                                                if(m.getTypeReturn().equals(Type.FLOAT) || m.getTypeReturn().equals(Type.INT)){
                                                                                    AssignStmt a=new AssignStmt((Location)l, ao, (Expression) e.getExpr()); 
                                                                                    //l.setExpr(e.getExpr());
                                                                                    //CODIGO DE TRES DIRECCIONES
                                                                                    switch(ao){
                                                                                        case ASSIGN:TripletList.addLast(new TripletCode(TripletOperator.ASSIGN,e.getExpr(), null,(VarLocation)l));
                                                                                            break;
                                                                                        case INCREMENT:TripletList.addLast(new TripletCode(TripletOperator.INCREMENT,e.getExpr(), null,(VarLocation)l));
                                                                                            break;
                                                                                        case DECREMENT:TripletList.addLast(new TripletCode(TripletOperator.DECREMENT,e.getExpr(), null,(VarLocation)l));
                                                                                            break;
                                                                                    }
                                                                                    //FIN CODIGO TRES DIRECCIONES
                                                                                    RESULT=a; 
                                                                                }else{
                                                                                    System.out.println("Error: float expected but "+m.getTypeReturn()+" found");
                                                                                    
                                                                                }
                                                                                break;
                                                                            //caso arreglo de boolean con valor booleano
                                                                            case BOOLARRAY:
                                                                                if(m.getTypeReturn().equals(Type.BOOLEAN)){
                                                                                    if(ao.toString().equals("=")){
                                                                                        AssignStmt a=new AssignStmt((Location)l, AssignOpType.ASSIGN, (Expression) e.getExpr()); 
                                                                                        //l.setExpr(e.getExpr());
                                                                                        //CODIGO DE TRES DIRECCIONES
                                                                                        TripletList.addLast(new TripletCode(TripletOperator.ASSIGN,e, null,(VarLocation)l));
                                                                                        //FIN CODIGO TRES DIRECCIONES
                                                                                        RESULT=a;
                                                                                    }else{
                                                                                        System.out.println("Error: "+ao+" operation not valid for boolean values");
                                                                                        
                                                                                    }
                                                                                }else{
                                                                                    System.out.println("Error: int expected but "+m.getTypeReturn()+" found");
                                                                                    
                                                                                }
                                                                                break;
                                                                            }
                                                                    }else{
                                                                        System.out.println("{MethodCallExpr} Error: invalid assign operation in "+l.getId()+", "+l.getType()+" "+ao+" "+m.getTypeReturn());
                                                                        
                                                                    }
                                                                }
                                                           }else{// si la expression no es una llamada a un metodo
                                                                //Si el tipo de la variable y la expresion son el mismo o la variable es float o floatarray el la expresion INT o INTARRAY
                                                                if(
                                                                    (
                                                                    (l.getType().equals(e.getType()) && ao.toString().equals("="))       
                                                                || 
                                                                    
                                                                    ((l.getType().equals(Type.FLOAT) || l.getType().equals(Type.INT)) && (e.getType().equals(Type.INT) || e.getType().equals(Type.INTARRAY) || e.getType().equals(Type.FLOATARRAY) || e.getType().equals(Type.FLOAT)))
                                                                    )
                                                                && 
                                                                        
                                                                    (!l.getType().isArray())

                                                                ){ //si se realiza una asignacion con tipos identicos de location y expression (no array)
                                                                    AssignStmt a=new AssignStmt((Location)l, AssignOpType.ASSIGN, (Expression) e.getExpr()); 
                                                                    //CODIGO DE TRES DIRECCIONES
                                                                    switch(ao){
                                                                        case ASSIGN:TripletList.addLast(new TripletCode(TripletOperator.ASSIGN,e.getExpr(), null,(VarLocation)l));
                                                                            break;
                                                                        case INCREMENT:TripletList.addLast(new TripletCode(TripletOperator.INCREMENT,e.getExpr(), null,(VarLocation)l));
                                                                            break;
                                                                        case DECREMENT:TripletList.addLast(new TripletCode(TripletOperator.DECREMENT,e.getExpr(), null,(VarLocation)l));
                                                                            break;
                                                                    }
                                                                    //FIN CODIGO TRES DIRECCIONES
                                                                    RESULT=a; 
                                                                }else{
                                                                    
                                                                    //si location es un array
                                                                    
                                                                    if(l.getType().isArray()){
                                                                        //arreglo de enteros expresion entero
                                                                        switch(l.getType()){
                                                                            //caso arreglo de enteros con valor entero
                                                                            case INTARRAY:
                                                                                if(e.getType().equals(Type.INT)){
                                                                                    AssignStmt a=new AssignStmt((Location)l, ao, (Expression) e.getExpr()); 
                                                                                    //CODIGO DE TRES DIRECCIONES
                                                                                    switch(ao){
                                                                                        case ASSIGN:TripletList.addLast(new TripletCode(TripletOperator.ASSIGN,e.getExpr(), null,(VarLocation)l));
                                                                                            break;
                                                                                        case INCREMENT:TripletList.addLast(new TripletCode(TripletOperator.INCREMENT,e.getExpr(), null,(VarLocation)l));
                                                                                            break;
                                                                                        case DECREMENT:TripletList.addLast(new TripletCode(TripletOperator.DECREMENT,e.getExpr(), null,(VarLocation)l));
                                                                                            break;
                                                                                    }
                                                                                    //FIN CODIGO TRES DIRECCIONES
                                                                                    RESULT=a; 
                                                                                }else{
                                                                                    System.out.println("Error: int expected but "+e.getType()+" found");
                                                                                    
                                                                                }
                                                                                break;
                                                                            // caso arreglo de reales con valor real
                                                                            case FLOATARRAY:
                                                                                if(e.getType().equals(Type.FLOAT) || e.getType().equals(Type.INT)){
                                                                                    AssignStmt a=new AssignStmt((Location)l, ao, (Expression) e.getExpr()); 
                                                                                    //l.setExpr(e.getExpr());
                                                                                    //CODIGO DE TRES DIRECCIONES
                                                                                    switch(ao){
                                                                                        case ASSIGN:TripletList.addLast(new TripletCode(TripletOperator.ASSIGN,e.getExpr(), null,(VarLocation)l));
                                                                                            break;
                                                                                        case INCREMENT:TripletList.addLast(new TripletCode(TripletOperator.INCREMENT,e.getExpr(), null,(VarLocation)l));
                                                                                            break;
                                                                                        case DECREMENT:TripletList.addLast(new TripletCode(TripletOperator.DECREMENT,e.getExpr(), null,(VarLocation)l));
                                                                                            break;
                                                                                    }
                                                                                    //FIN CODIGO TRES DIRECCIONES
                                                                                    RESULT=a; 
                                                                                }else{
                                                                                    System.out.println("Error: float expected but "+e.getType()+" found");
                                                                                    
                                                                                }
                                                                                break;
                                                                            //caso arreglo de boolean con valor booleano
                                                                            case BOOLARRAY:
                                                                                if(e.getType().equals(Type.BOOLEAN)){
                                                                                    if(ao.toString().equals("=")){
                                                                                        AssignStmt a=new AssignStmt((Location)l, AssignOpType.ASSIGN, (Expression) e.getExpr()); 
                                                                                        //l.setExpr(e.getExpr());
                                                                                        //CODIGO DE TRES DIRECCIONES
                                                                                        TripletList.addLast(new TripletCode(TripletOperator.ASSIGN,e, null,(VarLocation)l));
                                                                                        //FIN CODIGO TRES DIRECCIONES
                                                                                        RESULT=a;
                                                                                    }else{
                                                                                        System.out.println("Error: "+ao+" operation not valid for boolean values");
                                                                                        
                                                                                    }
                                                                                }else{
                                                                                    System.out.println("Error: int expected but "+e.getType()+" found");
                                                                                    
                                                                                }
                                                                                break;
                                                                            }
                                                                    }else{
                                                                        System.out.println("Error: invalid assign operation in "+l+" "+ao+" "+e.getExpr());
                                                                        
                                                                    }
                                                                }
                                                           }
                                                                
                                                             :}
             | method_call:m PUNTO_Y_COMA {: RESULT=m; :}
             | IF PARENTESIS_IZQ {://agregamos un nuevo nivel al arbol para el cuerpo del if
                 TS.agregarNivel(); :} expr:e {: 
                    //creamos y agregamos los label de salto por falso y fin de if
                    String labelElse = "elseCond"+Labels.getLabel(); 
                    IfsStack.addLast(labelElse); //get(size-2)
                    String labelEndIf = "endIf"+Labels.getLabel();
                    IfsStack.addLast(labelEndIf); //getLast
                    //agrego la comparacion de la cond (expr) con true
                    TripletList.addLast(new TripletCode(TripletOperator.CMP, e, true, null));
                    //si la condicion es falsa salto al else
                    TripletList.addLast(new TripletCode(TripletOperator.JNE, null, null, labelElse));

                :} PARENTESIS_DER block:ifBlock {: /*subimos de nivel luego del bloque if*/TS.SubirNivel(); 
                    //saltamos al final del if
                    TripletList.addLast(new TripletCode(TripletOperator.JMP, null, null, IfsStack.getLast()));
                    //agregamos un label para el salto a else
                    TripletList.addLast(new TripletCode(TripletOperator.LABEL, null,null, IfsStack.get(IfsStack.size()-2)));
                :} else_block:elseBlock {: 
                    //luego de procesar el bloque else (el cual es opcional)
                    if(e.getType().equals(Type.BOOLEAN)){ //si la expression es de tipo boolean
                        IfStmt res=null;
                        if(elseBlock!=null){ //si tiene else block
                            res=new IfStmt(e.getExpr(),ifBlock,elseBlock);
                        }else{//si no tiene else block
                            res=new IfStmt(e.getExpr(), ifBlock);
                        }
                        //agregamos el label del fin del if
                        TripletList.addLast(new TripletCode(TripletOperator.LABEL, null,null, IfsStack.getLast()));
                        //removemos los labels creados al principio ya que no son de utilidad
                        IfsStack.removeLast();
                        IfsStack.removeLast();
                        

                        RESULT=res;
                    }else{//si la expression no es de tipo boolean se muestra un mensaje de error
                        System.out.println("Error: Expression in If-Else statement must be Boolean");
                        
                    } 
                :}
             | FOR ID:id ASIGNACION expr:e1 COMA expr:e2 {: 
                    String BeginFor = "BeginFor"+Labels.getLabel(); //get(size-2)
                    ForsStack.addLast(BeginFor);

                    String EndFor = "EndFor"+Labels.getLabel(); //getLast()
                    ForsStack.addLast(EndFor);
                    
                    //creamos LABEL para el Begin del for
                    TripletList.addLast(new TripletCode(TripletOperator.LABEL, null, null, BeginFor));
                    //comparamos las dos expresiones
                    TripletList.addLast(new TripletCode(TripletOperator.CMP, e1, e2, null));
                    //si la primer expresion no es menor a la segunda, saltamos al final del ciclo
                    TripletList.addLast(new TripletCode(TripletOperator.JNL, null, null, EndFor));
                    TS.agregarNivel(); 
                    inLoop=true; 
                :}  block:b {:

                    // Incrementa el contador
                    TripletList.addLast(new TripletCode(TripletOperator.PLUS, e1, new IntLiteral("1"), e1));
                    //vuelve al inicio del ciclo (antes de la evaluacion de la condicion)
                    TripletList.addLast(new TripletCode(TripletOperator.JMP, null, null, ForsStack.get(ForsStack.size()-2)));
                    //agregamos el label de fin del for
                    TripletList.addLast(new TripletCode(TripletOperator.LABEL, null, null, ForsStack.getLast()));

                    //si las expresiones son de tipo entero o se accede a un arreglo de INT
                    if( ( (e1.getType().equals(Type.INT) || (e1.getType().equals(Type.INTARRAY)) ) && (e2.getType().equals(Type.INT) || (e2.getType().equals(Type.INTARRAY) ) ) ) ){
                        ForStmt forStmt=new ForStmt(id, e1.getExpr(), e2.getExpr(), b);
                        RESULT=forStmt;
                    }else{
                        System.out.println("Error: Expressions in For Statement must be Int");
                        
                    }
                    if(inLoop){
                        TS.SubirNivel();
                        inLoop=false;
                    }
                    ForsStack.removeLast();
                    ForsStack.removeLast();
                :}
             | WHILE expr:e 
                 {: 
                    String LabelBegin="BeginWhile"+Labels.getLabel();
                    WhilesStack.addLast(LabelBegin);//get(size-2)
                    String LabelEndWhile="EndWhile"+Labels.getLabel();
                    WhilesStack.addLast(LabelEndWhile);//getLast
                    //agregamos un nuevo nivel para el cuerpo del ciclo
                    TS.agregarNivel();
                    //agregamos el Label de Begin While
                    TripletList.addLast(new TripletCode(TripletOperator.LABEL, null,null, LabelBegin));
                    //agrego la comparacion de la cond (expr) con true
                    TripletList.addLast(new TripletCode(TripletOperator.CMP, e, true, null));
                    //si la condicion es falsa salto al else
                    TripletList.addLast(new TripletCode(TripletOperator.JNE, null, null, LabelEndWhile));

                    //marcamos que nos encontramos dentro de un ciclo para habilitar el uso de sentencias 
                    // BREAK y CONTINUE
                    inLoop=true;
                :} block:b {:
                    //si el tipo de la expression es correcto (es boolean)
                    if(e.getType().equals(Type.BOOLEAN)){
                        //creamos el while como tal
                        WhileStmt whileExpr=new WhileStmt(e.getExpr(), b);
                        //y lo retornamos como resultado
                        RESULT= whileExpr;
                    }else{
                        //sino, mostramos un mensaje de error
                        System.out.println("Error: Expression in While Statement must be Boolean");
                        
                    }
                    //luego de haber terminado de procesar el while por completo
                    if(inLoop){
                        //subimos de nivel en el arbol
                        TS.SubirNivel();
                        //marcamos que dejamos de estar en un ciclo
                        inLoop=false;
                    }
                    //salto al inicio del while(antes de evaluar la condicion)
                    TripletList.addLast(new TripletCode(TripletOperator.JMP, null, null, WhilesStack.get(WhilesStack.size()-2)));

                    //agregamos el LABEL de fin de While
                    TripletList.addLast(new TripletCode(TripletOperator.LABEL,null,null, WhilesStack.getLast())); 
                    WhilesStack.removeLast();
                    WhilesStack.removeLast();
                :}
             | RETURN PUNTO_Y_COMA {:
                                    //verificamos que el ultimo metodo leido (el cual se esta procesando)
                                    // retorne void
                                    if(!ult_metodo.getTypeReturn().equals(Type.VOID)){
                                        //si no lo hace, mostramos un mensaje de error
                                        System.out.println("Error: Method "+ult_metodo.getName()+" returns void ");
                                        
                                    }else{ 
                                        //sino creamos un returnstmt
                                        ReturnStmt res=new ReturnStmt();
                                        RESULT= res;
                                    }
                                         :}
             | RETURN expr:e PUNTO_Y_COMA {:
                                            //verificamos el tipo de la expression y segun el mismo verificamos si coincide con
                                            //el tipo retornado por el ultimo metodo leido
                                            switch(e.getType()){
                                                case INTARRAY: case INT:
                                                    if(ult_metodo.getTypeReturn().equals(Type.INT)){
                                                        //CODIGO TRES DIRECCIONES
                                                        TripletList.addLast(new TripletCode(TripletOperator.RETURN,null,null,e));
                                                        //FIN CODIGO TRES DIRECCIONES
                                                        RESULT=new ReturnStmt(e.getExpr());
                                                    }else{
                                                        System.out.println("Error: Method "+ult_metodo.getName()+" must return "+ult_metodo.getTypeReturn().toString());
                                                        
                                                    }
                                                    break;
                                                case BOOLARRAY: case BOOLEAN:
                                                    if(ult_metodo.getTypeReturn().equals(Type.BOOLEAN)){
                                                        //CODIGO TRES DIRECCIONES
                                                        TripletList.addLast(new TripletCode(TripletOperator.RETURN,null,null,e));
                                                        //FIN CODIGO TRES DIRECCIONES
                                                        RESULT=new ReturnStmt(e.getExpr());
                                                    }else{
                                                        System.out.println("Error: Method "+ult_metodo.getName()+" must return "+ult_metodo.getTypeReturn().toString());
                                                        
                                                    }
                                                    break;
                                                case FLOATARRAY: case FLOAT:
                                                    if(ult_metodo.getTypeReturn().equals(Type.FLOAT) ){
                                                        //CODIGO TRES DIRECCIONES
                                                        TripletList.addLast(new TripletCode(TripletOperator.RETURN,null,null,e));
                                                        //FIN CODIGO TRES DIRECCIONES
                                                        RESULT=new ReturnStmt(e.getExpr());
                                                    }else{
                                                        System.out.println("Error: Method "+ult_metodo.getName()+" must return "+ult_metodo.getTypeReturn().toString());
                                                        
                                                    }
                                                    break;
                                            }
                                            :}
             |  BREAK PUNTO_Y_COMA {://si nos encontramos dentro de un ciclo es valido utilizar la sentencia BREAK
                                    if(!inLoop){ 
                                        //si no lo estamos, mostramos un mensaje de error
                                        System.out.println("Error: Break statement must be in a Loop");
                                        
                                    }else{
                                        //en presencia de un break se salta al final del ciclo while en que nos situamos actualmente
                                        TripletList.addLast(new TripletCode(TripletOperator.JMP,null,null, WhilesStack.getLast()));
                                        BreakStmt res=new BreakStmt(); 
                                        RESULT=res;
                                    } :}
             | CONTINUE PUNTO_Y_COMA {: //si nos encontramos en un ciclo es valido utilizar la sentencia CONTINUE
                                        if(!inLoop){ 
                                            //si no lo estamos, mostramos un mensaje de error
                                            System.out.println("Error: Continue statement must be in a Loop");
                                            
                                        }else{
                                            TripletList.addLast(new TripletCode(TripletOperator.JMP,null,null, WhilesStack.get(WhilesStack.size()-2)));
                                            ContinueStmt res=new ContinueStmt(); 
                                            RESULT=res;
                                        }  :}
             | PUNTO_Y_COMA {: SemiColonStmt res=new SemiColonStmt();RESULT=res; :}
             | {: TS.agregarNivel(); :}  block {: TS.SubirNivel(); :}
             ;

    else_block::= ELSE {: TS.agregarNivel(); :} block {: TS.SubirNivel(); :} 
              |
              ;

    assign_op::= ASIGNACION {: RESULT= AssignOpType.ASSIGN; :}
             | INCREMENTO {: RESULT= AssignOpType.INCREMENT; :}
             | DECREMENTO {: RESULT= AssignOpType.DECREMENT; :}
             ;

    method_call::= ID:id PARENTESIS_IZQ PARENTESIS_DER {:
                    //llamada a metodo sin parametros
                    //buscamos el metodo por su id y con su lista de parametros vacia (ya que tecnicamente no tiene parametros)
                    Metodo m=TS.buscarMetodo(id, new LinkedList());
                    if(m!= null){
                        //si el metodo fue encontrado creamos y retornamos una nueva MethodCallExpr
                        MethodCallExpr res=new MethodCallExpr(m.getName(), new LinkedList()); 
                        res.setType(m.getTypeReturn());
                        //CODIGO DE 3 DIRECCIONES //!!VERIFICAR 
                        String resultLabel="RESULT"+Labels.getLabel();
                        TripletList.addLast(new TripletCode(TripletOperator.METHODCALL, m.getName(), 0,resultLabel));
                        //FIN CODIGO 3 DIRECCIONES
                        RESULT=res;
                    }else{
                        //sino mostramos un mensaje de error indicando que el metodo no fue declarado
                        System.out.println("Error: Method "+id+" not declared");
                        
                    }
                    :}
               |  ID:id PARENTESIS_IZQ expressions:args PARENTESIS_DER {:
                    //llamada a metodo con parametros
                    LinkedList<Type> argsType=new LinkedList();
                    //obtenemos el tipo de cada parametro
                    for(int i=0; i<args.size(); i++){
                        //si alguno de los parametros es una llamada a un metodo
                        if(args.get(i).getExpr() instanceof MethodCallExpr){
                            MethodCallExpr actual=(MethodCallExpr) args.get(i).getExpr();
                            LinkedList<Type> tipoArgumentos=new LinkedList();
                            for(int j=0; j<actual.getArgs().size(); j++){
                                tipoArgumentos.addLast(actual.getArgs().get(j).getType());
                            }
                            //y buscamos el metodo por su nombre y la lista de tipos de los parametros dados
                            Metodo m= TS.buscarMetodo(actual.getName(), tipoArgumentos);
                            //y guardamos el tipo que retorna el metodo como tipo de parametro
                            argsType.addLast(m.getTypeReturn());
                        }else{
                            //sino, si es una variable, buscamos su tipo y lo guardamos
                            argsType.addLast(args.get(i).getType());
                        }

                    }
                    //buscamos el metodo por su id y la lista de tipos de parametros
                    Metodo m=TS.buscarMetodo(id, argsType);
                    //si se encontro el metodo
                    if(m!= null){
                        //creamos y retornamos una nueva MethodCallExpr
                        MethodCallExpr res=new MethodCallExpr(m.getName(), args); 
                        res.setType(m.getTypeReturn());
                        //CODIGO DE 3 DIRECCIONES //!!VERIFICAR 
                        //agregamos los parametros del metodo a la pila
                        TripletList.addLast(new TripletCode(TripletOperator.PARAM, null,null,args));
                        //agregamos la llamada al metodo
                        String resultLabel="RESULT"+Labels.getLabel();
                        TripletList.addLast(new TripletCode(TripletOperator.METHODCALL, m.getName(), argsType.size(),resultLabel));
                        //FIN CODIGO 3 DIRECCIONES
                        RESULT=res;
                    }else{
                        //sino mostramos un mensaje de error indicando que el metodo no fue declarado
                        System.out.println("Error: Method "+id+" not declared");
                        
                    }
                    :}
               |  EXTERNINVK PARENTESIS_IZQ STRING_LITERAL:s COMA type_or_void:t COMA externinvk_args:args PARENTESIS_DER {:
                        ExternInvkExpr res=new ExternInvkExpr(s,args,t);
                        //CODIGO DE 3 DIRECCIONES
                        String resultLabel="EXTERNINVK"+Labels.getLabel();
                        TripletList.addLast(new TripletCode(TripletOperator.EXTERNINVK, res,null,resultLabel));//!!VERIFICAR 
                        //FIN CODIGO 3 DIRECCIONES
                        RESULT=res;
                    :}
               |  EXTERNINVK PARENTESIS_IZQ STRING_LITERAL:s COMA type_or_void:t PARENTESIS_DER {: 
                    ExternInvkExpr res=new ExternInvkExpr(s,new LinkedList(),t);
                    //CODIGO DE 3 DIRECCIONES
                    String resultLabel="EXTERNINVK"+Labels.getLabel(); 
                    TripletList.addLast(new TripletCode(TripletOperator.EXTERNINVK, res,null,resultLabel)); //!!VERIFICAR 
                    //FIN CODIGO 3 DIRECCIONES
                    RESULT=res;
                :}
               ;

    type_or_void::= type:t {:RESULT=tipo_corriente;:}
                | VOID {:RESULT=Type.VOID;:}
                ;

    expressions::= expr:e {: LinkedList<Expression> listExpr=new LinkedList(); listExpr.add(e.getExpr()); RESULT=listExpr; :}
               | expressions:list COMA expr:e {:list.add(e.getExpr()); RESULT=list; :}
               ;

    externinvk_args::= externinvk_arg:arg {:LinkedList<Expression> listExpr=new LinkedList();listExpr.add(arg);RESULT=listExpr; :}
                   | externinvk_args:list COMA externinvk_arg:arg {:list.add(arg); RESULT=list;  :}
                   ;

    externinvk_arg::= expr:e {: RESULT=e.getExpr();:}
                  | STRING_LITERAL:str {: StringLiteral s=new StringLiteral(str); RESULT=s;:}
                  ;

    location::= ID:id {:
                            Simbolo s=TS.buscarSimbolo((String)id); 
                            if(s==null){
                                System.out.println("Error: Variable "+id+" not found");
                            }else{
                                VarLocation v=new VarLocation((String)id,s.getType(),null,s.getSize(),s.getOffset());
                                
                                v.setType(s.getType());
                                RESULT=v ;
                            }
                 :} //usos de variables
            | ID:id CORCHETE_IZQ expr:e CORCHETE_DER {: 

                    Simbolo s=TS.buscarSimbolo((String)id);
                    if(s==null){
                        System.out.println("Error: Variable "+id+" not found");
                        
                    }else{
                        //si el simbolo es un arreglo
                        if(s.getType().isArray()){
                            //si la expression es una expresion binaria
                            if(e.getExpr() instanceof BinOpExpr){
                                if(!e.getType().equals(Type.INT)){
                                    System.out.println("Error: expression in array must be int");
                                    
                                }else{
                                    VarLocation v=new VarLocation((String)id,s.getType(),e,s.getSize(),s.getOffset());
                                    
                                    v.setType(s.getType());
                                    RESULT=v ;
                                }
                            }else{
                                if(!e.getType().equals(Type.INT)){
                                    System.out.println("Error: expression in array must be int");
                                    
                                }else{
                                    IntLiteral e2=(IntLiteral) e.getExpr();
                                    if(e2.getValue()<0){
                                        System.out.println("Error: array index must be higher than zero");
                                        
                                    }else{
                                        VarLocation v=new VarLocation((String)id,s.getType(),e2,s.getSize(),s.getOffset());
                                        
                                        v.setType(s.getType());
                                        RESULT=v ;
                                    }
                                }
                            }
                        }else{
                            //sino mostramos un mensaje de error
                            System.out.println("Error: Variable "+id+" is not an array");
                            
                        }
                    }
                 :}
            ;

    expr::= conjunction:c {:RESULT=c; :}
        | expr:e DISYUNCION conjunction:c {:
                                            if(e.getType().equals(Type.BOOLEAN) && c.getType().equals(Type.BOOLEAN)){
                                                
                                                //CREO DEBERIA MODIFICAR QUE LE PASO, EN LUGAR DE LOS DOS EXPRESIONES, TAL VEZ
                                                //DEBERIA PASARLE EL OBJETO EN SI, EN ESTE CASO, e Y c COMO OBJETOS
                                                //Y NO SOLO SUS EXPRESIONES, Y LO MISMO CON EL RESTO DE LAS OPERACIONES LOGICAS

                                                BinOpExpr exp=new BinOpExpr(e.getExpr(),BinOpType.OR,c.getExpr());
                                                exp.setType(Type.BOOLEAN);

                                                VarLocation res=new VarLocation("DISYUNCION"+Labels.getLabel(),Type.BOOLEAN,exp,0);
                                                
                                                //CODIGO DE TRES DIRECCIONES
                                                TripletList.addLast(new TripletCode(TripletOperator.OR,e, c,res));
                                                //FIN CODIGO TRES DIRECCIONES
                                                RESULT=res;
                                            }else{
                                                System.out.println("Error: "+BinOpType.OR+"can only be applied to Boolean operands");
                                                
                                            }
                                             :}
        ;

    conjunction::= comparison:c {: RESULT=c; :}
               | conjunction:c1 CONJUNCION comparison:c2 {:
                                            if(c1.getType().equals(Type.BOOLEAN) && c2.getType().equals(Type.BOOLEAN)){
                                                
                                                BinOpExpr exp=new BinOpExpr(c1.getExpr(),BinOpType.AND,c2.getExpr());
                                                exp.setType(Type.BOOLEAN);
                                                VarLocation res=new VarLocation("CONJUNCION"+Labels.getLabel(),Type.BOOLEAN,exp,0);
                                                
                                                //CODIGO DE TRES DIRECCIONES
                                                TripletList.addLast(new TripletCode(TripletOperator.AND, c1, c2, res));
                                                //FIN CODIGO TRES DIRECCIONES
                                                RESULT=res;
                                            }else{
                                                System.out.println("Error: "+BinOpType.AND+"can only be applied to Boolean operands");
                                                
                                            }
                                             :}
               ;

    comparison::= relation:r {: RESULT=r; :}
              | relation:r1 IGUALDAD_LOGICA relation:r2 {: 
                                            //verificamos que el tipo de los operandos sean validos para la operacion
                                            if(logicValidOperators(r1,r2)){
                                                
                                                BinOpExpr exp= new BinOpExpr(r1.getExpr(),BinOpType.CEQ,r2.getExpr());
                                                exp.setType(Type.BOOLEAN);
                                                VarLocation res=new VarLocation("CEQ"+Labels.getLabel(),Type.BOOLEAN,exp,0);
                                                
                                                //CODIGO DE TRES DIRECCIONES
                                                TripletList.addLast(new TripletCode(TripletOperator.CEQ, r1, r2, res));
                                                //FIN CODIGO TRES DIRECCIONES
                                                RESULT=res;
                                            }else{
                                                //si no lo son mostramos un mensaje de error
                                                System.out.println("Error: "+BinOpType.CEQ+"can only be applied to Boolean/Int/Float operands");
                                                

                                            }
                                             :}
              | relation:r1 DIFERENCIA_LOGICA relation:r2 {:
                                                //verificamos que el tipo de los operandos sean validos para la operacion
                                            if( logicValidOperators(r1,r2)){
                                                
                                                BinOpExpr exp= new BinOpExpr(r1.getExpr(),BinOpType.NEQ,r2.getExpr());
                                                exp.setType(Type.BOOLEAN);
                                                VarLocation res=new VarLocation("NEQ"+Labels.getLabel(),Type.BOOLEAN,exp,0);
                                                
                                                //CODIGO DE TRES DIRECCIONES
                                                TripletList.addLast(new TripletCode(TripletOperator.NEQ, r1, r2, res));
                                                //FIN CODIGO TRES DIRECCIONES
                                                RESULT=res;
                                            }else{
                                                //si no lo son mostramos un mensaje de error
                                                System.out.println("Error: "+BinOpType.NEQ+"can only be applied to Boolean/Int/Float operands");
                                                

                                            }
                                             :}
              ;

    relation::= sum:s {:RESULT=s; :}
            | sum:s1 MENOR sum:s2 {:
                    //verificamos que el tipo de los operandos sean validos para la operacion
                                            if(validOperators(s1,s2)){
                                                
                                                BinOpExpr exp=new BinOpExpr(s1.getExpr(),BinOpType.LE,s2.getExpr());
                                                exp.setType(Type.BOOLEAN);
                                                VarLocation res=new VarLocation("LE"+Labels.getLabel(),Type.BOOLEAN,exp,0);
                                                
                                                //CODIGO DE TRES DIRECCIONES
                                                TripletList.addLast(new TripletCode(TripletOperator.LE, s1, s2, res));
                                                //FIN CODIGO TRES DIRECCIONES
                                                RESULT=res;
                                            }else{
                                                //si no lo son mostramos un mensaje de error
                                                System.out.println("Error: "+BinOpType.LE.toString()+" can only be applied to Int or Float values");                                            }
                                                

                                         :}
            | sum:s1 MAYOR sum:s2 {: 
                                     //verificamos que el tipo de los operandos sean validos para la operacion
                                            if(validOperators(s1,s2)){
                                                
                                                BinOpExpr exp=new BinOpExpr(s1.getExpr(),BinOpType.GE,s2.getExpr());
                                                exp.setType(Type.BOOLEAN);
                                                VarLocation res=new VarLocation("GE"+Labels.getLabel(),Type.BOOLEAN,exp,0);
                                                
                                                //CODIGO DE TRES DIRECCIONES
                                                TripletList.addLast(new TripletCode(TripletOperator.GE, s1, s2, res));
                                                //FIN CODIGO TRES DIRECCIONES
                                                RESULT=res;
                                            }else{
                                                //si no lo son mostramos un mensaje de error
                                                System.out.println("Error: "+BinOpType.GE.toString()+" can only be applied to Int or Float values");
                                                

                                            }
                                         :}
            | sum:s1 MAYOR_IGUAL sum:s2 {:
                                        //verificamos que el tipo de los operandos sean validos para la operacion
                                            if(validOperators(s1,s2)){
                                                
                                                BinOpExpr exp=new BinOpExpr(s1.getExpr(),BinOpType.GEQ,s2.getExpr());
                                                exp.setType(Type.BOOLEAN);
                                                VarLocation res=new VarLocation("GEQ"+Labels.getLabel(),Type.BOOLEAN,exp,0);
                                                
                                                //CODIGO DE TRES DIRECCIONES   
                                                TripletList.addLast(new TripletCode(TripletOperator.GEQ, s1,s2,res));
                                                //FIN CODIGO TRES DIRECCIONES
                                                RESULT=res;
                                            }else{
                                                //si no lo son mostramos un mensaje de error
                                                System.out.println("Error: "+BinOpType.GEQ.toString()+" can only be applied to Int or Float values");
                                                

                                            }
                                         :}
            | sum:s1 MENOR_IGUAL sum:s2 {: 
                                        //verificamos que el tipo de los operandos sean validos para la operacion
                                            if(validOperators(s1,s2)){
                                                
                                                BinOpExpr exp=new BinOpExpr(s1.getExpr(),BinOpType.LEQ,s2.getExpr());
                                                exp.setType(Type.BOOLEAN);
                                                VarLocation res=new VarLocation("LEQ"+Labels.getLabel(),Type.BOOLEAN,exp,0);
                                                
                                                //CODIGO DE TRES DIRECCIONES 
                                                TripletList.addLast(new TripletCode(TripletOperator.LEQ, s1, s2, res));
                                                //FIN CODIGO TRES DIRECCIONES
                                                RESULT=res;
                                            }else{
                                                //si no lo son mostramos un mensaje de error
                                                System.out.println("Error: "+BinOpType.LEQ.toString()+" can only be applied to Int or Float values");
                                                

                                            }
                                         :}
            ;

    sum::= term:t {: RESULT=t; :}
       | sum:s1 SUMA term:s2 {:
                                        //verificamos que el tipo de los operandos sean validos para la operacion
                                            if(validOperators(s1,s2)){
                                                if((s1.getType().equals(Type.INT) && s2.getType().equals(Type.INT))||
                                                (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INTARRAY)) ||
                                                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INTARRAY))||
                                                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INT))
                                                ){
                                                    
                                                    BinOpExpr exp=new BinOpExpr(s1.getExpr(),BinOpType.PLUS,s2.getExpr());
                                                    exp.setType(Type.INT);
                                                    VarLocation res=new VarLocation("PLUS"+Labels.getLabel(),Type.INT,exp,0);
                                                    
                                                    //CODIGO DE TRES DIRECCIONES
                                                    TripletList.addLast(new TripletCode(TripletOperator.PLUS, s1, s2, res));
                                                    //FIN CODIGO TRES DIRECCIONES
                                                    RESULT=res;
                                                }else{
                                                    BinOpExpr exp=new BinOpExpr(s1.getExpr(),BinOpType.PLUS,s2.getExpr());
                                                    exp.setType(Type.FLOAT);
                                                    VarLocation res=new VarLocation("PLUS"+Labels.getLabel(),Type.FLOAT,exp,0);
                                                    
                                                    //CODIGO DE TRES DIRECCIONES
                                                    TripletList.addLast(new TripletCode(TripletOperator.PLUS, s1, s2, res));
                                                    //FIN CODIGO TRES DIRECCIONES
                                                    RESULT=res;
                                                }
                                        }else{
                                            //si no lo son mostramos un mensaje de error
                                            System.out.println("Error: "+BinOpType.PLUS.toString()+" can only be applied to Int or Float values");
                                            

                                        }
                                         :}
       | sum:s1 RESTA term:s2 {:
                                    //verificamos que el tipo de los operandos sean validos para la operacion
                                            if(validOperators(s1,s2)){
                                                
                                                if((s1.getType().equals(Type.INT) && s2.getType().equals(Type.INT))||
                                                (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INTARRAY)) ||
                                                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INTARRAY))||
                                                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INT))
                                                ){
                                                BinOpExpr exp=new BinOpExpr(s1.getExpr(),BinOpType.MINUS,s2.getExpr());
                                                exp.setType(Type.INT);
                                                VarLocation res=new VarLocation("MINUS"+Labels.getLabel(),Type.INT,exp,0);
                                                
                                                //CODIGO DE TRES DIRECCIONES
                                                TripletList.addLast(new TripletCode(TripletOperator.MINUS, s1, s2, res));
                                                //FIN CODIGO TRES DIRECCIONES
                                                RESULT=res;
                                                }else{
                                                    BinOpExpr exp=new BinOpExpr(s1.getExpr(),BinOpType.MINUS,s2.getExpr());
                                                    exp.setType(Type.FLOAT);
                                                    VarLocation res=new VarLocation("MINUS"+Labels.getLabel(),Type.FLOAT,exp,0);
                                                    
                                                    //CODIGO DE TRES DIRECCIONES 
                                                    TripletList.addLast(new TripletCode(TripletOperator.MINUS, s1, s2, res));
                                                    //FIN CODIGO TRES DIRECCIONES
                                                    RESULT=res;
                                                }
                                        }else{
                                            //si no lo son mostramos un mensaje de error
                                            System.out.println("Error: "+BinOpType.MINUS.toString()+" can only be applied to Int or Float values");
                                            

                                        }
                                         :}
       ;

    term::= factor:f {: RESULT=f; :}
        | term:s1 MULTIPLICACION factor:s2 {: 
                                        //verificamos que el tipo de los operandos sean validos para la operacion
                                            if(validOperators(s1,s2)){
                                                
                                                if((s1.getType().equals(Type.INT) && s2.getType().equals(Type.INT))||
                                                (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INTARRAY)) ||
                                                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INTARRAY))||
                                                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INT))
                                                ){
                                                    BinOpExpr exp=new BinOpExpr(s1.getExpr(),BinOpType.MULTIPLY,s2.getExpr());
                                                    exp.setType(Type.INT);
                                                    VarLocation res=new VarLocation("MULTIPLY"+Labels.getLabel(),Type.INT,exp,0);
                                                    
                                                    //CODIGO DE TRES DIRECCIONES
                                                    TripletList.addLast(new TripletCode(TripletOperator.MULTIPLY, s1, s2, res));
                                                    //FIN CODIGO TRES DIRECCIONES
                                                    RESULT=res;
                                                }else{
                                                    BinOpExpr exp=new BinOpExpr(s1.getExpr(),BinOpType.MULTIPLY,s2.getExpr());
                                                    exp.setType(Type.FLOAT);
                                                    VarLocation res=new VarLocation("MULTIPLY"+Labels.getLabel(),Type.FLOAT,exp,0);
                                                    
                                                    //CODIGO DE TRES DIRECCIONES
                                                    TripletList.addLast(new TripletCode(TripletOperator.MULTIPLY, s1, s2, res));
                                                    //FIN CODIGO TRES DIRECCIONES
                                                    RESULT=res;
                                                }
                                        }else{
                                            //si no lo son mostramos un mensaje de error
                                            System.out.println("Error: "+BinOpType.MULTIPLY.toString()+" can only be applied to Int or Float values");
                                            

                                        }
                                         :}
        | term:s1 DIVISION factor:s2 {:
                                        //verificamos que el tipo de los operandos sean validos para la operacion
                                            if(validOperators(s1,s2)){
                                                
                                                if((s1.getType().equals(Type.INT) && s2.getType().equals(Type.INT))||
                                                (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INTARRAY)) ||
                                                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INTARRAY))||
                                                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INT))
                                                ){
                                                
                                                BinOpExpr exp=new BinOpExpr(s1.getExpr(),BinOpType.DIVIDE,s2.getExpr());     
                                                exp.setType(Type.INT);
                                                VarLocation res=new VarLocation("DIVIDE"+Labels.getLabel(),Type.INT,exp,0); 
                                                
                                                //CODIGO DE TRES DIRECCIONES
                                                TripletList.addLast(new TripletCode(TripletOperator.DIVIDE, s1, s2, res));          
                                                //FIN CODIGO TRES DIRECCIONES
                                                RESULT=res;
                                                }else{
                                                    BinOpExpr exp=new BinOpExpr(s1,BinOpType.DIVIDE,s2);
                                                    exp.setType(Type.FLOAT);
                                                    VarLocation res=new VarLocation("DIVIDE"+Labels.getLabel(),Type.FLOAT,exp,0);
                                                    
                                                    //CODIGO DE TRES DIRECCIONES
                                                    TripletList.addLast(new TripletCode(TripletOperator.DIVIDE, s1, s2, res));          
                                                    //FIN CODIGO TRES DIRECCIONES
                                                    RESULT=res;
                                                }
                                        }else{
                                            //si no lo son mostramos un mensaje de error
                                            System.out.println("Error: "+BinOpType.DIVIDE.toString()+" can only be applied to Int or Float values");
                                            

                                        }
                                         :}
        | term:s1 PORCENTAJE factor:s2 {: 
                                        //verificamos que el tipo de los operandos sean validos para la operacion
                                            if(    (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INT))||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INTARRAY)) ||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INTARRAY))||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INT))
                                            ){
                                               
                                                BinOpExpr exp=new BinOpExpr(s1.getExpr(),BinOpType.MOD,s2.getExpr());  
                                                exp.setType(Type.INT);                                            
                                                VarLocation res=new VarLocation("MOD"+Labels.getLabel(),Type.INT,exp,0);  
                                                                             
                                                //CODIGO DE TRES DIRECCIONES
                                                TripletList.addLast(new TripletCode(TripletOperator.MOD, s1, s2, res));                   
                                                //FIN CODIGO TRES DIRECCIONES
                                                RESULT=res;
                                            }else{
                                                //si no lo son mostramos un mensaje de error
                                                System.out.println("Error: "+BinOpType.MOD.toString()+" can only be applied to Int values");
                                                
                                            }
                                         :}
        ;

    factor::=literal:l {: 
            //si se leyo algun offset, es decir, se busco una variable ya declarada
            if(ultOffsetLeido!=0){
                VarLocation res=new VarLocation(ultVarLeida,l.getType(),l,0,ultOffsetLeido); 
                RESULT = res;
                ultOffsetLeido=0;
                ultVarLeida="";
            }else{
                VarLocation res;
                if(l instanceof VarLocation){
                    res=(VarLocation) l;
                    RESULT=res;
                }else{
                    res=new VarLocation("factor"+Labels.getLabel(),l.getType(),l,0);     
                    RESULT = res;
                }
            } 
        :}     
          | ADMIRACION factor:f {: 
                                    //verificamos que el operando sea valido para la operacion
                                    if(f.getType().equals(Type.BOOLEAN)){
                                        
                                        UnaryOpExpr u=new UnaryOpExpr(UnaryOpType.NON, f.getExpr());
                                        u.setType(Type.BOOLEAN);
                                        VarLocation res=new VarLocation("NON"+Labels.getLabel(),Type.BOOLEAN,u,0);
                                        //CODIGO DE TRES DIRECCIONES
                                        TripletList.addLast(new TripletCode(TripletOperator.NON, f, null, res));
                                        //FIN CODIGO TRES DIRECCIONES
                                        //u.setType(Type.BOOLEAN);
                                        RESULT=res;
                                    }else{
                                        //si no lo es mostramos un mensaje de error
                                        System.out.println("Error: Boolean expected but "+f.getType().toString()+" found.");
                                        
                                    } :}
          | RESTA factor:f {: 
                                //verificamos que el operando sea valido para la operacion
                                if(f.getType().equals(Type.FLOAT)){ 
                                        UnaryOpExpr u=new UnaryOpExpr(UnaryOpType.MINUS,f.getExpr());
                                        u.setType(Type.FLOAT);
                                        VarLocation res=new VarLocation("UNARYMINUS"+Labels.getLabel(),Type.FLOAT,u,0);
                                        //CODIGO DE TRES DIRECCIONES
                                        TripletList.addLast(new TripletCode(TripletOperator.UNARYMINUS, f, null, res));
                                        //FIN CODIGO TRES DIRECCIONES
                                        RESULT= res;
                                    }else{
                                        if(f.getType().equals(Type.INT)){                                        
                                            UnaryOpExpr u=new UnaryOpExpr(UnaryOpType.MINUS,f.getExpr());
                                            u.setType(Type.INT);
                                            VarLocation res=new VarLocation("UNARYMINUS"+Labels.getLabel(),Type.INT,u,0);
                                            
                                            //CODIGO DE TRES DIRECCIONES
                                            TripletList.addLast(new TripletCode(TripletOperator.UNARYMINUS, f, null, res));
                                            //FIN CODIGO TRES DIRECCIONES
                                            RESULT= res;
                                            
                                        }else{
                                            //si no lo es mostramos un mensaje de error
                                            System.out.println("Error: Numeral (int or float) expected but "+f.getType().toString()+" found.");
                                            
                                        }
                                    }   
                                     :}
          ;


    literal::= INT_LITERAL:i {:
                RESULT= new IntLiteral((String) i); 
                :} //entero
           | FLOAT_LITERAL:f {:
                RESULT= new FloatLiteral((String) f); 
                :} //real
           | bool_LITERAL:b {:
                RESULT = b;
                :} //boolean (valor logico)
           | ID:id {: Simbolo s=TS.buscarSimbolo(id); //identificador
                        //salvamos el offset y nombre de la ultima variable leida
                        ultOffsetLeido=s.getOffset();
                        ultVarLeida=s.getName();

                        switch(s.getType()){
                            case BOOLEAN:
                                if(s.getValue()==null){
                                    //System.out.println("crea BoolLiteral sin valor");
                                    RESULT= new BoolLiteral(false);
                                }else{
                                    //System.out.println("crea BoolLiteral con valor "+s.getValue());
                                    RESULT= new BoolLiteral(Boolean.valueOf(s.getValue()));
                                }
                                break;
                            case INT:
                                if(s.getValue()==null){
                                    //System.out.println("crea IntLiteral sin valor");
                                    RESULT= new IntLiteral("0");
                                }else{
                                    //System.out.println("crea IntLiteral con valor "+s.getValue());
                                    RESULT= new IntLiteral(s.getValue());
                                }
                                break;
                            case FLOAT:
                                if(s.getValue()==null){
                                    //System.out.println("crea FloatLiteral sin valor");
                                    RESULT= new FloatLiteral("0.0");
                                }else{
                                    //System.out.println("crea FloatLiteral con valor "+s.getValue());
                                    RESULT= new FloatLiteral(s.getValue());
                                }
                                break;
                            case STRING:
                                if(s.getValue()==null){
                                    //System.out.println("crea String sin valor");
                                    RESULT= new StringLiteral("");
                                }else{
                                    //System.out.println("crea String con valor "+s.getValue());
                                    RESULT= new StringLiteral(s.getValue());
                                }
                                break;
                        }
                     :}
           | ID:id CORCHETE_IZQ expr:e CORCHETE_DER {: //arreglo
                    Simbolo s=TS.buscarSimbolo((String)id);
                    if(s==null){
                        System.out.println("Error: Variable "+id+" not found");
                        
                    }else{
                        if(s.getType().isArray()){
                            if(!e.getType().equals(Type.INT)){
                                System.out.println("Error: expression in array must be int");
                                
                            }else{
                                VarLocation arrAccess=new VarLocation(id.toString(),s.getType(), e,0,s.getOffset());

                                String LabelArrayAccess="ArrayAccess"+Labels.getLabel();
                                TripletList.addLast(new TripletCode(TripletOperator.ARRAYACCESS,id, e,LabelArrayAccess));
                                RESULT= new ArrayLiteral((String)id, s.getSize(), s.getType());
                            }
                        }else{
                            System.out.println("Error: Variable "+id+" is not an array");
                            
                        }
                    }
                 :}
           | method_call:m {:RESULT=m;:} //llamada a metodo
           | PARENTESIS_IZQ expr:e PARENTESIS_DER {: RESULT=e; :} //expresion entre parentesis
           ;

    bool_LITERAL::= TRUE {:RESULT= new BoolLiteral(true); :} //true
                | FALSE {: RESULT= new BoolLiteral(false); :} //false
                ;




