
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 10 13:42:51 ART 2014
//----------------------------------------------------

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 10 13:42:51 ART 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\002\005\000\002\021" +
    "\004\000\002\043\002\000\002\021\006\000\002\023\003" +
    "\000\002\023\003\000\002\023\004\000\002\022\003\000" +
    "\002\022\004\000\002\003\005\000\002\025\003\000\002" +
    "\025\005\000\002\024\003\000\002\024\006\000\002\026" +
    "\003\000\002\026\004\000\002\044\002\000\002\045\002" +
    "\000\002\004\010\000\002\046\002\000\002\047\002\000" +
    "\002\004\010\000\002\005\004\000\002\005\005\000\002" +
    "\005\005\000\002\005\006\000\002\027\004\000\002\027" +
    "\005\000\002\030\003\000\002\030\005\000\002\031\004" +
    "\000\002\032\003\000\002\032\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\006\000\002" +
    "\007\004\000\002\007\010\000\002\007\011\000\002\007" +
    "\005\000\002\007\004\000\002\007\005\000\002\007\004" +
    "\000\002\007\004\000\002\007\003\000\002\007\003\000" +
    "\002\020\004\000\002\020\002\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\005\000\002\011" +
    "\006\000\002\011\012\000\002\011\010\000\002\017\003" +
    "\000\002\017\003\000\002\033\003\000\002\033\005\000" +
    "\002\034\003\000\002\034\005\000\002\014\003\000\002" +
    "\014\003\000\002\012\003\000\002\012\006\000\002\013" +
    "\003\000\002\013\005\000\002\035\003\000\002\035\005" +
    "\000\002\036\003\000\002\036\005\000\002\036\005\000" +
    "\002\042\003\000\002\042\005\000\002\042\005\000\002" +
    "\042\005\000\002\042\005\000\002\041\003\000\002\041" +
    "\005\000\002\041\005\000\002\040\003\000\002\040\005" +
    "\000\002\040\005\000\002\040\005\000\002\037\003\000" +
    "\002\037\004\000\002\037\004\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\006\000\002\015\003\000\002\015\005\000\002\016\003" +
    "\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\004\005\005\001\002\000\004\002\264\001" +
    "\002\000\004\012\006\001\002\000\004\042\010\001\002" +
    "\000\004\002\000\001\002\000\014\016\ufffe\043\012\051" +
    "\ufffe\052\ufffe\053\ufffe\001\002\000\012\016\016\051\013" +
    "\052\023\053\015\001\002\000\004\002\uffff\001\002\000" +
    "\010\012\uffdf\040\uffdf\047\uffdf\001\002\000\014\016\016" +
    "\043\ufffc\051\013\052\023\053\015\001\002\000\010\012" +
    "\uffdd\040\uffdd\047\uffdd\001\002\000\004\012\256\001\002" +
    "\000\004\043\255\001\002\000\004\012\254\001\002\000" +
    "\014\016\ufff2\043\ufff2\051\ufff2\052\ufff2\053\ufff2\001\002" +
    "\000\014\016\016\043\ufffb\051\013\052\023\053\015\001" +
    "\002\000\010\012\uffde\040\uffde\047\uffde\001\002\000\040" +
    "\004\ufff9\006\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\016" +
    "\ufff9\017\ufff9\041\ufff9\042\ufff9\043\ufff9\051\ufff9\052\ufff9" +
    "\053\ufff9\054\ufff9\001\002\000\014\016\ufff1\043\ufff1\051" +
    "\ufff1\052\ufff1\053\ufff1\001\002\000\004\012\027\001\002" +
    "\000\004\046\uffed\001\002\000\004\046\032\001\002\000" +
    "\004\042\uffec\001\002\000\012\047\035\051\013\052\023" +
    "\053\015\001\002\000\006\040\uffe4\047\uffe4\001\002\000" +
    "\004\012\042\001\002\000\004\042\uffe6\001\002\000\006" +
    "\040\037\047\040\001\002\000\010\051\013\052\023\053" +
    "\015\001\002\000\004\042\uffe5\001\002\000\006\040\uffe3" +
    "\047\uffe3\001\002\000\006\040\uffe2\047\uffe2\001\002\000" +
    "\004\042\044\001\002\000\036\004\060\006\050\011\065" +
    "\012\057\013\055\014\054\017\053\041\066\042\044\043" +
    "\064\051\013\052\023\053\015\054\062\001\002\000\014" +
    "\016\uffeb\043\uffeb\051\uffeb\052\uffeb\053\uffeb\001\002\000" +
    "\004\041\253\001\002\000\010\024\246\025\250\026\245" +
    "\001\002\000\004\041\244\001\002\000\030\004\uffe1\006" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\017\uffe1\041\uffe1" +
    "\042\uffe1\043\uffe1\054\uffe1\001\002\000\004\012\234\001" +
    "\002\000\024\010\106\012\101\015\077\021\112\046\100" +
    "\050\105\054\062\055\102\056\110\001\002\000\026\010" +
    "\106\012\101\015\077\021\112\041\227\046\100\050\105" +
    "\054\062\055\102\056\110\001\002\000\004\046\217\001" +
    "\002\000\030\004\uffd2\006\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\017\uffd2\041\uffd2\042\uffd2\043\uffd2\054\uffd2\001" +
    "\002\000\014\024\uffc0\025\uffc0\026\uffc0\044\214\046\123" +
    "\001\002\000\004\041\213\001\002\000\036\004\060\006" +
    "\050\011\065\012\057\013\055\014\054\017\053\041\066" +
    "\042\044\043\211\051\013\052\023\053\015\054\062\001" +
    "\002\000\004\046\170\001\002\000\030\004\060\006\050" +
    "\011\065\012\057\013\055\014\054\017\053\041\066\042" +
    "\044\043\166\054\062\001\002\000\042\004\uffea\006\uffea" +
    "\007\uffea\011\uffea\012\uffea\013\uffea\014\uffea\016\uffea\017" +
    "\uffea\041\uffea\042\uffea\043\uffea\051\uffea\052\uffea\053\uffea" +
    "\054\uffea\001\002\000\004\012\067\001\002\000\030\004" +
    "\uffd3\006\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\017\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\054\uffd3\001\002\000\004\024" +
    "\070\001\002\000\024\010\106\012\101\015\077\021\112" +
    "\046\100\050\105\054\062\055\102\056\110\001\002\000" +
    "\046\020\uffa3\021\uffa3\022\uffa3\023\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037" +
    "\uffa3\040\uffa3\041\uffa3\042\uffa3\045\uffa3\047\uffa3\001\002" +
    "\000\006\031\127\040\163\001\002\000\040\020\150\021" +
    "\147\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\153\035\151" +
    "\036\154\037\152\040\uffb7\041\uffb7\042\uffb7\045\uffb7\047" +
    "\uffb7\001\002\000\020\030\131\031\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\045\uffbe\047\uffbe\001\002\000\046\020\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041" +
    "\uffa6\042\uffa6\045\uffa6\047\uffa6\001\002\000\024\030\uffba" +
    "\031\uffba\032\143\033\144\040\uffba\041\uffba\042\uffba\045" +
    "\uffba\047\uffba\001\002\000\046\020\uffa1\021\uffa1\022\uffa1" +
    "\023\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034" +
    "\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1" +
    "\045\uffa1\047\uffa1\001\002\000\024\010\106\012\101\015" +
    "\077\021\112\046\100\050\105\054\062\055\102\056\110" +
    "\001\002\000\052\020\uffa5\021\uffa5\022\uffa5\023\uffa5\027" +
    "\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\044\124\045" +
    "\uffa5\046\123\047\uffa5\001\002\000\046\020\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8" +
    "\042\uffa8\045\uffa8\047\uffa8\001\002\000\046\020\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\045\uffaf\047\uffaf\001\002\000\046\020\uffb2" +
    "\021\uffb2\022\115\023\117\027\116\030\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\045\uffb2\047\uffb2\001\002\000\024\010" +
    "\106\012\101\015\077\021\112\046\100\050\105\054\062" +
    "\055\102\056\110\001\002\000\046\020\uffa0\021\uffa0\022" +
    "\uffa0\023\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\045\uffa0\047\uffa0\001\002\000\046\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033" +
    "\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab" +
    "\042\uffab\045\uffab\047\uffab\001\002\000\046\020\uffa7\021" +
    "\uffa7\022\uffa7\023\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041" +
    "\uffa7\042\uffa7\045\uffa7\047\uffa7\001\002\000\020\030\uffbc" +
    "\031\uffbc\040\uffbc\041\uffbc\042\uffbc\045\uffbc\047\uffbc\001" +
    "\002\000\024\010\106\012\101\015\077\021\112\046\100" +
    "\050\105\054\062\055\102\056\110\001\002\000\046\020" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\041\uffa9\042\uffa9\045\uffa9\047\uffa9\001\002\000\046" +
    "\020\uffaa\021\uffaa\022\uffaa\023\uffaa\027\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\045\uffaa\047\uffaa\001\002\000" +
    "\024\010\106\012\101\015\077\021\112\046\100\050\105" +
    "\054\062\055\102\056\110\001\002\000\024\010\106\012" +
    "\101\015\077\021\112\046\100\050\105\054\062\055\102" +
    "\056\110\001\002\000\024\010\106\012\101\015\077\021" +
    "\112\046\100\050\105\054\062\055\102\056\110\001\002" +
    "\000\046\020\uffad\021\uffad\022\uffad\023\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad" +
    "\037\uffad\040\uffad\041\uffad\042\uffad\045\uffad\047\uffad\001" +
    "\002\000\046\020\uffac\021\uffac\022\uffac\023\uffac\027\uffac" +
    "\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036" +
    "\uffac\037\uffac\040\uffac\041\uffac\042\uffac\045\uffac\047\uffac" +
    "\001\002\000\046\020\uffae\021\uffae\022\uffae\023\uffae\027" +
    "\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae" +
    "\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\045\uffae\047" +
    "\uffae\001\002\000\026\010\106\012\101\015\077\021\112" +
    "\046\100\047\134\050\105\054\062\055\102\056\110\001" +
    "\002\000\024\010\106\012\101\015\077\021\112\046\100" +
    "\050\105\054\062\055\102\056\110\001\002\000\006\031" +
    "\127\045\126\001\002\000\046\020\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4" +
    "\045\uffa4\047\uffa4\001\002\000\024\010\106\012\101\015" +
    "\077\021\112\046\100\050\105\054\062\055\102\056\110" +
    "\001\002\000\020\030\131\031\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\045\uffbd\047\uffbd\001\002\000\024\010\106\012\101" +
    "\015\077\021\112\046\100\050\105\054\062\055\102\056" +
    "\110\001\002\000\020\030\uffbb\031\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\045\uffbb\047\uffbb\001\002\000\010\031\127\040" +
    "\uffc6\047\uffc6\001\002\000\046\020\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\045\uffcc\047\uffcc\001\002\000\006\040\136\047\137\001" +
    "\002\000\024\010\106\012\101\015\077\021\112\046\100" +
    "\050\105\054\062\055\102\056\110\001\002\000\046\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\045\uffcb\047\uffcb\001\002\000\010" +
    "\031\127\040\uffc5\047\uffc5\001\002\000\006\031\127\047" +
    "\142\001\002\000\046\020\uffa2\021\uffa2\022\uffa2\023\uffa2" +
    "\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\045\uffa2" +
    "\047\uffa2\001\002\000\024\010\106\012\101\015\077\021" +
    "\112\046\100\050\105\054\062\055\102\056\110\001\002" +
    "\000\024\010\106\012\101\015\077\021\112\046\100\050" +
    "\105\054\062\055\102\056\110\001\002\000\020\030\uffb8" +
    "\031\uffb8\040\uffb8\041\uffb8\042\uffb8\045\uffb8\047\uffb8\001" +
    "\002\000\020\030\uffb9\031\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\045\uffb9\047\uffb9\001\002\000\024\010\106\012\101\015" +
    "\077\021\112\046\100\050\105\054\062\055\102\056\110" +
    "\001\002\000\024\010\106\012\101\015\077\021\112\046" +
    "\100\050\105\054\062\055\102\056\110\001\002\000\024" +
    "\010\106\012\101\015\077\021\112\046\100\050\105\054" +
    "\062\055\102\056\110\001\002\000\024\010\106\012\101" +
    "\015\077\021\112\046\100\050\105\054\062\055\102\056" +
    "\110\001\002\000\024\010\106\012\101\015\077\021\112" +
    "\046\100\050\105\054\062\055\102\056\110\001\002\000" +
    "\024\010\106\012\101\015\077\021\112\046\100\050\105" +
    "\054\062\055\102\056\110\001\002\000\030\020\150\021" +
    "\147\030\uffb4\031\uffb4\032\uffb4\033\uffb4\040\uffb4\041\uffb4" +
    "\042\uffb4\045\uffb4\047\uffb4\001\002\000\030\020\150\021" +
    "\147\030\uffb5\031\uffb5\032\uffb5\033\uffb5\040\uffb5\041\uffb5" +
    "\042\uffb5\045\uffb5\047\uffb5\001\002\000\030\020\150\021" +
    "\147\030\uffb3\031\uffb3\032\uffb3\033\uffb3\040\uffb3\041\uffb3" +
    "\042\uffb3\045\uffb3\047\uffb3\001\002\000\030\020\150\021" +
    "\147\030\uffb6\031\uffb6\032\uffb6\033\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\045\uffb6\047\uffb6\001\002\000\046\020\uffb1\021" +
    "\uffb1\022\115\023\117\027\116\030\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041" +
    "\uffb1\042\uffb1\045\uffb1\047\uffb1\001\002\000\046\020\uffb0" +
    "\021\uffb0\022\115\023\117\027\116\030\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\045\uffb0\047\uffb0\001\002\000\024\010" +
    "\106\012\101\015\077\021\112\046\100\050\105\054\062" +
    "\055\102\056\110\001\002\000\006\031\127\042\044\001" +
    "\002\000\030\004\uffd9\006\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\017\uffd9\041\uffd9\042\uffd9\043\uffd9\054\uffd9\001" +
    "\002\000\042\004\uffe9\006\uffe9\007\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\016\uffe9\017\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\001\002\000\030" +
    "\004\uffe0\006\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\017" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\054\uffe0\001\002\000\004" +
    "\057\171\001\002\000\004\040\172\001\002\000\012\016" +
    "\175\051\013\052\023\053\015\001\002\000\006\040\176" +
    "\047\177\001\002\000\006\040\uffc8\047\uffc8\001\002\000" +
    "\006\040\uffc7\047\uffc7\001\002\000\026\010\106\012\101" +
    "\015\077\021\112\046\100\050\105\054\062\055\102\056" +
    "\110\057\201\001\002\000\046\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\045\uffc9\047\uffc9\001\002\000\010\031\127\040\uffc2\047" +
    "\uffc2\001\002\000\006\040\uffc1\047\uffc1\001\002\000\006" +
    "\040\204\047\205\001\002\000\006\040\uffc4\047\uffc4\001" +
    "\002\000\026\010\106\012\101\015\077\021\112\046\100" +
    "\050\105\054\062\055\102\056\110\057\201\001\002\000" +
    "\046\020\uffca\021\uffca\022\uffca\023\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\040\uffca\041\uffca\042\uffca\045\uffca\047\uffca\001\002" +
    "\000\006\040\uffc3\047\uffc3\001\002\000\040\004\ufff8\006" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\016\ufff8\017\ufff8" +
    "\041\ufff8\042\ufff8\043\ufff8\051\ufff8\052\ufff8\053\ufff8\054" +
    "\ufff8\001\002\000\030\004\060\006\050\011\065\012\057" +
    "\013\055\014\054\017\053\041\066\042\044\043\212\054" +
    "\062\001\002\000\042\004\uffe8\006\uffe8\007\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\016\uffe8\017\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\001\002" +
    "\000\042\004\uffe7\006\uffe7\007\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\016\uffe7\017\uffe7\041\uffe7\042\uffe7\043\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\054\uffe7\001\002\000\030\004" +
    "\uffd5\006\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\017\uffd5" +
    "\041\uffd5\042\uffd5\043\uffd5\054\uffd5\001\002\000\024\010" +
    "\106\012\101\015\077\021\112\046\100\050\105\054\062" +
    "\055\102\056\110\001\002\000\006\031\127\045\216\001" +
    "\002\000\010\024\uffbf\025\uffbf\026\uffbf\001\002\000\024" +
    "\010\106\012\101\015\077\021\112\046\100\050\105\054" +
    "\062\055\102\056\110\001\002\000\006\031\127\047\221" +
    "\001\002\000\004\042\044\001\002\000\032\004\uffd0\006" +
    "\uffd0\007\224\011\uffd0\012\uffd0\013\uffd0\014\uffd0\017\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\054\uffd0\001\002\000\030\004" +
    "\uffda\006\uffda\011\uffda\012\uffda\013\uffda\014\uffda\017\uffda" +
    "\041\uffda\042\uffda\043\uffda\054\uffda\001\002\000\004\042" +
    "\044\001\002\000\030\004\uffd1\006\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\017\uffd1\041\uffd1\042\uffd1\043\uffd1\054" +
    "\uffd1\001\002\000\006\031\127\041\230\001\002\000\030" +
    "\004\uffd7\006\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\017" +
    "\uffd7\041\uffd7\042\uffd7\043\uffd7\054\uffd7\001\002\000\030" +
    "\004\uffd6\006\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\017" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\054\uffd6\001\002\000\006" +
    "\031\127\042\044\001\002\000\030\004\uffd8\006\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\017\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\054\uffd8\001\002\000\006\040\241\041\242\001" +
    "\002\000\010\040\ufff4\041\ufff4\044\236\001\002\000\006" +
    "\040\ufff6\041\ufff6\001\002\000\004\055\237\001\002\000" +
    "\004\045\240\001\002\000\006\040\ufff3\041\ufff3\001\002" +
    "\000\004\012\234\001\002\000\040\004\ufff7\006\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\017\ufff7\041\ufff7" +
    "\042\ufff7\043\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\001" +
    "\002\000\006\040\ufff5\041\ufff5\001\002\000\030\004\uffd4" +
    "\006\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\017\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\054\uffd4\001\002\000\024\010\uffcd" +
    "\012\uffcd\015\uffcd\021\uffcd\046\uffcd\050\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\001\002\000\024\010\uffcf\012\uffcf\015\uffcf" +
    "\021\uffcf\046\uffcf\050\uffcf\054\uffcf\055\uffcf\056\uffcf\001" +
    "\002\000\024\010\106\012\101\015\077\021\112\046\100" +
    "\050\105\054\062\055\102\056\110\001\002\000\024\010" +
    "\uffce\012\uffce\015\uffce\021\uffce\046\uffce\050\uffce\054\uffce" +
    "\055\uffce\056\uffce\001\002\000\006\031\127\041\252\001" +
    "\002\000\030\004\uffdc\006\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\017\uffdc\041\uffdc\042\uffdc\043\uffdc\054\uffdc\001" +
    "\002\000\030\004\uffdb\006\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\017\uffdb\041\uffdb\042\uffdb\043\uffdb\054\uffdb\001" +
    "\002\000\012\040\ufff4\041\ufff4\044\236\046\uffed\001\002" +
    "\000\004\002\ufffd\001\002\000\004\046\ufff0\001\002\000" +
    "\004\046\032\001\002\000\004\042\uffef\001\002\000\004" +
    "\042\044\001\002\000\014\016\uffee\043\uffee\051\uffee\052" +
    "\uffee\053\uffee\001\002\000\014\016\016\043\ufffa\051\013" +
    "\052\023\053\015\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\006\001\001\000\002\001\001" +
    "\000\004\043\010\001\001\000\016\003\023\004\020\006" +
    "\017\022\013\023\016\026\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\206\004\020\006\017\026" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\234\025\232\001\001\000\002\001" +
    "\001\000\006\004\024\006\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\027\001\001\000\004\027\030\001\001\000\004" +
    "\047\042\001\001\000\010\006\033\030\035\031\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\033\031\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\044\001\001\000\022\003\023\005\055\006\051\007" +
    "\050\011\045\012\046\022\060\032\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\234\025\232" +
    "\001\001\000\026\011\070\013\230\015\106\016\074\035" +
    "\073\036\110\037\102\040\103\041\072\042\075\001\001" +
    "\000\026\011\070\013\225\015\106\016\074\035\073\036" +
    "\110\037\102\040\103\041\072\042\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\206\005\055\006\051\007\050\011\045" +
    "\012\046\032\207\001\001\000\002\001\001\000\012\005" +
    "\055\007\166\011\045\012\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\011\070\013\071\015\106\016\074\035\073\036\110" +
    "\037\102\040\103\041\072\042\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\011\070\013\140\015\106\016\074\035\073\036\110" +
    "\037\102\040\103\041\072\042\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\070\015\106\016\074\037\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\070\015\106\016\074\037\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\070" +
    "\015\106\016\074\037\121\001\001\000\012\011\070\015" +
    "\106\016\074\037\120\001\001\000\012\011\070\015\106" +
    "\016\074\037\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\011\070\013\132\015\106" +
    "\016\074\033\134\035\073\036\110\037\102\040\103\041" +
    "\072\042\075\001\001\000\026\011\070\013\124\015\106" +
    "\016\074\035\073\036\110\037\102\040\103\041\072\042" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\011\070\015\106\016\074\035\127\036\110\037\102\040" +
    "\103\041\072\042\075\001\001\000\002\001\001\000\022" +
    "\011\070\015\106\016\074\036\131\037\102\040\103\041" +
    "\072\042\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\011\070\013" +
    "\137\015\106\016\074\035\073\036\110\037\102\040\103" +
    "\041\072\042\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\011\070" +
    "\015\106\016\074\037\102\040\103\041\072\042\145\001" +
    "\001\000\020\011\070\015\106\016\074\037\102\040\103" +
    "\041\072\042\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\011\070\015\106\016\074\037\102\040\161" +
    "\001\001\000\014\011\070\015\106\016\074\037\102\040" +
    "\160\001\001\000\016\011\070\015\106\016\074\037\102" +
    "\040\103\041\157\001\001\000\016\011\070\015\106\016" +
    "\074\037\102\040\103\041\156\001\001\000\016\011\070" +
    "\015\106\016\074\037\102\040\103\041\155\001\001\000" +
    "\016\011\070\015\106\016\074\037\102\040\103\041\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\011\070\013\163\015\106\016\074\035\073\036" +
    "\110\037\102\040\103\041\072\042\075\001\001\000\004" +
    "\005\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\173\017\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\011\070\013\177\014\202" +
    "\015\106\016\074\034\201\035\073\036\110\037\102\040" +
    "\103\041\072\042\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\011\070\013\177\014\205\015\106\016\074" +
    "\035\073\036\110\037\102\040\103\041\072\042\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\055\007\166\011\045\012\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\011\070\013\214\015\106\016\074\035\073\036\110\037" +
    "\102\040\103\041\072\042\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\011\070\013\217\015\106\016" +
    "\074\035\073\036\110\037\102\040\103\041\072\042\075" +
    "\001\001\000\002\001\001\000\004\005\221\001\001\000" +
    "\004\020\222\001\001\000\002\001\001\000\004\005\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\011\070\013\250\015\106\016\074\035\073\036" +
    "\110\037\102\040\103\041\072\042\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\027\001\001\000\002\001\001\000\004" +
    "\044\256\001\001\000\004\027\257\001\001\000\004\045" +
    "\260\001\001\000\004\005\261\001\001\000\002\001\001" +
    "\000\006\004\024\006\025\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error(Symbol s){
    System.out.println("error de sintaxis: Linea "+(s.right+1)+".");
}

public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception{
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 

SymbolTable TS;

Tipo tipo_corriente;


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // bool_LITERAL ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_LITERAL",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bool_LITERAL ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_LITERAL",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // literal ::= PARENTESIS_IZQ expr PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // literal ::= method_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // literal ::= ID CORCHETE_IZQ expr CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // literal ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // literal ::= bool_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literal ::= INT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // factor ::= RESTA factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // factor ::= ADMIRACION factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // factor ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // term ::= term PORCENTAJE factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // term ::= term DIVISION factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // term ::= term MULTIPLICACION factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // term ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sum ::= sum RESTA term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sum ::= sum SUMA term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sum ::= term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // relation ::= sum MENOR_IGUAL sum 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // relation ::= sum MAYOR_IGUAL sum 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // relation ::= sum MAYOR sum 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // relation ::= sum MENOR sum 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // relation ::= sum 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // comparison ::= relation DIFERENCIA_LOGICA relation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // comparison ::= relation IGUALDAD_LOGICA relation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // comparison ::= relation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // conjunction ::= conjunction CONJUNCION comparison 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunction",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // conjunction ::= comparison 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunction",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= expr DISYUNCION conjunction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= conjunction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // location ::= ID CORCHETE_IZQ expr CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // location ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // externinvk_arg ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // externinvk_arg ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // externinvk_args ::= externinvk_args COMA externinvk_arg 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_args",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // externinvk_args ::= externinvk_arg 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_args",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expressions ::= expressions COMA expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressions",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expressions ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressions",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type_or_void ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_or_void",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type_or_void ::= type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_or_void",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // method_call ::= EXTERNINVK PARENTESIS_IZQ STRING_LITERAL COMA type_or_void PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // method_call ::= EXTERNINVK PARENTESIS_IZQ STRING_LITERAL COMA type_or_void COMA externinvk_args PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // method_call ::= ID PARENTESIS_IZQ expressions PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // method_call ::= ID PARENTESIS_IZQ PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assign_op ::= DECREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assign_op ::= INCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assign_op ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // else_block ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // else_block ::= ELSE block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= CONTINUE PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= BREAK PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= RETURN expr PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= RETURN PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= WHILE expr block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= FOR ID ASIGNACION expr COMA expr block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= IF PARENTESIS_IZQ expr PARENTESIS_DER block else_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= method_call PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= location assign_op expr PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= BOOLEAN 
            {
              Object RESULT =null;
		 tipo_corriente = Tipo.BOOLEAN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= FLOAT 
            {
              Object RESULT =null;
		 tipo_corriente = Tipo.FLOAT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= INT 
            {
              Object RESULT =null;
		 tipo_corriente = Tipo.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameterDeclaration ::= type ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Simbolo sym = new Simbolo(tipo_corriente.toString(), a.toString(), null, 0); 
                                      TS.obtenerMetodo().addParametro(sym); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterDeclaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameterDeclarations ::= parameterDeclarations COMA parameterDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterDeclarations",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameterDeclarations ::= parameterDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterDeclarations",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameters ::= PARENTESIS_IZQ parameterDeclarations PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameters ::= PARENTESIS_IZQ PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // block ::= LLAVE_IZQ fieldDeclarations statements LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // block ::= LLAVE_IZQ fieldDeclarations LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // block ::= LLAVE_IZQ statements LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // block ::= LLAVE_IZQ LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // method_decl ::= type ID NT$3 parameters NT$4 block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
TS.agregarNivel();
                   Metodo e=TS.obtenerMetodo();
                   for(int i=0; i<e.getParametros().size(); i++){
                        Simbolo actual = e.getParametros().get(i);
                        TS.agregarSimbolo(actual.getType(), actual.getName(), actual.getValue(), actual.getSize());
                   }         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$3 ::= 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 switch (tipo_corriente){
                              case INT:
                                      TS.agregarMetodo(Tipo.INT.toString(), g.toString());  
                              case FLOAT:
                                      TS.agregarMetodo(Tipo.FLOAT.toString(), g.toString());  
                              case BOOLEAN:
                                      TS.agregarMetodo(Tipo.BOOLEAN.toString(), g.toString()); 
                                                 }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // method_decl ::= VOID ID NT$1 parameters NT$2 block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
TS.agregarNivel();
                   Metodo e=TS.obtenerMetodo();
                   for(int i=0; i<e.getParametros().size(); i++){
                        Simbolo actual = e.getParametros().get(i);
                        TS.agregarSimbolo(actual.getType(), actual.getName(), actual.getValue(), actual.getSize());
                   }         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 TS.agregarMetodo(Tipo.VOID.toString(), d.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // methodDeclarations ::= methodDeclarations method_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDeclarations",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // methodDeclarations ::= method_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDeclarations",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // identifier ::= ID CORCHETE_IZQ INT_LITERAL CORCHETE_DER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 switch (tipo_corriente){
                                                       case INT:
                                                               TS.agregarSimbolo(Tipo.INTARRAY.toString(), s.toString(), null, (int) i);  
                                                       case FLOAT:
                                                               TS.agregarSimbolo(Tipo.FLOATARRAY.toString(), s.toString(), null, (int) i);  
                                                       case BOOLEAN:
                                                               TS.agregarSimbolo(Tipo.BOOLARRAY.toString(), s.toString(), null, (int) i); 
                                                                           }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // identifier ::= ID 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 TS.agregarSimbolo(tipo_corriente.toString(), s.toString(), null, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identifiers ::= identifiers COMA identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // identifiers ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // field_decl ::= type identifiers PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fieldDeclarations ::= fieldDeclarations field_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldDeclarations",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fieldDeclarations ::= field_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldDeclarations",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fieldAndMethods ::= fieldDeclarations methodDeclarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldAndMethods",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fieldAndMethods ::= methodDeclarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldAndMethods",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fieldAndMethods ::= fieldDeclarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldAndMethods",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // body ::= LLAVE_IZQ NT$0 fieldAndMethods LLAVE_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
 TS = new SymbolTable(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // body ::= LLAVE_IZQ LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= CLASS ID body 
            {
              Object RESULT =null;
		System.out.println("parseo exitoso");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

