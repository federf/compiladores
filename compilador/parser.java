
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 22 18:03:21 ART 2014
//----------------------------------------------------

import java_cup.runtime.Symbol;
import ir.*;
import ir.ast.*;
import ir.ast.UnaryOpExpr;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 22 18:03:21 ART 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\043\002\000\002\002" +
    "\006\000\002\014\004\000\002\044\002\000\002\014\006" +
    "\000\002\016\003\000\002\016\003\000\002\016\004\000" +
    "\002\015\003\000\002\015\004\000\002\003\005\000\002" +
    "\020\003\000\002\020\005\000\002\017\003\000\002\017" +
    "\006\000\002\021\003\000\002\021\004\000\002\045\002" +
    "\000\002\046\002\000\002\004\010\000\002\047\002\000" +
    "\002\050\002\000\002\004\010\000\002\041\004\000\002" +
    "\041\005\000\002\041\005\000\002\041\006\000\002\022" +
    "\004\000\002\022\005\000\002\023\003\000\002\023\005" +
    "\000\002\024\004\000\002\025\003\000\002\025\004\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\006\000\002\006\004\000\002\051\002\000\002\052" +
    "\002\000\002\006\012\000\002\053\002\000\002\006\012" +
    "\000\002\054\002\000\002\006\006\000\002\006\004\000" +
    "\002\006\005\000\002\006\004\000\002\006\004\000\002" +
    "\006\003\000\002\055\002\000\002\006\004\000\002\056" +
    "\002\000\002\042\005\000\002\042\002\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\012\005\000" +
    "\002\012\006\000\002\012\012\000\002\012\010\000\002" +
    "\013\003\000\002\013\003\000\002\027\003\000\002\027" +
    "\005\000\002\026\003\000\002\026\005\000\002\007\003" +
    "\000\002\007\003\000\002\030\003\000\002\030\006\000" +
    "\002\031\003\000\002\031\005\000\002\032\003\000\002" +
    "\032\005\000\002\033\003\000\002\033\005\000\002\033" +
    "\005\000\002\036\003\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\035\003\000" +
    "\002\035\005\000\002\035\005\000\002\034\003\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\040" +
    "\003\000\002\040\004\000\002\040\004\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\006\000\002\010\003\000\002\010\005\000\002" +
    "\011\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\004\004\005\001\002\000\004\002\273\001" +
    "\002\000\004\007\006\001\002\000\004\041\000\001\002" +
    "\000\004\041\011\001\002\000\004\002\uffff\001\002\000" +
    "\014\006\ufffd\042\013\051\ufffd\052\ufffd\053\ufffd\001\002" +
    "\000\012\006\017\051\014\052\025\053\016\001\002\000" +
    "\004\002\ufffe\001\002\000\010\007\uffde\040\uffde\046\uffde" +
    "\001\002\000\014\006\017\042\ufffb\051\014\052\025\053" +
    "\016\001\002\000\010\007\uffdc\040\uffdc\046\uffdc\001\002" +
    "\000\004\007\265\001\002\000\004\042\264\001\002\000" +
    "\004\007\263\001\002\000\014\006\ufff1\042\ufff1\051\ufff1" +
    "\052\ufff1\053\ufff1\001\002\000\014\006\017\042\ufffa\051" +
    "\014\052\025\053\016\001\002\000\040\006\ufff8\007\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\041" +
    "\ufff8\042\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8" +
    "\001\002\000\010\007\uffdd\040\uffdd\046\uffdd\001\002\000" +
    "\014\006\ufff0\042\ufff0\051\ufff0\052\ufff0\053\ufff0\001\002" +
    "\000\004\007\030\001\002\000\004\045\uffec\001\002\000" +
    "\004\045\032\001\002\000\012\046\254\051\014\052\025" +
    "\053\016\001\002\000\004\041\uffeb\001\002\000\004\041" +
    "\035\001\002\000\036\007\050\012\047\013\051\014\041" +
    "\015\056\016\046\017\044\041\uffcd\042\055\050\057\051" +
    "\014\052\025\053\016\054\053\001\002\000\014\006\uffea" +
    "\042\uffea\051\uffea\052\uffea\053\uffea\001\002\000\004\050" +
    "\252\001\002\000\010\025\245\026\247\027\244\001\002" +
    "\000\004\050\243\001\002\000\030\007\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\041\uffe0\042\uffe0" +
    "\050\uffe0\054\uffe0\001\002\000\004\007\232\001\002\000" +
    "\024\007\072\010\077\011\070\021\103\045\071\047\076" +
    "\054\053\055\073\056\101\001\002\000\004\041\035\001" +
    "\002\000\026\007\072\010\077\011\070\021\103\045\071" +
    "\047\076\050\224\054\053\055\073\056\101\001\002\000" +
    "\004\045\211\001\002\000\014\025\uffb9\026\uffb9\027\uffb9" +
    "\043\206\045\114\001\002\000\004\050\205\001\002\000" +
    "\036\007\050\012\047\013\051\014\041\015\056\016\046" +
    "\017\044\041\uffcd\042\203\050\057\051\014\052\025\053" +
    "\016\054\053\001\002\000\004\045\162\001\002\000\030" +
    "\007\050\012\047\013\051\014\041\015\056\016\046\017" +
    "\044\041\uffcd\042\160\050\057\054\053\001\002\000\042" +
    "\005\uffe9\006\uffe9\007\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\041\uffe9\042\uffe9\050\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\001\002\000\004\007\060\001" +
    "\002\000\030\007\uffce\012\uffce\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\017\uffce\041\uffce\042\uffce\050\uffce\054\uffce\001" +
    "\002\000\004\025\061\001\002\000\024\007\072\010\077" +
    "\011\070\021\103\045\071\047\076\054\053\055\073\056" +
    "\101\001\002\000\046\020\uff9c\021\uff9c\022\uff9c\023\uff9c" +
    "\024\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035" +
    "\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\044\uff9c\046\uff9c" +
    "\050\uff9c\001\002\000\006\031\120\040\154\001\002\000" +
    "\040\020\141\021\140\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\144\035\142\036\145\037\143\040\uffb0\041\uffb0\044" +
    "\uffb0\046\uffb0\050\uffb0\001\002\000\020\030\122\031\uffb7" +
    "\040\uffb7\041\uffb7\044\uffb7\046\uffb7\050\uffb7\001\002\000" +
    "\046\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037" +
    "\uff9f\040\uff9f\041\uff9f\044\uff9f\046\uff9f\050\uff9f\001\002" +
    "\000\024\030\uffb3\031\uffb3\032\134\033\135\040\uffb3\041" +
    "\uffb3\044\uffb3\046\uffb3\050\uffb3\001\002\000\046\020\uff9a" +
    "\021\uff9a\022\uff9a\023\uff9a\024\uff9a\030\uff9a\031\uff9a\032" +
    "\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a" +
    "\041\uff9a\044\uff9a\046\uff9a\050\uff9a\001\002\000\024\007" +
    "\072\010\077\011\070\021\103\045\071\047\076\054\053" +
    "\055\073\056\101\001\002\000\052\020\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\024\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\043" +
    "\115\044\uff9e\045\114\046\uff9e\050\uff9e\001\002\000\046" +
    "\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\030\uffa1\031" +
    "\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1" +
    "\040\uffa1\041\uffa1\044\uffa1\046\uffa1\050\uffa1\001\002\000" +
    "\046\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\030\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037" +
    "\uffa8\040\uffa8\041\uffa8\044\uffa8\046\uffa8\050\uffa8\001\002" +
    "\000\046\020\uffab\021\uffab\022\106\023\110\024\107\030" +
    "\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab" +
    "\037\uffab\040\uffab\041\uffab\044\uffab\046\uffab\050\uffab\001" +
    "\002\000\024\007\072\010\077\011\070\021\103\045\071" +
    "\047\076\054\053\055\073\056\101\001\002\000\046\020" +
    "\uff99\021\uff99\022\uff99\023\uff99\024\uff99\030\uff99\031\uff99" +
    "\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040" +
    "\uff99\041\uff99\044\uff99\046\uff99\050\uff99\001\002\000\046" +
    "\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\030\uffa4\031" +
    "\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\040\uffa4\041\uffa4\044\uffa4\046\uffa4\050\uffa4\001\002\000" +
    "\046\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\040\uffa0\041\uffa0\044\uffa0\046\uffa0\050\uffa0\001\002" +
    "\000\020\030\uffb5\031\uffb5\040\uffb5\041\uffb5\044\uffb5\046" +
    "\uffb5\050\uffb5\001\002\000\024\007\072\010\077\011\070" +
    "\021\103\045\071\047\076\054\053\055\073\056\101\001" +
    "\002\000\046\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2" +
    "\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036" +
    "\uffa2\037\uffa2\040\uffa2\041\uffa2\044\uffa2\046\uffa2\050\uffa2" +
    "\001\002\000\046\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\041\uffa3\044\uffa3\046\uffa3\050" +
    "\uffa3\001\002\000\024\007\072\010\077\011\070\021\103" +
    "\045\071\047\076\054\053\055\073\056\101\001\002\000" +
    "\024\007\072\010\077\011\070\021\103\045\071\047\076" +
    "\054\053\055\073\056\101\001\002\000\024\007\072\010" +
    "\077\011\070\021\103\045\071\047\076\054\053\055\073" +
    "\056\101\001\002\000\046\020\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\024\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6" +
    "\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\044\uffa6\046" +
    "\uffa6\050\uffa6\001\002\000\046\020\uffa5\021\uffa5\022\uffa5" +
    "\023\uffa5\024\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\044\uffa5" +
    "\046\uffa5\050\uffa5\001\002\000\046\020\uffa7\021\uffa7\022" +
    "\uffa7\023\uffa7\024\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\044" +
    "\uffa7\046\uffa7\050\uffa7\001\002\000\026\007\072\010\077" +
    "\011\070\021\103\045\071\046\125\047\076\054\053\055" +
    "\073\056\101\001\002\000\024\007\072\010\077\011\070" +
    "\021\103\045\071\047\076\054\053\055\073\056\101\001" +
    "\002\000\006\031\120\044\117\001\002\000\046\020\uff9d" +
    "\021\uff9d\022\uff9d\023\uff9d\024\uff9d\030\uff9d\031\uff9d\032" +
    "\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d" +
    "\041\uff9d\044\uff9d\046\uff9d\050\uff9d\001\002\000\024\007" +
    "\072\010\077\011\070\021\103\045\071\047\076\054\053" +
    "\055\073\056\101\001\002\000\020\030\122\031\uffb6\040" +
    "\uffb6\041\uffb6\044\uffb6\046\uffb6\050\uffb6\001\002\000\024" +
    "\007\072\010\077\011\070\021\103\045\071\047\076\054" +
    "\053\055\073\056\101\001\002\000\020\030\uffb4\031\uffb4" +
    "\040\uffb4\041\uffb4\044\uffb4\046\uffb4\050\uffb4\001\002\000" +
    "\010\031\120\040\uffbf\046\uffbf\001\002\000\046\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\044\uffc5\046\uffc5\050\uffc5\001\002\000\006\040" +
    "\127\046\130\001\002\000\024\007\072\010\077\011\070" +
    "\021\103\045\071\047\076\054\053\055\073\056\101\001" +
    "\002\000\046\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\044\uffc4\046\uffc4\050\uffc4" +
    "\001\002\000\010\031\120\040\uffbe\046\uffbe\001\002\000" +
    "\006\031\120\046\133\001\002\000\046\020\uff9b\021\uff9b" +
    "\022\uff9b\023\uff9b\024\uff9b\030\uff9b\031\uff9b\032\uff9b\033" +
    "\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b" +
    "\044\uff9b\046\uff9b\050\uff9b\001\002\000\024\007\072\010" +
    "\077\011\070\021\103\045\071\047\076\054\053\055\073" +
    "\056\101\001\002\000\024\007\072\010\077\011\070\021" +
    "\103\045\071\047\076\054\053\055\073\056\101\001\002" +
    "\000\020\030\uffb1\031\uffb1\040\uffb1\041\uffb1\044\uffb1\046" +
    "\uffb1\050\uffb1\001\002\000\020\030\uffb2\031\uffb2\040\uffb2" +
    "\041\uffb2\044\uffb2\046\uffb2\050\uffb2\001\002\000\024\007" +
    "\072\010\077\011\070\021\103\045\071\047\076\054\053" +
    "\055\073\056\101\001\002\000\024\007\072\010\077\011" +
    "\070\021\103\045\071\047\076\054\053\055\073\056\101" +
    "\001\002\000\024\007\072\010\077\011\070\021\103\045" +
    "\071\047\076\054\053\055\073\056\101\001\002\000\024" +
    "\007\072\010\077\011\070\021\103\045\071\047\076\054" +
    "\053\055\073\056\101\001\002\000\024\007\072\010\077" +
    "\011\070\021\103\045\071\047\076\054\053\055\073\056" +
    "\101\001\002\000\024\007\072\010\077\011\070\021\103" +
    "\045\071\047\076\054\053\055\073\056\101\001\002\000" +
    "\030\020\141\021\140\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\040\uffad\041\uffad\044\uffad\046\uffad\050\uffad\001\002\000" +
    "\030\020\141\021\140\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\040\uffae\041\uffae\044\uffae\046\uffae\050\uffae\001\002\000" +
    "\030\020\141\021\140\030\uffac\031\uffac\032\uffac\033\uffac" +
    "\040\uffac\041\uffac\044\uffac\046\uffac\050\uffac\001\002\000" +
    "\030\020\141\021\140\030\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\040\uffaf\041\uffaf\044\uffaf\046\uffaf\050\uffaf\001\002\000" +
    "\046\020\uffaa\021\uffaa\022\106\023\110\024\107\030\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037" +
    "\uffaa\040\uffaa\041\uffaa\044\uffaa\046\uffaa\050\uffaa\001\002" +
    "\000\046\020\uffa9\021\uffa9\022\106\023\110\024\107\030" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\044\uffa9\046\uffa9\050\uffa9\001" +
    "\002\000\024\007\072\010\077\011\070\021\103\045\071" +
    "\047\076\054\053\055\073\056\101\001\002\000\006\031" +
    "\120\041\uffd6\001\002\000\004\041\035\001\002\000\030" +
    "\007\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\041\uffd5\042\uffd5\050\uffd5\054\uffd5\001\002\000\042" +
    "\005\uffe8\006\uffe8\007\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\041\uffe8\042\uffe8\050\uffe8\051\uffe8" +
    "\052\uffe8\053\uffe8\054\uffe8\001\002\000\030\007\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\041\uffdf" +
    "\042\uffdf\050\uffdf\054\uffdf\001\002\000\004\057\163\001" +
    "\002\000\004\040\164\001\002\000\012\006\167\051\014" +
    "\052\025\053\016\001\002\000\006\040\uffc1\046\uffc1\001" +
    "\002\000\006\040\170\046\171\001\002\000\006\040\uffc0" +
    "\046\uffc0\001\002\000\026\007\072\010\077\011\070\021" +
    "\103\045\071\047\076\054\053\055\073\056\101\057\173" +
    "\001\002\000\046\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\040\uffc2\041\uffc2\044\uffc2\046\uffc2\050" +
    "\uffc2\001\002\000\010\031\120\040\uffbb\046\uffbb\001\002" +
    "\000\006\040\uffba\046\uffba\001\002\000\006\040\176\046" +
    "\177\001\002\000\006\040\uffbd\046\uffbd\001\002\000\026" +
    "\007\072\010\077\011\070\021\103\045\071\047\076\054" +
    "\053\055\073\056\101\057\173\001\002\000\046\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\044\uffc3\046\uffc3\050\uffc3\001\002\000\006\040" +
    "\uffbc\046\uffbc\001\002\000\040\006\ufff7\007\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\041\ufff7\042" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\001\002" +
    "\000\030\007\050\012\047\013\051\014\041\015\056\016" +
    "\046\017\044\041\uffcd\042\204\050\057\054\053\001\002" +
    "\000\042\005\uffe7\006\uffe7\007\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\041\uffe7\042\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\054\uffe7\001\002\000\042\005" +
    "\uffe6\006\uffe6\007\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\041\uffe6\042\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\001\002\000\030\007\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\041\uffd0\042" +
    "\uffd0\050\uffd0\054\uffd0\001\002\000\024\007\072\010\077" +
    "\011\070\021\103\045\071\047\076\054\053\055\073\056" +
    "\101\001\002\000\006\031\120\044\210\001\002\000\010" +
    "\025\uffb8\026\uffb8\027\uffb8\001\002\000\024\007\uffd9\010" +
    "\uffd9\011\uffd9\021\uffd9\045\uffd9\047\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\001\002\000\024\007\072\010\077\011\070\021" +
    "\103\045\071\047\076\054\053\055\073\056\101\001\002" +
    "\000\006\031\120\046\214\001\002\000\004\041\035\001" +
    "\002\000\032\005\uffd8\007\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\041\uffd8\042\uffd8\050\uffd8\054" +
    "\uffd8\001\002\000\032\005\220\007\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\016\uffc9\017\uffc9\041\uffc9\042\uffc9\050" +
    "\uffc9\054\uffc9\001\002\000\030\007\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\041\uffd7\042\uffd7\050" +
    "\uffd7\054\uffd7\001\002\000\004\041\uffcb\001\002\000\004" +
    "\041\035\001\002\000\030\007\uffca\012\uffca\013\uffca\014" +
    "\uffca\015\uffca\016\uffca\017\uffca\041\uffca\042\uffca\050\uffca" +
    "\054\uffca\001\002\000\006\031\120\050\225\001\002\000" +
    "\030\007\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\041\uffd2\042\uffd2\050\uffd2\054\uffd2\001\002\000" +
    "\030\007\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\041\uffd1\042\uffd1\050\uffd1\054\uffd1\001\002\000" +
    "\030\007\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\041\uffcc\042\uffcc\050\uffcc\054\uffcc\001\002\000" +
    "\006\031\120\041\uffd4\001\002\000\004\041\035\001\002" +
    "\000\030\007\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\041\uffd3\042\uffd3\050\uffd3\054\uffd3\001\002" +
    "\000\010\040\ufff3\043\240\050\ufff3\001\002\000\006\040" +
    "\235\050\236\001\002\000\006\040\ufff5\050\ufff5\001\002" +
    "\000\004\007\232\001\002\000\040\006\ufff6\007\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\041\ufff6" +
    "\042\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\001" +
    "\002\000\006\040\ufff4\050\ufff4\001\002\000\004\055\241" +
    "\001\002\000\004\044\242\001\002\000\006\040\ufff2\050" +
    "\ufff2\001\002\000\030\007\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\041\uffcf\042\uffcf\050\uffcf\054" +
    "\uffcf\001\002\000\024\007\uffc6\010\uffc6\011\uffc6\021\uffc6" +
    "\045\uffc6\047\uffc6\054\uffc6\055\uffc6\056\uffc6\001\002\000" +
    "\024\007\uffc8\010\uffc8\011\uffc8\021\uffc8\045\uffc8\047\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\001\002\000\024\007\072\010" +
    "\077\011\070\021\103\045\071\047\076\054\053\055\073" +
    "\056\101\001\002\000\024\007\uffc7\010\uffc7\011\uffc7\021" +
    "\uffc7\045\uffc7\047\uffc7\054\uffc7\055\uffc7\056\uffc7\001\002" +
    "\000\006\031\120\050\251\001\002\000\030\007\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\041\uffdb" +
    "\042\uffdb\050\uffdb\054\uffdb\001\002\000\030\007\uffda\012" +
    "\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\041\uffda" +
    "\042\uffda\050\uffda\054\uffda\001\002\000\006\040\uffe3\046" +
    "\uffe3\001\002\000\004\041\uffe5\001\002\000\004\007\262" +
    "\001\002\000\006\040\257\046\260\001\002\000\010\051" +
    "\014\052\025\053\016\001\002\000\004\041\uffe4\001\002" +
    "\000\006\040\uffe2\046\uffe2\001\002\000\006\040\uffe1\046" +
    "\uffe1\001\002\000\012\040\ufff3\043\240\045\uffec\050\ufff3" +
    "\001\002\000\004\002\ufffc\001\002\000\004\045\uffef\001" +
    "\002\000\004\045\032\001\002\000\004\041\uffee\001\002" +
    "\000\004\041\035\001\002\000\014\006\uffed\042\uffed\051" +
    "\uffed\052\uffed\053\uffed\001\002\000\014\006\017\042\ufff9" +
    "\051\014\052\025\053\016\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\006\001\001\000\004\014\007" +
    "\001\001\000\002\001\001\000\004\044\011\001\001\000" +
    "\016\003\023\004\021\005\020\015\014\016\017\021\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\200\004\021\005\020\021\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\233\020" +
    "\232\001\001\000\002\001\001\000\006\004\025\005\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\030\001\001\000\004" +
    "\022\032\001\001\000\010\005\254\023\255\024\252\001" +
    "\001\000\004\050\033\001\001\000\004\041\035\001\001" +
    "\000\022\003\023\005\042\006\041\012\036\015\051\025" +
    "\053\030\037\055\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\233\020\232\001\001\000\026" +
    "\010\077\011\065\012\061\031\226\032\064\033\101\034" +
    "\074\035\063\036\066\040\073\001\001\000\004\041\225" +
    "\001\001\000\026\010\077\011\065\012\061\031\222\032" +
    "\064\033\101\034\074\035\063\036\066\040\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\200\005\042\006\041\012\036\025\201\030\037" +
    "\055\044\001\001\000\002\001\001\000\012\006\160\012" +
    "\036\030\037\055\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\010" +
    "\077\011\065\012\061\031\062\032\064\033\101\034\074" +
    "\035\063\036\066\040\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\010" +
    "\077\011\065\012\061\031\131\032\064\033\101\034\074" +
    "\035\063\036\066\040\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\077\011\065\012\061\040\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\077\011\065\012\061\040\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\077\011\065" +
    "\012\061\040\112\001\001\000\012\010\077\011\065\012" +
    "\061\040\111\001\001\000\012\010\077\011\065\012\061" +
    "\040\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\010\077\011\065\012\061\027\125" +
    "\031\123\032\064\033\101\034\074\035\063\036\066\040" +
    "\073\001\001\000\026\010\077\011\065\012\061\031\115" +
    "\032\064\033\101\034\074\035\063\036\066\040\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\010\077" +
    "\011\065\012\061\032\120\033\101\034\074\035\063\036" +
    "\066\040\073\001\001\000\002\001\001\000\022\010\077" +
    "\011\065\012\061\033\122\034\074\035\063\036\066\040" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\010\077\011\065\012" +
    "\061\031\130\032\064\033\101\034\074\035\063\036\066" +
    "\040\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\010\077\011\065" +
    "\012\061\034\074\035\063\036\136\040\073\001\001\000" +
    "\020\010\077\011\065\012\061\034\074\035\063\036\135" +
    "\040\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\077\011\065\012\061\034\152\040\073\001\001" +
    "\000\014\010\077\011\065\012\061\034\151\040\073\001" +
    "\001\000\016\010\077\011\065\012\061\034\074\035\150" +
    "\040\073\001\001\000\016\010\077\011\065\012\061\034" +
    "\074\035\147\040\073\001\001\000\016\010\077\011\065" +
    "\012\061\034\074\035\146\040\073\001\001\000\016\010" +
    "\077\011\065\012\061\034\074\035\145\040\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\010\077\011\065\012\061\031\154\032\064\033\101\034" +
    "\074\035\063\036\066\040\073\001\001\000\004\053\155" +
    "\001\001\000\004\041\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\164\013\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\007\174" +
    "\010\077\011\065\012\061\026\173\031\171\032\064\033" +
    "\101\034\074\035\063\036\066\040\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\007\177\010\077\011\065" +
    "\012\061\031\171\032\064\033\101\034\074\035\063\036" +
    "\066\040\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\160\012\036\030\037\055" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\010\077\011\065\012\061\031\206\032" +
    "\064\033\101\034\074\035\063\036\066\040\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\211\001" +
    "\001\000\026\010\077\011\065\012\061\031\212\032\064" +
    "\033\101\034\074\035\063\036\066\040\073\001\001\000" +
    "\002\001\001\000\004\041\214\001\001\000\004\052\215" +
    "\001\001\000\004\042\216\001\001\000\002\001\001\000" +
    "\004\056\220\001\001\000\004\041\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\227\001\001\000\004" +
    "\041\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\236\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\010\077\011\065\012" +
    "\061\031\247\032\064\033\101\034\074\035\063\036\066" +
    "\040\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\254\024\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\030\001\001\000\002\001" +
    "\001\000\004\045\265\001\001\000\004\022\266\001\001" +
    "\000\004\046\267\001\001\000\004\041\270\001\001\000" +
    "\002\001\001\000\006\004\025\005\026\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error(Symbol s){
        System.out.println("error de sintaxis: Linea "+(s.right+1)+".");
    }

    public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception{
    }
    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 

    AST ast;

    symbolTable TS; //tabla de simbolos

    Type tipo_corriente; //ultimo tipo leido

    Metodo ult_metodo; //ultimo metodo creado

    boolean mainDeclared;
    //variable booleana que indicaria que se encuentra dentro de una sentencia if - else
    boolean inIfElse; 
    //variable booleana que indicaria que se encuentra dentro de un ciclo
    boolean inLoop;
    
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // bool_LITERAL ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT= new BoolLiteral(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_LITERAL",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // bool_LITERAL ::= TRUE 
            {
              Expression RESULT =null;
		RESULT= new BoolLiteral(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_LITERAL",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // literal ::= PARENTESIS_IZQ expr PARENTESIS_DER 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // literal ::= method_call 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression m = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // literal ::= ID CORCHETE_IZQ expr CORCHETE_DER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 //arreglo
                    Simbolo s=TS.buscarSimbolo((String)id);
                    if(s==null){
                        System.out.println("Variable "+id+" not found");
                    }else{
                        if(s.getType().isArray()){
                            if(!e.getType().equals(Type.INT)){
                                System.out.println("Error: expression in array must be int");
                            }else{
                                RESULT= new ArrayLiteral((String)id, s.getSize(), s.getType());
                            }
                        }else{
                            System.out.println("Variable "+id+" is not an array");
                        }
                    }
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // literal ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Simbolo s=TS.buscarSimbolo(id); //identificador
                        switch(s.getType()){
                            case BOOLEAN:
                                if(s.getValue()==null){
                                    RESULT= new BoolLiteral(false);
                                }else{
                                    System.out.println("boolean con valor");
                                    RESULT= new BoolLiteral(Boolean.valueOf(s.getValue()));
                                }
                                break;
                            case INT:
                                if(s.getValue()==null){
                                    RESULT= new IntLiteral("0");
                                }else{
                                    RESULT= new IntLiteral(s.getValue());
                                }
                                break;
                            case FLOAT:
                                if(s.getValue()==null){
                                    RESULT= new FloatLiteral("0.0");
                                }else{
                                    RESULT= new FloatLiteral(s.getValue());
                                }
                                break;
                            case STRING:
                                if(s.getValue()==null){
                                    RESULT= new StringLiteral("");
                                }else{
                                    RESULT= new StringLiteral(s.getValue());
                                }
                                break;
                        }
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // literal ::= bool_LITERAL 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // literal ::= FLOAT_LITERAL 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new FloatLiteral((String) f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // literal ::= INT_LITERAL 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new IntLiteral((String) i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // factor ::= RESTA factor 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  //verificamos que el operando sea valido para la operacion
                                if(f.getType().equals(Type.FLOAT)){ 
                                        UnaryOpExpr u=new UnaryOpExpr(UnaryOpType.MINUS,f);
                                        u.setType(Type.FLOAT);
                                        RESULT= u;
                                    }else{
                                        if(f.getType().equals(Type.INT)){                                        
                                            UnaryOpExpr u=new UnaryOpExpr(UnaryOpType.MINUS,f);
                                            u.setType(Type.INT);
                                            RESULT= u;
                                            
                                        }else{
                                            //si no lo es mostramos un mensaje de error
                                            System.out.println("Numeral (int or float) expected but "+f.getType().toString()+" found.");
                                        }
                                    }   
                                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // factor ::= ADMIRACION factor 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                    //verificamos que el operando sea valido para la operacion
                                    if(f.getType().equals(Type.BOOLEAN)){
                                        UnaryOpExpr u=new UnaryOpExpr(UnaryOpType.NON, f);
                                        u.setType(Type.BOOLEAN);
                                        RESULT=u;
                                    }else{
                                        //si no lo es mostramos un mensaje de error
                                        System.out.println("Boolean expected but "+f.getType().toString()+" found.");
                                    } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // factor ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (Expression)l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // term ::= term PORCENTAJE factor 
            {
              Expression RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression s1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression s2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //verificamos que el tipo de los operandos sean validos para la operacion
                                            if(    (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INT))||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INTARRAY)) ||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INTARRAY))||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INT))
                                            ){
                                                BinOpExpr res=new BinOpExpr(s1,BinOpType.MOD,s2);                                                
                                                res.setType(Type.INT);
                                                RESULT=res;
                                            }else{
                                                //si no lo son mostramos un mensaje de error
                                                System.out.println("Error "+BinOpType.MOD.toString()+" can only be applied to Int values");
                                            }
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // term ::= term DIVISION factor 
            {
              Expression RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression s1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression s2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //verificamos que el tipo de los operandos sean validos para la operacion
                                            if(    (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INT))||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.FLOAT)) ||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.FLOATARRAY)) ||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INTARRAY)) ||


                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.FLOAT))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.INT))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.INTARRAY))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.FLOATARRAY))||

                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INTARRAY))||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.FLOATARRAY))||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.FLOAT)) ||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INT))||
                                            

                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.FLOATARRAY)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.INTARRAY)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.INT)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.FLOAT))
                                            ){
                                                if((s1.getType().equals(Type.INT) && s2.getType().equals(Type.INT))||
                                                (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INTARRAY)) ||
                                                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INTARRAY))||
                                                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INT))
                                                ){
                                                BinOpExpr res=new BinOpExpr(s1,BinOpType.DIVIDE,s2);                                                
                                                res.setType(Type.INT);
                                                RESULT=res;
                                            }else{
                                                BinOpExpr res=new BinOpExpr(s1,BinOpType.DIVIDE,s2);
                                                res.setType(Type.FLOAT);
                                                RESULT=res;
                                            }
                                        }else{
                                            //si no lo son mostramos un mensaje de error
                                            System.out.println("Error "+BinOpType.DIVIDE.toString()+" can only be applied to Int or Float values");
                                        }
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // term ::= term MULTIPLICACION factor 
            {
              Expression RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression s1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression s2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //verificamos que el tipo de los operandos sean validos para la operacion
                                            if(    (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INT))||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.FLOAT)) ||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.FLOATARRAY)) ||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INTARRAY)) ||


                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.FLOAT))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.INT))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.INTARRAY))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.FLOATARRAY))||

                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INTARRAY))||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.FLOATARRAY))||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.FLOAT)) ||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INT))||
                                            

                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.FLOATARRAY)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.INTARRAY)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.INT)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.FLOAT))
                                            ){
                                                if((s1.getType().equals(Type.INT) && s2.getType().equals(Type.INT))||
                                                (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INTARRAY)) ||
                                                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INTARRAY))||
                                                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INT))
                                                ){
                                                BinOpExpr res=new BinOpExpr(s1,BinOpType.MULTIPLY,s2);
                                                
                                                res.setType(Type.INT);
                                                RESULT=res;
                                            }else{
                                                BinOpExpr res=new BinOpExpr(s1,BinOpType.MULTIPLY,s2);
                                                res.setType(Type.FLOAT);
                                                RESULT=res;
                                            }
                                        }else{
                                            //si no lo son mostramos un mensaje de error
                                            System.out.println("Error "+BinOpType.MULTIPLY.toString()+" can only be applied to Int or Float values");
                                        }
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // term ::= factor 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sum ::= sum RESTA term 
            {
              Expression RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression s1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression s2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //verificamos que el tipo de los operandos sean validos para la operacion
                                            if(    (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INT))||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.FLOAT)) ||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.FLOATARRAY)) ||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INTARRAY)) ||


                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.FLOAT))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.INT))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.INTARRAY))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.FLOATARRAY))||

                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INTARRAY))||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.FLOATARRAY))||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.FLOAT)) ||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INT))||
                                            

                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.FLOATARRAY)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.INTARRAY)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.INT)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.FLOAT))
                                            ){
                                                if((s1.getType().equals(Type.INT) && s2.getType().equals(Type.INT))||
                                                (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INTARRAY)) ||
                                                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INTARRAY))||
                                                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INT))
                                                ){
                                                BinOpExpr res=new BinOpExpr(s1,BinOpType.MINUS,s2);
                                                res.setType(Type.INT);
                                                RESULT=res;
                                            }else{
                                                BinOpExpr res=new BinOpExpr(s1,BinOpType.MINUS,s2);
                                                res.setType(Type.FLOAT);
                                                RESULT=res;
                                            }
                                        }else{
                                            //si no lo son mostramos un mensaje de error
                                            System.out.println("Error "+BinOpType.MINUS.toString()+" can only be applied to Int or Float values");
                                        }
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sum ::= sum SUMA term 
            {
              Expression RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression s1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression s2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //verificamos que el tipo de los operandos sean validos para la operacion
                                            if(  (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INT))||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.FLOAT)) ||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.FLOATARRAY)) ||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INTARRAY)) ||


                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.FLOAT))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.INT))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.INTARRAY))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.FLOATARRAY))||

                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INTARRAY))||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.FLOATARRAY))||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.FLOAT)) ||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INT))||
                                            

                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.FLOATARRAY)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.INTARRAY)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.INT)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.FLOAT))
                                            ){
                                                if((s1.getType().equals(Type.INT) && s2.getType().equals(Type.INT))||
                                                (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INTARRAY)) ||
                                                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INTARRAY))||
                                                (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INT))
                                                ){
                                                    BinOpExpr res=new BinOpExpr(s1,BinOpType.PLUS,s2);
                                                    res.setType(Type.INT);
                                                    RESULT=res;
                                                }else{
                                                    BinOpExpr res=new BinOpExpr(s1,BinOpType.PLUS,s2);
                                                    res.setType(Type.FLOAT);
                                                    RESULT=res;
                                                }
                                        }else{
                                            //si no lo son mostramos un mensaje de error
                                            System.out.println("Error "+BinOpType.PLUS.toString()+" can only be applied to Int or Float values");
                                        }
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sum ::= term 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sum",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // relation ::= sum MENOR_IGUAL sum 
            {
              Expression RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression s1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression s2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //verificamos que el tipo de los operandos sean validos para la operacion
                                            if(    (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INT))||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.FLOAT)) ||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.FLOATARRAY)) ||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INTARRAY)) ||


                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.FLOAT))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.INT))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.INTARRAY))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.FLOATARRAY))||

                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INTARRAY))||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.FLOATARRAY))||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.FLOAT)) ||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INT))||
                                            

                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.FLOATARRAY)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.INTARRAY)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.INT)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.FLOAT))
                                            ){
                                                BinOpExpr res=new BinOpExpr(s1,BinOpType.LEQ,s2);
                                                res.setType(Type.BOOLEAN);
                                                RESULT=res;
                                            }else{
                                                //si no lo son mostramos un mensaje de error
                                                System.out.println("Error "+BinOpType.LEQ.toString()+" can only be applied to Int or Float values");
                                            }
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // relation ::= sum MAYOR_IGUAL sum 
            {
              Expression RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression s1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression s2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //verificamos que el tipo de los operandos sean validos para la operacion
                                            if(    (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INT))||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.FLOAT)) ||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.FLOATARRAY)) ||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INTARRAY)) ||


                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.FLOAT))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.INT))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.INTARRAY))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.FLOATARRAY))||

                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INTARRAY))||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.FLOATARRAY))||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.FLOAT)) ||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INT))||
                                            

                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.FLOATARRAY)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.INTARRAY)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.INT)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.FLOAT))
                                            ){
                                                BinOpExpr res=new BinOpExpr(s1,BinOpType.GEQ,s2);
                                                res.setType(Type.BOOLEAN);
                                                RESULT=res;
                                            }else{
                                                //si no lo son mostramos un mensaje de error
                                                System.out.println("Error "+BinOpType.GEQ.toString()+" can only be applied to Int or Float values");
                                            }
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // relation ::= sum MAYOR sum 
            {
              Expression RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression s1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression s2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //verificamos que el tipo de los operandos sean validos para la operacion
                                            if(    (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INT))||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.FLOAT)) ||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.FLOATARRAY)) ||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INTARRAY)) ||


                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.FLOAT))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.INT))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.INTARRAY))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.FLOATARRAY))||

                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INTARRAY))||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.FLOATARRAY))||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.FLOAT)) ||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INT))||
                                            

                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.FLOATARRAY)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.INTARRAY)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.INT)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.FLOAT))
                                            ){
                                                BinOpExpr res=new BinOpExpr(s1,BinOpType.GE,s2);
                                                res.setType(Type.BOOLEAN);
                                                RESULT=res;
                                            }else{
                                                //si no lo son mostramos un mensaje de error
                                                System.out.println("Error "+BinOpType.GE.toString()+" can only be applied to Int or Float values");
                                            }
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // relation ::= sum MENOR sum 
            {
              Expression RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression s1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression s2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //verificamos que el tipo de los operandos sean validos para la operacion
                                            if(    (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INT))||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.FLOAT)) ||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.FLOATARRAY)) ||
                                            (s1.getType().equals(Type.INT) && s2.getType().equals(Type.INTARRAY)) ||


                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.FLOAT))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.INT))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.INTARRAY))||
                                            (s1.getType().equals(Type.FLOAT) && s2.getType().equals(Type.FLOATARRAY))||

                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INTARRAY))||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.FLOATARRAY))||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.FLOAT)) ||
                                            (s1.getType().equals(Type.INTARRAY) && s2.getType().equals(Type.INT))||
                                            

                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.FLOATARRAY)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.INTARRAY)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.INT)) ||
                                            (s1.getType().equals(Type.FLOATARRAY) && s2.getType().equals(Type.FLOAT))

                                            ){
                                                BinOpExpr res=new BinOpExpr(s1,BinOpType.LE,s2);
                                                res.setType(Type.BOOLEAN);
                                                RESULT=res;
                                            }else{
                                                //si no lo son mostramos un mensaje de error
                                                System.out.println("Error "+BinOpType.LE.toString()+" can only be applied to Int or Float values");                                            }
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // relation ::= sum 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relation",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comparison ::= relation DIFERENCIA_LOGICA relation 
            {
              Expression RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression r1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//verificamos que el tipo de los operandos sean validos para la operacion
                                            if(r1.getType().equals(Type.BOOLEAN) && r2.getType().equals(Type.BOOLEAN) ||
                                                (r1.getType().equals(Type.INT)&& r2.getType().equals(Type.INT)) ||
                                                (r1.getType().equals(Type.INT)&& r2.getType().equals(Type.INTARRAY)) ||
                                                (r1.getType().equals(Type.INT)&& r2.getType().equals(Type.FLOAT))||
                                                (r1.getType().equals(Type.INT)&& r2.getType().equals(Type.FLOATARRAY))||

                                                (r1.getType().equals(Type.FLOAT)&& r2.getType().equals(Type.INT)) ||
                                                (r1.getType().equals(Type.FLOAT)&& r2.getType().equals(Type.INTARRAY)) ||
                                                (r1.getType().equals(Type.FLOAT)&& r2.getType().equals(Type.FLOAT))||
                                                (r1.getType().equals(Type.FLOAT)&& r2.getType().equals(Type.FLOATARRAY))||
                                                
                                                (r1.getType().equals(Type.INTARRAY)&& r2.getType().equals(Type.INT)) ||
                                                (r1.getType().equals(Type.INTARRAY)&& r2.getType().equals(Type.INTARRAY)) ||
                                                (r1.getType().equals(Type.INTARRAY)&& r2.getType().equals(Type.FLOAT))||
                                                (r1.getType().equals(Type.INTARRAY)&& r2.getType().equals(Type.FLOATARRAY))||

                                                (r1.getType().equals(Type.FLOATARRAY)&& r2.getType().equals(Type.INT)) ||
                                                (r1.getType().equals(Type.FLOATARRAY)&& r2.getType().equals(Type.INTARRAY)) ||
                                                (r1.getType().equals(Type.FLOATARRAY)&& r2.getType().equals(Type.FLOAT))||
                                                (r1.getType().equals(Type.FLOATARRAY)&& r2.getType().equals(Type.FLOATARRAY))
                                                ){
                                                BinOpExpr res= new BinOpExpr(r1,BinOpType.NEQ,r2);
                                                res.setType(Type.BOOLEAN);
                                                RESULT=res;
                                            }else{
                                                //si no lo son mostramos un mensaje de error
                                                System.out.println("Error "+BinOpType.NEQ+"can only be applied to Boolean/Int/Float operands");
                                            }
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // comparison ::= relation IGUALDAD_LOGICA relation 
            {
              Expression RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression r1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //verificamos que el tipo de los operandos sean validos para la operacion
                                    if(r1.getType().equals(Type.BOOLEAN) && r2.getType().equals(Type.BOOLEAN) ||
                                                (r1.getType().equals(Type.INT)&& r2.getType().equals(Type.INT)) ||
                                                (r1.getType().equals(Type.INT)&& r2.getType().equals(Type.INTARRAY)) ||
                                                (r1.getType().equals(Type.INT)&& r2.getType().equals(Type.FLOAT))||
                                                (r1.getType().equals(Type.INT)&& r2.getType().equals(Type.FLOATARRAY))||

                                                (r1.getType().equals(Type.FLOAT)&& r2.getType().equals(Type.INT)) ||
                                                (r1.getType().equals(Type.FLOAT)&& r2.getType().equals(Type.INTARRAY)) ||
                                                (r1.getType().equals(Type.FLOAT)&& r2.getType().equals(Type.FLOAT))||
                                                (r1.getType().equals(Type.FLOAT)&& r2.getType().equals(Type.FLOATARRAY))||
                                                
                                                (r1.getType().equals(Type.INTARRAY)&& r2.getType().equals(Type.INT)) ||
                                                (r1.getType().equals(Type.INTARRAY)&& r2.getType().equals(Type.INTARRAY)) ||
                                                (r1.getType().equals(Type.INTARRAY)&& r2.getType().equals(Type.FLOAT))||
                                                (r1.getType().equals(Type.INTARRAY)&& r2.getType().equals(Type.FLOATARRAY))||

                                                (r1.getType().equals(Type.FLOATARRAY)&& r2.getType().equals(Type.INT)) ||
                                                (r1.getType().equals(Type.FLOATARRAY)&& r2.getType().equals(Type.INTARRAY)) ||
                                                (r1.getType().equals(Type.FLOATARRAY)&& r2.getType().equals(Type.FLOAT))||
                                                (r1.getType().equals(Type.FLOATARRAY)&& r2.getType().equals(Type.FLOATARRAY))
                                                ){
                                                BinOpExpr res= new BinOpExpr(r1,BinOpType.CEQ,r2);
                                                res.setType(Type.BOOLEAN);

                                                RESULT=res;
                                            }else{
                                                //si no lo son mostramos un mensaje de error
                                                System.out.println("Error "+BinOpType.CEQ+"can only be applied to Boolean/Int/Float operands");
                                            }
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // comparison ::= relation 
            {
              Expression RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparison",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // conjunction ::= conjunction CONJUNCION comparison 
            {
              Expression RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression c1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression c2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(c1.getType().equals(Type.BOOLEAN) && c2.getType().equals(Type.BOOLEAN)){
                                                BinOpExpr res=new BinOpExpr(c1,BinOpType.AND,c2);
                                                res.setType(Type.BOOLEAN);
                                                RESULT=res;
                                            }else{
                                                System.out.println("Error "+BinOpType.AND+"can only be applied to Boolean operands");
                                            }
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunction",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // conjunction ::= comparison 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunction",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= expr DISYUNCION conjunction 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(e.getType().equals(Type.BOOLEAN) && c.getType().equals(Type.BOOLEAN)){
                                                BinOpExpr res=new BinOpExpr(e,BinOpType.OR,c);
                                                res.setType(Type.BOOLEAN);
                                                RESULT=res;
                                            }else{
                                                System.out.println("Error "+BinOpType.OR+"can only be applied to Boolean operands");
                                            }
                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= conjunction 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // location ::= ID CORCHETE_IZQ expr CORCHETE_DER 
            {
              Location RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 

                    Simbolo s=TS.buscarSimbolo((String)id);
                    if(s==null){
                        System.out.println("Variable "+id+" not found");
                    }else{
                        
                        if(s.getType().isArray()){
                            if(!e.getType().equals(Type.INT)){
                                System.out.println("Error: expression in array must be int");
                            }else{
                                IntLiteral e2=(IntLiteral) e;
                                if(e2.getValue()<0){
                                    System.out.println("Error: array index must be higher than zero");
                                }else{
                                    VarLocation v=new VarLocation((String)id,s.getType(),s.getValue(),s.getSize());
                                    v.setType(s.getType());
                                    RESULT=v ;
                                }
                            }
                        }else{
                            System.out.println("Variable "+id+" is not an array");
                        }
                    }
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // location ::= ID 
            {
              Location RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Simbolo s=TS.buscarSimbolo((String)id); 
                            if(s==null){
                                System.out.println("Variable "+id+" not found");
                                ////RESULT=null;
                            }else{
                                VarLocation v=new VarLocation((String)id,s.getType(),s.getValue(),s.getSize());
                                v.setType(s.getType());
                                RESULT=v ;
                            }
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // externinvk_arg ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 StringLiteral s=new StringLiteral(str); RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_arg",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // externinvk_arg ::= expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_arg",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // externinvk_args ::= externinvk_args COMA externinvk_arg 
            {
              LinkedList<Expression> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expression> list = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		list.add(arg); RESULT=list;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_args",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // externinvk_args ::= externinvk_arg 
            {
              LinkedList<Expression> RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Expression> listExpr=new LinkedList(); listExpr.add(arg);RESULT=listExpr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_args",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expressions ::= expressions COMA expr 
            {
              LinkedList<Expression> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expression> list = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		list.add(e); RESULT=list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressions",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expressions ::= expr 
            {
              LinkedList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Expression> listExpr=new LinkedList(); listExpr.add(e); RESULT=listExpr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressions",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type_or_void ::= VOID 
            {
              Type RESULT =null;
		RESULT=Type.VOID;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_or_void",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type_or_void ::= type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=tipo_corriente;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_or_void",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // method_call ::= EXTERNINVK PARENTESIS_IZQ STRING_LITERAL COMA type_or_void PARENTESIS_DER 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    ExternInvkExpr res=new ExternInvkExpr(s,new LinkedList(),t);
                    RESULT=res;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // method_call ::= EXTERNINVK PARENTESIS_IZQ STRING_LITERAL COMA type_or_void COMA externinvk_args PARENTESIS_DER 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expression> args = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ExternInvkExpr res=new ExternInvkExpr(s,args,t);
                        RESULT=res;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // method_call ::= ID PARENTESIS_IZQ expressions PARENTESIS_DER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expression> args = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    //llamada a metodo con parametros
                    LinkedList<Type> argsType=new LinkedList();
                    //obtenemos el tipo de cada parametro
                    for(int i=0; i<args.size(); i++){
                        //si alguno de los parametros es una llamada a un metodo
                        if(args.get(i) instanceof MethodCallExpr){
                            MethodCallExpr actual=(MethodCallExpr) args.get(i);
                            LinkedList<Type> tipoArgumentos=new LinkedList();
                            for(int j=0; j<actual.getArgs().size(); j++){
                                tipoArgumentos.addLast(actual.getArgs().get(j).getType());
                            }
                            //y buscamos el metodo por su nombre y la lista de tipos de los parametros dados
                            Metodo m= TS.buscarMetodo(actual.getName(), tipoArgumentos);
                            //y guardamos el tipo que retorna el metodo como tipo de parametro
                            argsType.addLast(m.getTypeReturn());
                        }else{
                            //sino, si es una variable, buscamos su tipo y lo guardamos
                            argsType.addLast(args.get(i).getType());
                        }
                    }
                    //buscamos el metodo por su id y la lista de tipos de parametros
                    Metodo m=TS.buscarMetodo(id, argsType);
                    //si se encontro el metodo
                    if(m!= null){
                        //creamos y retornamos una nueva MethodCallExpr
                        MethodCallExpr res=new MethodCallExpr(m.getName(), args); 
                        res.setType(m.getTypeReturn());
                        RESULT=res;
                    }else{
                        //sino mostramos un mensaje de error indicando que el metodo no fue declarado
                        System.out.println("Error: Method "+id+" not declared");
                    }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // method_call ::= ID PARENTESIS_IZQ PARENTESIS_DER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    //llamada a metodo sin parametros
                    //buscamo el metodo por su id y con su lista de parametros vacia (ya que tecnicamente no tiene parametros)
                    Metodo m=TS.buscarMetodo(id, new LinkedList());
                    if(m!= null){
                        //si el metodo fue encontrado creamos y retornamos una nueva MethodCallExpr
                        MethodCallExpr res=new MethodCallExpr(m.getName(), new LinkedList()); 
                        res.setType(m.getTypeReturn());
                        RESULT=res;
                    }else{
                        //sino mostramos un mensaje de error indicando que el metodo no fue declarado
                        System.out.println("Error: Method "+id+" not declared");
                    }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assign_op ::= DECREMENTO 
            {
              AssignOpType RESULT =null;
		 RESULT= AssignOpType.DECREMENT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assign_op ::= INCREMENTO 
            {
              AssignOpType RESULT =null;
		 RESULT= AssignOpType.INCREMENT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // assign_op ::= ASIGNACION 
            {
              AssignOpType RESULT =null;
		 RESULT= AssignOpType.ASSIGN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // else_block ::= 
            {
              Block RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // else_block ::= ELSE NT$11 block 
            {
              Block RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Block) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 TS.SubirNivel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$11 ::= 
            {
              Block RESULT =null;
 TS.agregarNivel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= NT$10 block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 TS.SubirNivel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$10 ::= 
            {
              Object RESULT =null;
 TS.agregarNivel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= PUNTO_Y_COMA 
            {
              Object RESULT =null;
		 SemiColonStmt res=new SemiColonStmt();RESULT=res; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= CONTINUE PUNTO_Y_COMA 
            {
              Object RESULT =null;
		 //si nos encontramos en un ciclo es valido utilizar la sentencia CONTINUE
                                        if(!inLoop){ 
                                            //si no lo estamos, mostramos un mensaje de error
                                            System.out.println("Error: Continue statement must be in a Loop");
                                        }else{
                                            ContinueStmt res=new ContinueStmt(); 
                                            RESULT=res;
                                        }  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= BREAK PUNTO_Y_COMA 
            {
              Object RESULT =null;
		//si nos encontramos dentro de un ciclo es valido utilizar la sentencia BREAK
                                    if(!inLoop){ 
                                        //si no lo estamos, mostramos un mensaje de error
                                        System.out.println("Error: Break statement must be in a Loop");
                                    }else{
                                        BreakStmt res=new BreakStmt(); 
                                        RESULT=res;
                                    } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= RETURN expr PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                            //verifficamos el tipo de la expression y segun el mismo verificamos si coincide con
                                            //el tipo retornado por el ultimo metodo leido
                                            switch(e.getType()){
                                                case INTARRAY:
                                                    if(ult_metodo.getTypeReturn().equals(Type.INT) || ult_metodo.getTypeReturn().equals(Type.INTARRAY)){
                                                        RESULT=new ReturnStmt(e);
                                                    }else{
                                                        System.out.println("Error: Method "+ult_metodo.getName()+" must return "+ult_metodo.getTypeReturn().toString());
                                                    }
                                                    break;
                                                case BOOLARRAY:
                                                    if(ult_metodo.getTypeReturn().equals(Type.BOOLEAN) || ult_metodo.getTypeReturn().equals(Type.BOOLARRAY)){
                                                        RESULT=new ReturnStmt(e);
                                                    }else{
                                                        System.out.println("Error: Method "+ult_metodo.getName()+" must return "+ult_metodo.getTypeReturn().toString());
                                                    }
                                                    break;
                                                case FLOATARRAY:
                                                    if(ult_metodo.getTypeReturn().equals(Type.FLOAT) || ult_metodo.getTypeReturn().equals(Type.FLOATARRAY)){
                                                        RESULT=new ReturnStmt(e);
                                                    }else{
                                                        System.out.println("Error: Method "+ult_metodo.getName()+" must return "+ult_metodo.getTypeReturn().toString());
                                                    }
                                                    break;
                                            }
                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= RETURN PUNTO_Y_COMA 
            {
              Object RESULT =null;
		
                                    //verificamos que el ultimo metodo leido (el cual se esta procesando)
                                    // retorne void
                                    if(!ult_metodo.getTypeReturn().equals(Type.VOID)){
                                        //si no lo hace, mostramos un mensaje de error
                                             System.out.println("Error: Method "+ult_metodo.getName()+" returns void ");
                                    }else{ 
                                        //sino creamos un returnstmt
                                        ReturnStmt res=new ReturnStmt();
                                        RESULT= res;
                                    }
                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= WHILE expr NT$9 block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //si el tipo de la expression es correcto (es boolean)
                if(e.getType().equals(Type.BOOLEAN)){
                    //creamos el while como tal
                    WhileStmt whileExpr=new WhileStmt(e, b);
                    //y lo retornamos como resultado
                    RESULT= whileExpr;
                }else{
                    //sino, mostramos un mensaje de error
                    System.out.println("Error: Expression in While Statement must be Boolean");
                }
                //luego de haber terminado de procesar el while por completo
                if(inLoop){
                    //subimos de nivel en el arbol
                    TS.SubirNivel();
                    //marcamos que dejamos de estar en un ciclo
                    inLoop=false;
                } 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$9 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
                //agregamos un nuevo nivel para el cuerpo del ciclo
                TS.agregarNivel();
                //marcamos que nos encontramos dentro de un ciclo para habilitar el uso de sentencias 
                // BREAK y CONTINUE
                inLoop=true;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= FOR ID ASIGNACION expr COMA expr NT$8 block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //si las expresiones son de tipo entero o se accede a un arreglo de INT
                if( ( (e1.getType().equals(Type.INT) || (e1.getType().equals(Type.INTARRAY)) ) && (e2.getType().equals(Type.INT) || (e2.getType().equals(Type.INTARRAY) ) ) ) ){
                    ForStmt forStmt=new ForStmt(id, e1, e2, b);
                    RESULT=forStmt;
                }else{
                    System.out.println("Error: Expressions in For Statement must be Int");
                }
                if(inLoop){
                    TS.SubirNivel();
                    inLoop=false;
                } 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$8 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
                TS.agregarNivel(); 
                inLoop=true; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= IF PARENTESIS_IZQ NT$6 expr PARENTESIS_DER block NT$7 else_block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ifBlockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ifBlockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block ifBlock = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elseBlockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseBlockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block elseBlock = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //luego de procesar el bloque else (el cual es opcional)
                if(e.getType().equals(Type.BOOLEAN)){ //si la expression es de tipo boolean
                    IfStmt res=null;
                    if(elseBlock!=null){ //si tiene else block
                        res=new IfStmt(e,ifBlock,elseBlock);
                    }else{//si no tiene else block
                        res=new IfStmt(e, ifBlock);
                    }
                    RESULT=res;
                }else{//si la expression no es de tipo boolean se muestra un mensaje de error
                    System.out.println("Error: Expression in If-Else statement must be Boolean");
                } 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ifBlockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifBlockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block ifBlock = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 //subimos de nivel luego del bloque if
                        TS.SubirNivel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$6 ::= 
            {
              Object RESULT =null;
//agregamos un nuevo nivel al arbol para el cuerpo del if
                 TS.agregarNivel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= method_call PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression m = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= location assign_op expr PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssignOpType ao = (AssignOpType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                            if(e instanceof MethodCallExpr){ //si la expression es una llamada a un metodo
                                                                //buscamos el metodo al cual se llama y verificamos que
                                                                //el tipo que retorna, concuerde con el tipo de la location en donde se 
                                                                //desea asignar

                                                                MethodCallExpr actual=(MethodCallExpr) e;
                                                                LinkedList<Type> tipoArgumentos=new LinkedList();
                                                                //buscamos los tipos de todos los argumentos de la llamada al metodo
                                                                for(int j=0; j<actual.getArgs().size(); j++){
                                                                    tipoArgumentos.addLast(actual.getArgs().get(j).getType());
                                                                }
                                                                //buscamos el metodo por su id y por los tipos de los parametros pasados
                                                                Metodo m= TS.buscarMetodo(actual.getName(), tipoArgumentos);
                                                                if(l.getType().equals(m.getTypeReturn()) && ao.toString().equals("=") || 
                                                                    ((l.getType().equals(Type.FLOAT) || l.getType().equals(Type.FLOATARRAY)) && 
                                                                        (m.getTypeReturn().equals(Type.INT) || m.getTypeReturn().equals(Type.INTARRAY) )) && 
                                                                        (!l.getType().isArray())){ //si se realiza una asignacion con tipos identicos de location y expression (no array)
                                                                    AssignStmt a=new AssignStmt((Location)l, AssignOpType.ASSIGN, (Expression) e); 
                                                                    RESULT=a; 
                                                                }else{
                                                                    //si location es un array
                                                                    if(l.getType().isArray()){
                                                                        //arreglo de enteros expresion entero
                                                                        switch(l.getType()){
                                                                            //caso arreglo de enteros con valor entero
                                                                            case INTARRAY:
                                                                                if(m.getTypeReturn().equals(Type.INT)){
                                                                                    AssignStmt a=new AssignStmt((Location)l, ao, (Expression) e); 
                                                                                    RESULT=a; 
                                                                                }else{
                                                                                    System.out.println("Error int expected but "+m.getTypeReturn()+" found");
                                                                                }
                                                                                break;
                                                                            //caso arreglo de reales (floatarray) con valor real (float)
                                                                            case FLOATARRAY:
                                                                                if(m.getTypeReturn().equals(Type.FLOAT)){
                                                                                    AssignStmt a=new AssignStmt((Location)l, ao, (Expression) e); 
                                                                                    RESULT=a; 
                                                                                }else{
                                                                                    System.out.println("Error float expected but "+m.getTypeReturn()+" found");
                                                                                }
                                                                                break;
                                                                            //caso arreglo de boolean con valor booleano
                                                                            case BOOLARRAY:
                                                                                if(m.getTypeReturn().equals(Type.BOOLEAN)){
                                                                                    if(ao.toString().equals("=")){
                                                                                        AssignStmt a=new AssignStmt((Location)l, AssignOpType.ASSIGN, (Expression) e); 
                                                                                        RESULT=a;
                                                                                    }else{
                                                                                        System.out.println("Error "+ao+" operation not valid for boolean values");
                                                                                    }
                                                                                }else{
                                                                                    System.out.println("Error int expected but "+m.getTypeReturn()+" found");
                                                                                }
                                                                                break;
                                                                            }
                                                                    }else{
                                                                        System.out.println("{MethodCallExpr} Error invalid assign operation in "+l.getId()+", "+l.getType()+" "+ao+" "+m.getTypeReturn());
                                                                    }
                                                                }
                                                           }else{// si la expression no es una llamada a un metodo
                                                                //Si el tipo de la variable y la expresion son el mismo o la variable es float o floatarray el la expresion INT o INTARRAY
                                                                if(
                                                                    (
                                                                    (l.getType().equals(e.getType()) && ao.toString().equals("="))       
                                                                || 
                                                                    
                                                                    ((l.getType().equals(Type.FLOAT) || l.getType().equals(Type.INT)) && (e.getType().equals(Type.INT) || e.getType().equals(Type.INTARRAY) || e.getType().equals(Type.FLOATARRAY) || e.getType().equals(Type.FLOAT)))
                                                                    )
                                                                && 
                                                                        
                                                                    (!l.getType().isArray())

                                                                ){ //si se realiza una asignacion con tipos identicos de location y expression (no array)
                                                                    AssignStmt a=new AssignStmt((Location)l, AssignOpType.ASSIGN, (Expression) e); 
                                                                    RESULT=a; 
                                                                }else{
                                                                    //si location es un array
                                                                    if(l.getType().isArray()){
                                                                        //arreglo de enteros expresion entero
                                                                        switch(l.getType()){
                                                                            //caso arreglo de enteros con valor entero
                                                                            case INTARRAY:
                                                                                if(e.getType().equals(Type.INT)){
                                                                                    AssignStmt a=new AssignStmt((Location)l, ao, (Expression) e); 
                                                                                    RESULT=a; 
                                                                                }else{
                                                                                    System.out.println("Error int expected but "+e.getType()+" found");
                                                                                }
                                                                                break;
                                                                            // caso arreglo de reales con valor real
                                                                            case FLOATARRAY:
                                                                                if(e.getType().equals(Type.FLOAT)){
                                                                                    AssignStmt a=new AssignStmt((Location)l, ao, (Expression) e); 
                                                                                    RESULT=a; 
                                                                                }else{
                                                                                    System.out.println("Error float expected but "+e.getType()+" found");
                                                                                }
                                                                                break;
                                                                            //caso arreglo de boolean con valor booleano
                                                                            case BOOLARRAY:
                                                                                if(e.getType().equals(Type.BOOLEAN)){
                                                                                    if(ao.toString().equals("=")){
                                                                                        AssignStmt a=new AssignStmt((Location)l, AssignOpType.ASSIGN, (Expression) e); 
                                                                                        RESULT=a;
                                                                                    }else{
                                                                                        System.out.println("Error "+ao+" operation not valid for boolean values");
                                                                                    }
                                                                                }else{
                                                                                    System.out.println("Error int expected but "+e.getType()+" found");
                                                                                }
                                                                                break;
                                                                            }
                                                                    }else{
                                                                        System.out.println("Error invalid assign operation in "+l+" "+ao+" "+e);
                                                                    }
                                                                }
                                                           }
                                                                
                                                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= BOOLEAN 
            {
              Object RESULT =null;
		tipo_corriente = Type.BOOLEAN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= FLOAT 
            {
              Object RESULT =null;
		tipo_corriente = Type.FLOAT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= INT 
            {
              Object RESULT =null;
		tipo_corriente = Type.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameterDeclaration ::= type ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //creamos el nuevo simbolo con el tipo e id leidos 
                                        Simbolo sym = new Simbolo(tipo_corriente, a.toString(), null, 0); 
                                        //y lo agregamos como parametro al ultimo metodo leido
                                        TS.obtenerMetodo().addParametro(sym); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterDeclaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameterDeclarations ::= parameterDeclarations COMA parameterDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterDeclarations",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameterDeclarations ::= parameterDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterDeclarations",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameters ::= PARENTESIS_IZQ parameterDeclarations PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameters ::= PARENTESIS_IZQ PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // block ::= LLAVE_IZQ fieldDeclarations statements LLAVE_DER 
            {
              Block RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // block ::= LLAVE_IZQ fieldDeclarations LLAVE_DER 
            {
              Block RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // block ::= LLAVE_IZQ statements LLAVE_DER 
            {
              Block RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // block ::= LLAVE_IZQ LLAVE_DER 
            {
              Block RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // method_decl ::= type ID NT$4 parameters NT$5 block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 //al terminar de procesar el cuerpo del metodo subimos de nivel
                                TS.SubirNivel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                            //buscamos el ult metodo leido, luego de agregarle sus parametros
                            Metodo e=TS.obtenerMetodo();
                            ult_metodo=TS.obtenerMetodo();  
                            //agregamos un nuevo nivel en el arbol, para el cuerpo del metodo
                            TS.agregarNivel();
                            //si el ultimo metodo leido no es main
                            if(!ult_metodo.getName().equals("main")){
                            //agregamos todo parametro como variable dentro de un nuevo nivel
                            //el cual corresponde al cuerpo del metodo leido
                                for(int i=0; i<e.getParametros().size(); i++){
                                Simbolo actual = e.getParametros().get(i);
                                TS.agregarSimbolo(actual.getType(), actual.getName(), actual.getValue(), actual.getSize());
                                }
                            }else{//sino, si el metodo leido fue main
                                //verificamos que no tiene parametros, ya que main no debe tener parametros
                                if(ult_metodo.getParametros().size()!=0){
                                    System.out.println("Error: Method Main must not have parameters");
                                    //marcamos que el metodo leido es main pero al no ser correcto, no es valido
                                    mainDeclared=false;
                                }
                            }
                            
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$4 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                            //si el metodo se llama main marcamos que leimos el metodo main
                            if(g.toString().equals("main")){
                                mainDeclared=true;
                            } 
                            //creamos el metodo correspondiente, segun el tipo leido y su nombre
                            switch (tipo_corriente){
                                  case INT:
                                            TS.agregarMetodo(Type.INT, g.toString());
                                            break;
                                  case FLOAT:
                                            TS.agregarMetodo(Type.FLOAT, g.toString());  
                                            break;
                                  case BOOLEAN:
                                            TS.agregarMetodo(Type.BOOLEAN, g.toString()); 
                                            break;
                             }
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // method_decl ::= VOID ID NT$2 parameters NT$3 block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		//luego de terminar de procesar el cuerpo del metodo, subimos de nivel dentro del arbol
                        TS.SubirNivel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 //luego de leer los parametros
                        //obtenemos el ultimo metodo creado ya que son sus parametros 
                        Metodo e=TS.obtenerMetodo();
                        ult_metodo=e;
                        //agregamos un nuevo nivel al arbol
                        TS.agregarNivel();
                        //si el ultimo metodo leido no es main
                        if(!ult_metodo.getName().equals("main")){
                            //agregamos todo parametro como variable dentro de un nuevo nivel
                            //el cual corresponde al cuerpo del metodo leido
                            for(int i=0; i<e.getParametros().size(); i++){
                                Simbolo actual = e.getParametros().get(i);
                                TS.agregarSimbolo(actual.getType(), actual.getName(), actual.getValue(), actual.getSize());
                            }  
                        }else{//sino, si el metodo leido fue main
                        //verificamos que no tiene parametros, ya que main no debe tener parametros
                            if(ult_metodo.getParametros().size()!=0){
                                System.out.println("Error: Method Main must not have parameters");
                            //marcamos que el metodo leido es main pero al no ser correcto, no es valido
                                mainDeclared=false;
                            }
                        }
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$2 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 //declaracion de metodo que no retorna nada (retorna void)
                        //si el id leido es "main"
                        if(d.toString().equals("main")){
                            //marcamos que se encontro un metodo main (almenos)
                            mainDeclared=true;
                        } 
                        //creamos el objeto metodo en el nivel corriente
                        TS.agregarMetodo(Type.VOID, d.toString());
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // methodDeclarations ::= methodDeclarations method_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDeclarations",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // methodDeclarations ::= method_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDeclarations",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // identifier ::= ID CORCHETE_IZQ INT_LITERAL CORCHETE_DER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 //caso arreglo ID[INT_LITERAL]
                                                    //convertimos el int_literal en string
                                                    int size= Integer.valueOf((String) i); 
                                                    //luego segun el ultimo tipo leido creamos el simbolo que representara al arreglo
                                                    switch (tipo_corriente){
                                                           case INT:
                                                                   TS.agregarSimbolo(Type.INTARRAY, s.toString(), null, size);  
                                                                   break;
                                                           case FLOAT:
                                                                   TS.agregarSimbolo(Type.FLOATARRAY, s.toString(), null, size);  
                                                                   break;
                                                           case BOOLEAN:
                                                                   TS.agregarSimbolo(Type.BOOLARRAY, s.toString(), null, size); 
                                                                   break;
                                                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // identifier ::= ID 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //caso identificador ID
                        TS.agregarSimbolo(tipo_corriente, s.toString(), null, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // identifiers ::= identifiers COMA identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identifiers ::= identifier 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifiers",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // field_decl ::= type identifiers PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fieldDeclarations ::= fieldDeclarations field_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldDeclarations",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fieldDeclarations ::= field_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldDeclarations",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fieldAndMethods ::= fieldDeclarations methodDeclarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldAndMethods",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fieldAndMethods ::= methodDeclarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldAndMethods",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fieldAndMethods ::= fieldDeclarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldAndMethods",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= LLAVE_IZQ NT$1 fieldAndMethods LLAVE_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
 TS = new symbolTable(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // body ::= LLAVE_IZQ LLAVE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= CLASS ID NT$0 body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(mainDeclared){System.out.println("parseo exitoso");}else{System.out.println("Main Method Missing in Class "+d.toString());}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 mainDeclared=false;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

